import {
  CurrencyService,
  DefaultValueAccessor,
  FormBuilder,
  FormControlName,
  FormGroupDirective,
  FormsModule,
  I18NService,
  LayoutBasicComponent,
  NG_VALUE_ACCESSOR,
  NgControlStatus,
  NgControlStatusGroup,
  NgForm,
  NgModel,
  NzAlertModule,
  NzAvatarModule,
  NzBadgeComponent,
  NzBadgeModule,
  NzCheckboxComponent,
  NzCheckboxModule,
  NzColDirective,
  NzContextMenuService,
  NzDividerComponent,
  NzDividerModule,
  NzDropDownADirective,
  NzDropDownDirective,
  NzDropDownModule,
  NzDropdownMenuComponent,
  NzEmbedEmptyComponent,
  NzEmptyModule,
  NzFormControlComponent,
  NzFormDirective,
  NzFormItemComponent,
  NzFormItemFeedbackIconComponent,
  NzFormLabelComponent,
  NzFormModule,
  NzFormNoStatusService,
  NzFormPatchModule,
  NzFormStatusService,
  NzGridModule,
  NzInputDirective,
  NzInputGroupComponent,
  NzInputModule,
  NzInputNumberComponent,
  NzInputNumberModule,
  NzMenuDirective,
  NzMenuDividerDirective,
  NzMenuItemComponent,
  NzMenuModule,
  NzMessageService,
  NzOptionComponent,
  NzPopoverModule,
  NzProgressComponent,
  NzProgressModule,
  NzResizeObserver,
  NzRowDirective,
  NzSelectComponent,
  NzSelectModule,
  NzSubMenuComponent,
  NzTabsModule,
  NzToolTipComponent,
  NzToolTipModule,
  NzTooltipBaseDirective,
  NzTooltipDirective,
  ReactiveFormsModule,
  RequiredValidator,
  ResultModule,
  ReuseTabService,
  Validators,
  WINDOW,
  ZoneOutside,
  defaultInterceptor,
  en_default,
  environment,
  formatMask,
  provideBindAuthRefresh,
  provideStartup,
  startPageGuard,
  ɵNgNoValidate
} from "./chunk-L6CO3SDL.js";
import {
  NzCardComponent,
  NzCardModule,
  NzSkeletonComponent,
  NzSkeletonModule
} from "./chunk-WECDCNMD.js";
import {
  A11yModule,
  ACLService,
  ALAIN_I18N_TOKEN,
  ActivatedRoute,
  AlainConfigService,
  AlainThemeModule,
  AlipayCircleOutline,
  AppstoreOutline,
  ArrowDownOutline,
  AsyncPipe,
  BehaviorSubject,
  BidiModule,
  CandyDate,
  CdkConnectedOverlay,
  CdkDrag,
  CdkDragHandle,
  CdkFixedSizeVirtualScroll,
  CdkObserveContent,
  CdkOverlayOrigin,
  CdkTrapFocus,
  CdkVirtualForOf,
  CdkVirtualScrollViewport,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  CommonModule,
  Component,
  ComponentPortal,
  ContentChild,
  ContentChildren,
  CopyrightOutline,
  DATE_PICKER_POSITION_MAP,
  DEFAULT_DATE_PICKER_POSITIONS,
  DOCUMENT,
  DateHelperService,
  DatePipe,
  DecimalPipe,
  DelonACLModule,
  DelonLocaleService,
  DestroyRef,
  Directionality,
  Directive,
  DomSanitizer,
  DrawerHelper,
  EMPTY,
  ENTER,
  ENVIRONMENT_INITIALIZER,
  ESCAPE,
  ElementRef,
  EventEmitter,
  FileAddOutline,
  FocusMonitor,
  FullscreenExitOutline,
  FullscreenOutline,
  GithubOutline,
  GlobalOutline,
  Host,
  HostListener,
  HttpClient,
  HttpEventType,
  HttpHeaders,
  HttpParams,
  HttpRequest,
  HttpResponse,
  I18nPipe,
  ImagePreloadService,
  Inject,
  Injectable,
  Injector,
  Input,
  InputBoolean,
  InputFlags,
  InputNumber,
  LEFT_ARROW,
  LazyService,
  LockOutline,
  LogoutOutline,
  MailOutline,
  MenuService,
  ModalHelper,
  NavigationEnd,
  NavigationError,
  NgClass,
  NgForOf,
  NgIf,
  NgModule,
  NgStyle,
  NgSwitch,
  NgSwitchCase,
  NgSwitchDefault,
  NgTemplateOutlet,
  NgZone,
  NzBreakpointEnum,
  NzBreakpointService,
  NzButtonComponent,
  NzButtonModule,
  NzConfigService,
  NzConnectedOverlayDirective,
  NzDestroyService,
  NzDrawerModule,
  NzI18nModule,
  NzI18nPipe,
  NzI18nService,
  NzIconDirective,
  NzIconModule,
  NzModalModule,
  NzModalService,
  NzNoAnimationDirective,
  NzOutletModule,
  NzOverlayModule,
  NzResizeService,
  NzScrollService,
  NzStringTemplateOutletDirective,
  NzTransitionPatchDirective,
  NzWaveDirective,
  Observable,
  ObserversModule,
  Optional,
  Output,
  Overlay,
  OverlayConfig,
  OverlayModule,
  OverlayRef,
  PREFIX,
  PRIMARY_OUTLET,
  Platform,
  PlatformModule,
  PlusCircleOutline,
  PlusSquareOutline,
  RIGHT_ARROW,
  Renderer2,
  ReplaySubject,
  ResponsiveService,
  RouteConfigLoadStart,
  Router,
  RouterLink,
  RouterModule,
  RouterOutlet,
  ScrollingModule,
  SettingOutline,
  SettingsService,
  Subject,
  Subscription,
  TaobaoCircleOutline,
  TemplateRef,
  TitleService,
  ToolOutline,
  UserOutline,
  VERSION,
  Version,
  ViewChild,
  ViewChildren,
  ViewContainerRef,
  ViewEncapsulation$1,
  WeiboCircleOutline,
  WithConfig,
  YNPipe,
  _HttpClient,
  __async,
  __decorate,
  __spreadProps,
  __spreadValues,
  animate,
  arraysEqual,
  authSimpleCanActivate,
  authSimpleCanActivateChild,
  authSimpleInterceptor,
  booleanAttribute,
  bootstrapApplication,
  catchError,
  cloneDate,
  combineLatest,
  debounce,
  debounceTime,
  deepCopy,
  deepGet,
  deepMerge,
  deepMergeKey,
  delay,
  distinctUntilChanged,
  enUS,
  en_US,
  en_US_default,
  ensureInBounds,
  fadeMotion,
  filter,
  finalize,
  first,
  formatDate,
  forwardRef,
  fromEvent,
  getStatusClassNames,
  getStyleAsText,
  gridResponsiveMap,
  hasModifierKey,
  helpMotion,
  inject,
  isEmpty,
  isNil,
  isNonEmptyString,
  isNotNil,
  isObservable,
  isPresetColor,
  isStatusColor,
  isTemplateRef,
  isTouchEvent,
  isValid,
  lastValueFrom,
  makeEnvironmentProviders,
  map,
  measureScrollbar,
  merge,
  mergeMap,
  normalizePassiveListenerOptions,
  normalizeRangeValue,
  numberAttribute,
  of,
  presetColors,
  provideAlain,
  provideAnimations,
  provideAuth,
  provideHttpClient,
  provideNzConfig,
  provideRouter,
  reqAnimFrame,
  setClassMetadata,
  shallowEqual,
  skip,
  slideMotion,
  startWith,
  statusColors,
  stepPreloader,
  style,
  switchMap,
  take,
  takeUntil,
  takeUntilDestroyed,
  tap,
  throttleTime,
  throwError,
  timer,
  toBoolean,
  toNumber,
  transition,
  trigger,
  updateHostClass,
  valueFunctionProp,
  warn,
  warn2,
  withComponentInputBinding,
  withHashLocation,
  withInMemoryScrolling,
  withInterceptors,
  withLatestFrom,
  withViewTransitions,
  wrapIntoObservable,
  wrongSortOrder,
  yn,
  zoomBigMotion,
  ɵsetClassDebugInfo,
  ɵɵInheritDefinitionFeature,
  ɵɵInputTransformsFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵStandaloneFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassMapInterpolate1,
  ɵɵclassMapInterpolate2,
  ɵɵclassMapInterpolate4,
  ɵɵclassProp,
  ɵɵcomponentInstance,
  ɵɵconditional,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵhostProperty,
  ɵɵinject,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵpipeBind2,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵrepeater,
  ɵɵrepeaterCreate,
  ɵɵrepeaterTrackByIdentity,
  ɵɵrepeaterTrackByIndex,
  ɵɵresetView,
  ɵɵrestoreView,
  ɵɵsanitizeHtml,
  ɵɵsanitizeUrl,
  ɵɵstyleProp,
  ɵɵsyntheticHostListener,
  ɵɵsyntheticHostProperty,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵtwoWayBindingSet,
  ɵɵtwoWayListener,
  ɵɵtwoWayProperty,
  ɵɵviewQuery
} from "./chunk-VFQBCSPZ.js";

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-version.mjs
var VERSION2 = new Version("17.4.1");

// src/app/app.component.ts
var _AppComponent = class _AppComponent {
  constructor(el, renderer) {
    this.router = inject(Router);
    this.titleSrv = inject(TitleService);
    this.modalSrv = inject(NzModalService);
    this.donePreloader = stepPreloader();
    renderer.setAttribute(el.nativeElement, "ng-alain-version", VERSION.full);
    renderer.setAttribute(el.nativeElement, "ng-zorro-version", VERSION2.full);
  }
  ngOnInit() {
    let configLoad = false;
    this.router.events.subscribe((ev) => {
      if (ev instanceof RouteConfigLoadStart) {
        configLoad = true;
      }
      if (configLoad && ev instanceof NavigationError) {
        this.modalSrv.confirm({
          nzTitle: `\u63D0\u9192`,
          nzContent: environment.production ? `\u5E94\u7528\u53EF\u80FD\u5DF2\u53D1\u5E03\u65B0\u7248\u672C\uFF0C\u8BF7\u70B9\u51FB\u5237\u65B0\u624D\u80FD\u751F\u6548\u3002` : `\u65E0\u6CD5\u52A0\u8F7D\u8DEF\u7531\uFF1A${ev.url}`,
          nzCancelDisabled: false,
          nzOkText: "\u5237\u65B0",
          nzCancelText: "\u5FFD\u7565",
          nzOnOk: () => location.reload()
        });
      }
      if (ev instanceof NavigationEnd) {
        this.donePreloader();
        this.titleSrv.setTitle();
        this.modalSrv.closeAll();
      }
    });
  }
};
_AppComponent.\u0275fac = function AppComponent_Factory(t) {
  return new (t || _AppComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
};
_AppComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 1, vars: 0, template: function AppComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "router-outlet");
  }
}, dependencies: [RouterOutlet], encapsulation: 2 });
var AppComponent = _AppComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 14 });
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-image.mjs
var _c0 = ["imgRef"];
var _c1 = ["imagePreviewWrapper"];
function NzImagePreviewComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275listener("click", function NzImagePreviewComponent_Conditional_2_Template_div_click_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onSwitchLeft($event));
    });
    \u0275\u0275element(1, "span", 14);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div", 15);
    \u0275\u0275listener("click", function NzImagePreviewComponent_Conditional_2_Template_div_click_2_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onSwitchRight($event));
    });
    \u0275\u0275element(3, "span", 16);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classProp("ant-image-preview-switch-left-disabled", ctx_r2.index <= 0);
    \u0275\u0275advance(2);
    \u0275\u0275classProp("ant-image-preview-switch-right-disabled", ctx_r2.index >= ctx_r2.images.length - 1);
  }
}
function NzImagePreviewComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "li", 5);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate2("", ctx_r2.index + 1, " / ", ctx_r2.images.length, "");
  }
}
function NzImagePreviewComponent_For_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 17);
    \u0275\u0275listener("click", function NzImagePreviewComponent_For_6_Template_li_click_0_listener() {
      const option_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(option_r5.onClick());
    });
    \u0275\u0275element(1, "span", 18);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_13_0;
    const option_r5 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classProp("ant-image-preview-operations-operation-disabled", ctx_r2.zoomOutDisabled && option_r5.type === "zoomOut");
    \u0275\u0275advance();
    \u0275\u0275property("nzType", option_r5.icon)("nzRotate", (tmp_13_0 = option_r5.rotate) !== null && tmp_13_0 !== void 0 ? tmp_13_0 : 0);
  }
}
function NzImagePreviewComponent_For_15_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 20, 1);
  }
  if (rf & 2) {
    const image_r6 = \u0275\u0275nextContext().$implicit;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("width", image_r6.width)("height", image_r6.height)("transform", ctx_r2.previewImageTransform);
    \u0275\u0275attribute("src", ctx_r2.sanitizerResourceUrl(image_r6.src), \u0275\u0275sanitizeUrl)("srcset", image_r6.srcset)("alt", image_r6.alt);
  }
}
function NzImagePreviewComponent_For_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzImagePreviewComponent_For_15_Conditional_0_Template, 2, 9, "img", 19);
  }
  if (rf & 2) {
    const imageIndex_r7 = ctx.$index;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, imageIndex_r7 === ctx_r2.index ? 0 : -1);
  }
}
var _c2 = ["*"];
var NZ_CONFIG_MODULE_NAME$1 = "image";
function getFitContentPosition(params) {
  let fixPos = {};
  if (params.width <= params.clientWidth && params.height <= params.clientHeight) {
    fixPos = {
      x: 0,
      y: 0
    };
  }
  if (params.width > params.clientWidth || params.height > params.clientHeight) {
    fixPos = {
      x: fitPoint(params.left, params.width, params.clientWidth),
      y: fitPoint(params.top, params.height, params.clientHeight)
    };
  }
  return fixPos;
}
function getOffset(node) {
  const box = node.getBoundingClientRect();
  const docElem = document.documentElement;
  return {
    left: box.left + (window.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || document.body.clientLeft || 0),
    top: box.top + (window.pageYOffset || docElem.scrollTop) - (docElem.clientTop || document.body.clientTop || 0)
  };
}
function getClientSize() {
  const width = document.documentElement.clientWidth;
  const height = window.innerHeight || document.documentElement.clientHeight;
  return {
    width,
    height
  };
}
function fitPoint(start, size, clientSize) {
  const startAddSize = start + size;
  const offsetStart = (size - clientSize) / 2;
  let distance = null;
  if (size > clientSize) {
    if (start > 0) {
      distance = offsetStart;
    }
    if (start < 0 && startAddSize < clientSize) {
      distance = -offsetStart;
    }
  } else {
    if (start < 0 || startAddSize > clientSize) {
      distance = start < 0 ? offsetStart : -offsetStart;
    }
  }
  return distance;
}
var NzImagePreviewOptions = class {
  constructor() {
    this.nzKeyboard = true;
    this.nzNoAnimation = false;
    this.nzMaskClosable = true;
    this.nzCloseOnNavigation = true;
  }
};
var initialPosition = {
  x: 0,
  y: 0
};
var NZ_DEFAULT_SCALE_STEP = 0.5;
var NZ_DEFAULT_ZOOM = 1;
var NZ_DEFAULT_ROTATE = 0;
var _NzImagePreviewComponent = class _NzImagePreviewComponent {
  get animationDisabled() {
    return this.config.nzNoAnimation ?? false;
  }
  get maskClosable() {
    const defaultConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME$1) || {};
    return this.config.nzMaskClosable ?? defaultConfig.nzMaskClosable ?? true;
  }
  constructor(ngZone, cdr, nzConfigService, config, destroy$, sanitizer) {
    this.ngZone = ngZone;
    this.cdr = cdr;
    this.nzConfigService = nzConfigService;
    this.config = config;
    this.destroy$ = destroy$;
    this.sanitizer = sanitizer;
    this._defaultNzZoom = NZ_DEFAULT_ZOOM;
    this._defaultNzScaleStep = NZ_DEFAULT_SCALE_STEP;
    this._defaultNzRotate = NZ_DEFAULT_ROTATE;
    this.images = [];
    this.index = 0;
    this.isDragging = false;
    this.visible = true;
    this.animationStateChanged = new EventEmitter();
    this.scaleStepMap = /* @__PURE__ */ new Map();
    this.previewImageTransform = "";
    this.previewImageWrapperTransform = "";
    this.operations = [{
      icon: "close",
      onClick: () => {
        this.onClose();
      },
      type: "close"
    }, {
      icon: "zoom-in",
      onClick: () => {
        this.onZoomIn();
      },
      type: "zoomIn"
    }, {
      icon: "zoom-out",
      onClick: () => {
        this.onZoomOut();
      },
      type: "zoomOut"
    }, {
      icon: "rotate-right",
      onClick: () => {
        this.onRotateRight();
      },
      type: "rotateRight"
    }, {
      icon: "rotate-left",
      onClick: () => {
        this.onRotateLeft();
      },
      type: "rotateLeft"
    }, {
      icon: "swap",
      onClick: () => {
        this.onHorizontalFlip();
      },
      type: "flipHorizontally"
    }, {
      icon: "swap",
      onClick: () => {
        this.onVerticalFlip();
      },
      type: "flipVertically",
      rotate: 90
    }];
    this.zoomOutDisabled = false;
    this.position = __spreadValues({}, initialPosition);
    this.closeClick = new EventEmitter();
    this.zoom = this.config.nzZoom ?? this._defaultNzZoom;
    this.scaleStep = this.config.nzScaleStep ?? this._defaultNzScaleStep;
    this.rotate = this.config.nzRotate ?? this._defaultNzRotate;
    this.flipHorizontally = this.config.nzFlipHorizontally ?? false;
    this.flipVertically = this.config.nzFlipVertically ?? false;
    this.updateZoomOutDisabled();
    this.updatePreviewImageTransform();
    this.updatePreviewImageWrapperTransform();
  }
  ngOnInit() {
    this.ngZone.runOutsideAngular(() => {
      fromEvent(this.imagePreviewWrapper.nativeElement, "mousedown").pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.isDragging = true;
      });
      fromEvent(this.imagePreviewWrapper.nativeElement, "wheel").pipe(takeUntil(this.destroy$)).subscribe((event) => {
        this.ngZone.run(() => this.wheelZoomEventHandler(event));
      });
    });
  }
  setImages(images, scaleStepMap) {
    if (scaleStepMap)
      this.scaleStepMap = scaleStepMap;
    this.images = images;
    this.markForCheck();
  }
  switchTo(index) {
    this.index = index;
    this.markForCheck();
  }
  next() {
    if (this.index < this.images.length - 1) {
      this.reset();
      this.index++;
      this.updatePreviewImageTransform();
      this.updatePreviewImageWrapperTransform();
      this.updateZoomOutDisabled();
      this.markForCheck();
    }
  }
  prev() {
    if (this.index > 0) {
      this.reset();
      this.index--;
      this.updatePreviewImageTransform();
      this.updatePreviewImageWrapperTransform();
      this.updateZoomOutDisabled();
      this.markForCheck();
    }
  }
  markForCheck() {
    this.cdr.markForCheck();
  }
  onClose() {
    this.visible = false;
    this.closeClick.emit();
  }
  onZoomIn() {
    const zoomStep = this.scaleStepMap.get(this.images[this.index].src ?? this.images[this.index].srcset) ?? this.scaleStep;
    this.zoom += zoomStep;
    this.updatePreviewImageTransform();
    this.updateZoomOutDisabled();
  }
  onZoomOut() {
    if (this.zoom > 1) {
      const zoomStep = this.scaleStepMap.get(this.images[this.index].src ?? this.images[this.index].srcset) ?? this.scaleStep;
      this.zoom -= zoomStep;
      this.updatePreviewImageTransform();
      this.updateZoomOutDisabled();
      if (this.zoom <= 1) {
        this.reCenterImage();
      }
    }
  }
  onRotateRight() {
    this.rotate += 90;
    this.updatePreviewImageTransform();
  }
  onRotateLeft() {
    this.rotate -= 90;
    this.updatePreviewImageTransform();
  }
  onSwitchLeft(event) {
    event.preventDefault();
    event.stopPropagation();
    this.prev();
  }
  onSwitchRight(event) {
    event.preventDefault();
    event.stopPropagation();
    this.next();
  }
  onHorizontalFlip() {
    this.flipHorizontally = !this.flipHorizontally;
    this.updatePreviewImageTransform();
  }
  onVerticalFlip() {
    this.flipVertically = !this.flipVertically;
    this.updatePreviewImageTransform();
  }
  wheelZoomEventHandler(event) {
    event.preventDefault();
    event.stopPropagation();
    this.handlerImageTransformationWhileZoomingWithMouse(event, event.deltaY);
    this.handleImageScaleWhileZoomingWithMouse(event.deltaY);
    this.updatePreviewImageWrapperTransform();
    this.updatePreviewImageTransform();
    this.markForCheck();
  }
  onAnimationStart(event) {
    this.animationStateChanged.emit(event);
  }
  onAnimationDone(event) {
    this.animationStateChanged.emit(event);
  }
  onDragEnd(event) {
    this.isDragging = false;
    const width = this.imageRef.nativeElement.offsetWidth * this.zoom;
    const height = this.imageRef.nativeElement.offsetHeight * this.zoom;
    const {
      left,
      top
    } = getOffset(this.imageRef.nativeElement);
    const {
      width: clientWidth,
      height: clientHeight
    } = getClientSize();
    const isRotate = this.rotate % 180 !== 0;
    const fitContentParams = {
      width: isRotate ? height : width,
      height: isRotate ? width : height,
      left,
      top,
      clientWidth,
      clientHeight
    };
    const fitContentPos = getFitContentPosition(fitContentParams);
    if (isNotNil(fitContentPos.x) || isNotNil(fitContentPos.y)) {
      this.position = __spreadValues(__spreadValues({}, this.position), fitContentPos);
    } else if (!isNotNil(fitContentPos.x) && !isNotNil(fitContentPos.y)) {
      this.position = {
        x: event.source.getFreeDragPosition().x,
        y: event.source.getFreeDragPosition().y
      };
    }
  }
  sanitizerResourceUrl(url) {
    return this.sanitizer.bypassSecurityTrustResourceUrl(url);
  }
  updatePreviewImageTransform() {
    this.previewImageTransform = `scale3d(${this.zoom * (this.flipHorizontally ? -1 : 1)}, ${this.zoom * (this.flipVertically ? -1 : 1)}, 1) rotate(${this.rotate}deg)`;
  }
  updatePreviewImageWrapperTransform() {
    this.previewImageWrapperTransform = `translate3d(${this.position.x}px, ${this.position.y}px, 0)`;
  }
  updateZoomOutDisabled() {
    this.zoomOutDisabled = this.zoom <= 1;
  }
  handlerImageTransformationWhileZoomingWithMouse(event, deltaY) {
    let scaleValue;
    const imageElement = this.imageRef.nativeElement;
    const elementTransform = getComputedStyle(imageElement).transform;
    const matrixValue = elementTransform.match(/matrix.*\((.+)\)/);
    if (matrixValue) {
      scaleValue = +matrixValue[1].split(", ")[0];
    } else {
      scaleValue = this.zoom;
    }
    const x = (event.clientX - imageElement.getBoundingClientRect().x) / scaleValue;
    const y = (event.clientY - imageElement.getBoundingClientRect().y) / scaleValue;
    const halfOfScaleStepValue = deltaY < 0 ? this.scaleStep / 2 : -this.scaleStep / 2;
    this.position.x += -x * halfOfScaleStepValue * 2 + imageElement.offsetWidth * halfOfScaleStepValue;
    this.position.y += -y * halfOfScaleStepValue * 2 + imageElement.offsetHeight * halfOfScaleStepValue;
  }
  handleImageScaleWhileZoomingWithMouse(deltaY) {
    if (this.isZoomedInWithMouseWheel(deltaY)) {
      this.onZoomIn();
    } else {
      this.onZoomOut();
    }
    if (this.zoom <= 1) {
      this.reCenterImage();
    }
  }
  isZoomedInWithMouseWheel(delta) {
    return delta < 0;
  }
  reset() {
    this.zoom = this.config.nzZoom ?? this._defaultNzZoom;
    this.scaleStep = this.config.nzScaleStep ?? this._defaultNzScaleStep;
    this.rotate = this.config.nzRotate ?? this._defaultNzRotate;
    this.flipHorizontally = false;
    this.flipVertically = false;
    this.reCenterImage();
  }
  reCenterImage() {
    this.position = __spreadValues({}, initialPosition);
  }
};
_NzImagePreviewComponent.\u0275fac = function NzImagePreviewComponent_Factory(t) {
  return new (t || _NzImagePreviewComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(NzImagePreviewOptions), \u0275\u0275directiveInject(NzDestroyService), \u0275\u0275directiveInject(DomSanitizer));
};
_NzImagePreviewComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzImagePreviewComponent,
  selectors: [["nz-image-preview"]],
  viewQuery: function NzImagePreviewComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c0, 5);
      \u0275\u0275viewQuery(_c1, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.imageRef = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.imagePreviewWrapper = _t.first);
    }
  },
  hostAttrs: [1, "ant-image-preview-root"],
  hostVars: 6,
  hostBindings: function NzImagePreviewComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275syntheticHostListener("@fadeMotion.start", function NzImagePreviewComponent_animation_fadeMotion_start_HostBindingHandler($event) {
        return ctx.onAnimationStart($event);
      })("@fadeMotion.done", function NzImagePreviewComponent_animation_fadeMotion_done_HostBindingHandler($event) {
        return ctx.onAnimationDone($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275syntheticHostProperty("@.disabled", ctx.config.nzNoAnimation)("@fadeMotion", ctx.visible ? "enter" : "leave");
      \u0275\u0275styleProp("z-index", ctx.config.nzZIndex);
      \u0275\u0275classProp("ant-image-preview-moving", ctx.isDragging);
    }
  },
  exportAs: ["nzImagePreview"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275StandaloneFeature],
  decls: 17,
  vars: 5,
  consts: [["imagePreviewWrapper", ""], ["imgRef", ""], [1, "ant-image-preview-mask"], [1, "ant-image-preview-operations-wrapper"], [1, "ant-image-preview-operations"], [1, "ant-image-preview-operations-progress"], [1, "ant-image-preview-operations-operation", 3, "ant-image-preview-operations-operation-disabled"], ["tabindex", "-1", 1, "ant-image-preview-wrap", 3, "click"], ["role", "dialog", "aria-modal", "true", 1, "ant-image-preview"], ["tabindex", "0", "aria-hidden", "true", 2, "width", "0", "height", "0", "overflow", "hidden", "outline", "none"], [1, "ant-image-preview-content"], [1, "ant-image-preview-body"], ["cdkDrag", "", 1, "ant-image-preview-img-wrapper", 3, "cdkDragEnded", "cdkDragFreeDragPosition"], [1, "ant-image-preview-switch-left", 3, "click"], ["nz-icon", "", "nzType", "left", "nzTheme", "outline"], [1, "ant-image-preview-switch-right", 3, "click"], ["nz-icon", "", "nzType", "right", "nzTheme", "outline"], [1, "ant-image-preview-operations-operation", 3, "click"], ["nz-icon", "", "nzTheme", "outline", 1, "ant-image-preview-operations-icon", 3, "nzType", "nzRotate"], ["cdkDragHandle", "", 1, "ant-image-preview-img", 3, "width", "height", "transform"], ["cdkDragHandle", "", 1, "ant-image-preview-img"]],
  template: function NzImagePreviewComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275element(0, "div", 2);
      \u0275\u0275elementStart(1, "div", 3);
      \u0275\u0275template(2, NzImagePreviewComponent_Conditional_2_Template, 4, 4);
      \u0275\u0275elementStart(3, "ul", 4);
      \u0275\u0275template(4, NzImagePreviewComponent_Conditional_4_Template, 2, 2, "li", 5);
      \u0275\u0275repeaterCreate(5, NzImagePreviewComponent_For_6_Template, 2, 4, "li", 6, \u0275\u0275repeaterTrackByIdentity);
      \u0275\u0275elementEnd()();
      \u0275\u0275elementStart(7, "div", 7);
      \u0275\u0275listener("click", function NzImagePreviewComponent_Template_div_click_7_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.maskClosable && $event.target === $event.currentTarget && ctx.onClose());
      });
      \u0275\u0275elementStart(8, "div", 8);
      \u0275\u0275element(9, "div", 9);
      \u0275\u0275elementStart(10, "div", 10)(11, "div", 11)(12, "div", 12, 0);
      \u0275\u0275listener("cdkDragEnded", function NzImagePreviewComponent_Template_div_cdkDragEnded_12_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onDragEnd($event));
      });
      \u0275\u0275repeaterCreate(14, NzImagePreviewComponent_For_15_Template, 1, 1, null, null, \u0275\u0275repeaterTrackByIdentity);
      \u0275\u0275elementEnd()()();
      \u0275\u0275element(16, "div", 9);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275conditional(2, ctx.images.length > 1 ? 2 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(4, ctx.images.length > 1 ? 4 : -1);
      \u0275\u0275advance();
      \u0275\u0275repeater(ctx.operations);
      \u0275\u0275advance(7);
      \u0275\u0275styleProp("transform", ctx.previewImageWrapperTransform);
      \u0275\u0275property("cdkDragFreeDragPosition", ctx.position);
      \u0275\u0275advance(2);
      \u0275\u0275repeater(ctx.images);
    }
  },
  dependencies: [NzIconModule, NzIconDirective, CdkDragHandle, CdkDrag],
  encapsulation: 2,
  data: {
    animation: [fadeMotion]
  },
  changeDetection: 0
});
var NzImagePreviewComponent = _NzImagePreviewComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImagePreviewComponent, [{
    type: Component,
    args: [{
      selector: "nz-image-preview",
      exportAs: "nzImagePreview",
      animations: [fadeMotion],
      standalone: true,
      template: `
    <div class="ant-image-preview-mask"></div>

    <div class="ant-image-preview-operations-wrapper">
      @if (images.length > 1) {
        <div
          class="ant-image-preview-switch-left"
          [class.ant-image-preview-switch-left-disabled]="index <= 0"
          (click)="onSwitchLeft($event)"
        >
          <span nz-icon nzType="left" nzTheme="outline"></span>
        </div>
        <div
          class="ant-image-preview-switch-right"
          [class.ant-image-preview-switch-right-disabled]="index >= images.length - 1"
          (click)="onSwitchRight($event)"
        >
          <span nz-icon nzType="right" nzTheme="outline"></span>
        </div>
      }

      <ul class="ant-image-preview-operations">
        @if (images.length > 1) {
          <li class="ant-image-preview-operations-progress">{{ index + 1 }} / {{ images.length }}</li>
        }

        @for (option of operations; track option) {
          <li
            class="ant-image-preview-operations-operation"
            [class.ant-image-preview-operations-operation-disabled]="zoomOutDisabled && option.type === 'zoomOut'"
            (click)="option.onClick()"
          >
            <span
              class="ant-image-preview-operations-icon"
              nz-icon
              [nzType]="option.icon"
              [nzRotate]="option.rotate ?? 0"
              nzTheme="outline"
            ></span>
          </li>
        }
      </ul>
    </div>

    <div
      class="ant-image-preview-wrap"
      tabindex="-1"
      (click)="maskClosable && $event.target === $event.currentTarget && onClose()"
    >
      <div class="ant-image-preview" role="dialog" aria-modal="true">
        <div tabindex="0" aria-hidden="true" style="width: 0; height: 0; overflow: hidden; outline: none;"></div>
        <div class="ant-image-preview-content">
          <div class="ant-image-preview-body">
            <div
              class="ant-image-preview-img-wrapper"
              #imagePreviewWrapper
              cdkDrag
              [style.transform]="previewImageWrapperTransform"
              [cdkDragFreeDragPosition]="position"
              (cdkDragEnded)="onDragEnd($event)"
            >
              @for (image of images; track image; let imageIndex = $index) {
                @if (imageIndex === index) {
                  <img
                    cdkDragHandle
                    class="ant-image-preview-img"
                    #imgRef
                    [attr.src]="sanitizerResourceUrl(image.src)"
                    [attr.srcset]="image.srcset"
                    [attr.alt]="image.alt"
                    [style.width]="image.width"
                    [style.height]="image.height"
                    [style.transform]="previewImageTransform"
                  />
                }
              }
            </div>
          </div>
        </div>
        <div tabindex="0" aria-hidden="true" style="width: 0; height: 0; overflow: hidden; outline: none;"></div>
      </div>
    </div>
  `,
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      host: {
        class: "ant-image-preview-root",
        "[class.ant-image-preview-moving]": "isDragging",
        "[style.zIndex]": "config.nzZIndex",
        "[@.disabled]": "config.nzNoAnimation",
        "[@fadeMotion]": `visible ? 'enter' : 'leave'`,
        "(@fadeMotion.start)": "onAnimationStart($event)",
        "(@fadeMotion.done)": "onAnimationDone($event)"
      },
      imports: [NzIconModule, CdkDragHandle, CdkDrag],
      providers: [NzDestroyService]
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzConfigService
  }, {
    type: NzImagePreviewOptions
  }, {
    type: NzDestroyService
  }, {
    type: DomSanitizer
  }], {
    imageRef: [{
      type: ViewChild,
      args: ["imgRef"]
    }],
    imagePreviewWrapper: [{
      type: ViewChild,
      args: ["imagePreviewWrapper", {
        static: true
      }]
    }]
  });
})();
var NzImagePreviewRef = class {
  constructor(previewInstance, config, overlayRef) {
    this.previewInstance = previewInstance;
    this.config = config;
    this.overlayRef = overlayRef;
    this.destroy$ = new Subject();
    overlayRef.keydownEvents().pipe(filter((event) => this.config.nzKeyboard && (event.keyCode === ESCAPE || event.keyCode === LEFT_ARROW || event.keyCode === RIGHT_ARROW) && !hasModifierKey(event))).subscribe((event) => {
      event.preventDefault();
      if (event.keyCode === ESCAPE) {
        previewInstance.onClose();
      }
      if (event.keyCode === LEFT_ARROW) {
        this.prev();
      }
      if (event.keyCode === RIGHT_ARROW) {
        this.next();
      }
    });
    overlayRef.detachments().subscribe(() => {
      this.overlayRef.dispose();
    });
    previewInstance.closeClick.pipe(take(1), switchMap(() => previewInstance.animationStateChanged), filter((event) => event.phaseName === "done"), takeUntil(this.destroy$)).subscribe(() => {
      this.close();
    });
  }
  switchTo(index) {
    this.previewInstance.switchTo(index);
  }
  next() {
    this.previewInstance.next();
  }
  prev() {
    this.previewInstance.prev();
  }
  close() {
    this.destroy$.next();
    this.overlayRef.dispose();
  }
};
var _NzImageService = class _NzImageService {
  constructor(overlay, injector, nzConfigService, directionality) {
    this.overlay = overlay;
    this.injector = injector;
    this.nzConfigService = nzConfigService;
    this.directionality = directionality;
  }
  preview(images, options, zoomMap) {
    return this.display(images, options, zoomMap);
  }
  display(images, config, scaleStepMap) {
    const configMerged = __spreadValues(__spreadValues({}, new NzImagePreviewOptions()), config ?? {});
    const overlayRef = this.createOverlay(configMerged);
    const previewComponent = this.attachPreviewComponent(overlayRef, configMerged);
    previewComponent.setImages(images, scaleStepMap);
    const previewRef = new NzImagePreviewRef(previewComponent, configMerged, overlayRef);
    previewComponent.previewRef = previewRef;
    return previewRef;
  }
  attachPreviewComponent(overlayRef, config) {
    const injector = Injector.create({
      parent: this.injector,
      providers: [{
        provide: OverlayRef,
        useValue: overlayRef
      }, {
        provide: NzImagePreviewOptions,
        useValue: config
      }]
    });
    const containerPortal = new ComponentPortal(NzImagePreviewComponent, null, injector);
    const containerRef = overlayRef.attach(containerPortal);
    return containerRef.instance;
  }
  createOverlay(config) {
    const globalConfig = this.nzConfigService.getConfigForComponent(NZ_CONFIG_MODULE_NAME$1) || {};
    const overLayConfig = new OverlayConfig({
      scrollStrategy: this.overlay.scrollStrategies.block(),
      positionStrategy: this.overlay.position().global(),
      disposeOnNavigation: config.nzCloseOnNavigation ?? globalConfig.nzCloseOnNavigation ?? true,
      direction: config.nzDirection || globalConfig.nzDirection || this.directionality.value
    });
    return this.overlay.create(overLayConfig);
  }
};
_NzImageService.\u0275fac = function NzImageService_Factory(t) {
  return new (t || _NzImageService)(\u0275\u0275inject(Overlay), \u0275\u0275inject(Injector), \u0275\u0275inject(NzConfigService), \u0275\u0275inject(Directionality, 8));
};
_NzImageService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NzImageService,
  factory: _NzImageService.\u0275fac
});
var NzImageService = _NzImageService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImageService, [{
    type: Injectable
  }], () => [{
    type: Overlay
  }, {
    type: Injector
  }, {
    type: NzConfigService
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _NzImageGroupComponent = class _NzImageGroupComponent {
  constructor() {
    this.nzScaleStep = null;
    this.images = [];
  }
  addImage(image) {
    this.images.push(image);
  }
};
_NzImageGroupComponent.\u0275fac = function NzImageGroupComponent_Factory(t) {
  return new (t || _NzImageGroupComponent)();
};
_NzImageGroupComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzImageGroupComponent,
  selectors: [["nz-image-group"]],
  inputs: {
    nzScaleStep: "nzScaleStep"
  },
  exportAs: ["nzImageGroup"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c2,
  decls: 1,
  vars: 0,
  template: function NzImageGroupComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var NzImageGroupComponent = _NzImageGroupComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImageGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-image-group",
      exportAs: "nzImageGroup",
      template: "<ng-content></ng-content>",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true
    }]
  }], null, {
    nzScaleStep: [{
      type: Input
    }]
  });
})();
var NZ_CONFIG_MODULE_NAME = "image";
var _NzImageDirective = class _NzImageDirective {
  get previewable() {
    return !this.nzDisablePreview && this.status !== "error";
  }
  constructor(document2, nzConfigService, elementRef, nzImageService, cdr, parentGroup, directionality) {
    this.document = document2;
    this.nzConfigService = nzConfigService;
    this.elementRef = elementRef;
    this.nzImageService = nzImageService;
    this.cdr = cdr;
    this.parentGroup = parentGroup;
    this.directionality = directionality;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME;
    this.nzSrc = "";
    this.nzSrcset = "";
    this.nzDisablePreview = false;
    this.nzFallback = null;
    this.nzPlaceholder = null;
    this.nzScaleStep = null;
    this.status = "normal";
    this.backLoadDestroy$ = new Subject();
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    this.backLoad();
    if (this.parentGroup) {
      this.parentGroup.addImage(this);
    }
    if (this.directionality) {
      this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
        this.dir = direction;
        this.cdr.detectChanges();
      });
      this.dir = this.directionality.value;
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  onPreview() {
    if (!this.previewable) {
      return;
    }
    if (this.parentGroup) {
      const previewAbleImages = this.parentGroup.images.filter((e) => e.previewable);
      const previewImages = previewAbleImages.map((e) => ({
        src: e.nzSrc,
        srcset: e.nzSrcset
      }));
      const previewIndex = previewAbleImages.findIndex((el) => this === el);
      const scaleStepMap = /* @__PURE__ */ new Map();
      previewAbleImages.forEach((imageDirective) => {
        scaleStepMap.set(imageDirective.nzSrc ?? imageDirective.nzSrcset, imageDirective.nzScaleStep ?? this.parentGroup.nzScaleStep ?? this.nzScaleStep ?? NZ_DEFAULT_SCALE_STEP);
      });
      const previewRef = this.nzImageService.preview(previewImages, {
        nzDirection: this.dir
      }, scaleStepMap);
      previewRef.switchTo(previewIndex);
    } else {
      const previewImages = [{
        src: this.nzSrc,
        srcset: this.nzSrcset
      }];
      this.nzImageService.preview(previewImages, {
        nzDirection: this.dir,
        nzScaleStep: this.nzScaleStep ?? NZ_DEFAULT_SCALE_STEP
      });
    }
  }
  getElement() {
    return this.elementRef;
  }
  ngOnChanges(changes) {
    const {
      nzSrc
    } = changes;
    if (nzSrc) {
      this.getElement().nativeElement.src = nzSrc.currentValue;
      this.backLoad();
    }
  }
  /**
   * use internal Image object handle fallback & placeholder
   *
   * @private
   */
  backLoad() {
    this.backLoadImage = this.document.createElement("img");
    this.backLoadImage.src = this.nzSrc;
    this.backLoadImage.srcset = this.nzSrcset;
    this.status = "loading";
    this.backLoadDestroy$.next();
    this.backLoadDestroy$.complete();
    this.backLoadDestroy$ = new Subject();
    if (this.backLoadImage.complete) {
      this.status = "normal";
      this.getElement().nativeElement.src = this.nzSrc;
      this.getElement().nativeElement.srcset = this.nzSrcset;
    } else {
      if (this.nzPlaceholder) {
        this.getElement().nativeElement.src = this.nzPlaceholder;
        this.getElement().nativeElement.srcset = "";
      } else {
        this.getElement().nativeElement.src = this.nzSrc;
        this.getElement().nativeElement.srcset = this.nzSrcset;
      }
      fromEvent(this.backLoadImage, "load").pipe(takeUntil(this.backLoadDestroy$), takeUntil(this.destroy$)).subscribe(() => {
        this.status = "normal";
        this.getElement().nativeElement.src = this.nzSrc;
        this.getElement().nativeElement.srcset = this.nzSrcset;
      });
      fromEvent(this.backLoadImage, "error").pipe(takeUntil(this.backLoadDestroy$), takeUntil(this.destroy$)).subscribe(() => {
        this.status = "error";
        if (this.nzFallback) {
          this.getElement().nativeElement.src = this.nzFallback;
          this.getElement().nativeElement.srcset = "";
        }
      });
    }
  }
};
_NzImageDirective.\u0275fac = function NzImageDirective_Factory(t) {
  return new (t || _NzImageDirective)(\u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NzImageService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzImageGroupComponent, 8), \u0275\u0275directiveInject(Directionality, 8));
};
_NzImageDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzImageDirective,
  selectors: [["img", "nz-image", ""]],
  hostBindings: function NzImageDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function NzImageDirective_click_HostBindingHandler() {
        return ctx.onPreview();
      });
    }
  },
  inputs: {
    nzSrc: "nzSrc",
    nzSrcset: "nzSrcset",
    nzDisablePreview: "nzDisablePreview",
    nzFallback: "nzFallback",
    nzPlaceholder: "nzPlaceholder",
    nzScaleStep: "nzScaleStep"
  },
  exportAs: ["nzImage"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NzImageDirective = _NzImageDirective;
__decorate([InputBoolean(), WithConfig()], NzImageDirective.prototype, "nzDisablePreview", void 0);
__decorate([WithConfig()], NzImageDirective.prototype, "nzFallback", void 0);
__decorate([WithConfig()], NzImageDirective.prototype, "nzPlaceholder", void 0);
__decorate([WithConfig()], NzImageDirective.prototype, "nzScaleStep", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImageDirective, [{
    type: Directive,
    args: [{
      selector: "img[nz-image]",
      exportAs: "nzImage",
      host: {
        "(click)": "onPreview()"
      },
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: NzConfigService
  }, {
    type: ElementRef
  }, {
    type: NzImageService
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzImageGroupComponent,
    decorators: [{
      type: Optional
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzSrc: [{
      type: Input
    }],
    nzSrcset: [{
      type: Input
    }],
    nzDisablePreview: [{
      type: Input
    }],
    nzFallback: [{
      type: Input
    }],
    nzPlaceholder: [{
      type: Input
    }],
    nzScaleStep: [{
      type: Input
    }]
  });
})();
var _NzImageModule = class _NzImageModule {
};
_NzImageModule.\u0275fac = function NzImageModule_Factory(t) {
  return new (t || _NzImageModule)();
};
_NzImageModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzImageModule
});
_NzImageModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [NzImageService],
  imports: [NzImagePreviewComponent]
});
var NzImageModule = _NzImageModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImageModule, [{
    type: NgModule,
    args: [{
      imports: [NzImageDirective, NzImagePreviewComponent, NzImageGroupComponent],
      exports: [NzImageDirective, NzImagePreviewComponent, NzImageGroupComponent],
      providers: [NzImageService]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-radio.mjs
var _c02 = ["*"];
var _c12 = ["inputElement"];
var _c22 = ["nz-radio", ""];
var _NzRadioService = class _NzRadioService {
  constructor() {
    this.selected$ = new ReplaySubject(1);
    this.touched$ = new Subject();
    this.disabled$ = new ReplaySubject(1);
    this.name$ = new ReplaySubject(1);
  }
  touch() {
    this.touched$.next();
  }
  select(value) {
    this.selected$.next(value);
  }
  setDisabled(value) {
    this.disabled$.next(value);
  }
  setName(value) {
    this.name$.next(value);
  }
};
_NzRadioService.\u0275fac = function NzRadioService_Factory(t) {
  return new (t || _NzRadioService)();
};
_NzRadioService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NzRadioService,
  factory: _NzRadioService.\u0275fac
});
var NzRadioService = _NzRadioService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioService, [{
    type: Injectable
  }], null, null);
})();
var _NzRadioGroupComponent = class _NzRadioGroupComponent {
  constructor(cdr, nzRadioService, directionality) {
    this.cdr = cdr;
    this.nzRadioService = nzRadioService;
    this.directionality = directionality;
    this.value = null;
    this.destroy$ = new Subject();
    this.isNzDisableFirstChange = true;
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.nzDisabled = false;
    this.nzButtonStyle = "outline";
    this.nzSize = "default";
    this.nzName = null;
    this.dir = "ltr";
  }
  ngOnInit() {
    this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe((value) => {
      if (this.value !== value) {
        this.value = value;
        this.onChange(this.value);
      }
    });
    this.nzRadioService.touched$.pipe(takeUntil(this.destroy$)).subscribe(() => {
      Promise.resolve().then(() => this.onTouched());
    });
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnChanges(changes) {
    const {
      nzDisabled,
      nzName
    } = changes;
    if (nzDisabled) {
      this.nzRadioService.setDisabled(this.nzDisabled);
    }
    if (nzName) {
      this.nzRadioService.setName(this.nzName);
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  writeValue(value) {
    this.value = value;
    this.nzRadioService.select(value);
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || isDisabled;
    this.isNzDisableFirstChange = false;
    this.nzRadioService.setDisabled(this.nzDisabled);
    this.cdr.markForCheck();
  }
};
_NzRadioGroupComponent.\u0275fac = function NzRadioGroupComponent_Factory(t) {
  return new (t || _NzRadioGroupComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzRadioService), \u0275\u0275directiveInject(Directionality, 8));
};
_NzRadioGroupComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzRadioGroupComponent,
  selectors: [["nz-radio-group"]],
  hostAttrs: [1, "ant-radio-group"],
  hostVars: 8,
  hostBindings: function NzRadioGroupComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-radio-group-large", ctx.nzSize === "large")("ant-radio-group-small", ctx.nzSize === "small")("ant-radio-group-solid", ctx.nzButtonStyle === "solid")("ant-radio-group-rtl", ctx.dir === "rtl");
    }
  },
  inputs: {
    nzDisabled: "nzDisabled",
    nzButtonStyle: "nzButtonStyle",
    nzSize: "nzSize",
    nzName: "nzName"
  },
  exportAs: ["nzRadioGroup"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzRadioService, {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => _NzRadioGroupComponent),
    multi: true
  }]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function NzRadioGroupComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var NzRadioGroupComponent = _NzRadioGroupComponent;
__decorate([InputBoolean()], NzRadioGroupComponent.prototype, "nzDisabled", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioGroupComponent, [{
    type: Component,
    args: [{
      selector: "nz-radio-group",
      exportAs: "nzRadioGroup",
      preserveWhitespaces: false,
      template: ` <ng-content></ng-content> `,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [NzRadioService, {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzRadioGroupComponent),
        multi: true
      }],
      host: {
        class: "ant-radio-group",
        "[class.ant-radio-group-large]": `nzSize === 'large'`,
        "[class.ant-radio-group-small]": `nzSize === 'small'`,
        "[class.ant-radio-group-solid]": `nzButtonStyle === 'solid'`,
        "[class.ant-radio-group-rtl]": `dir === 'rtl'`
      },
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NzRadioService
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzDisabled: [{
      type: Input
    }],
    nzButtonStyle: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzName: [{
      type: Input
    }]
  });
})();
var _NzRadioComponent = class _NzRadioComponent {
  focus() {
    this.focusMonitor.focusVia(this.inputElement, "keyboard");
  }
  blur() {
    this.inputElement.nativeElement.blur();
  }
  constructor(ngZone, elementRef, cdr, focusMonitor, directionality, nzRadioService, nzFormStatusService) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.cdr = cdr;
    this.focusMonitor = focusMonitor;
    this.directionality = directionality;
    this.nzRadioService = nzRadioService;
    this.nzFormStatusService = nzFormStatusService;
    this.isNgModel = false;
    this.destroy$ = new Subject();
    this.isNzDisableFirstChange = true;
    this.isChecked = false;
    this.name = null;
    this.onChange = () => {
    };
    this.onTouched = () => {
    };
    this.nzValue = null;
    this.nzDisabled = false;
    this.nzAutoFocus = false;
    this.isRadioButton = false;
    this.dir = "ltr";
  }
  setDisabledState(disabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
    this.isNzDisableFirstChange = false;
    this.cdr.markForCheck();
  }
  writeValue(value) {
    this.isChecked = value;
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.isNgModel = true;
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  ngOnInit() {
    if (this.nzRadioService) {
      this.nzRadioService.name$.pipe(takeUntil(this.destroy$)).subscribe((name) => {
        this.name = name;
        this.cdr.markForCheck();
      });
      this.nzRadioService.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {
        this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || disabled;
        this.isNzDisableFirstChange = false;
        this.cdr.markForCheck();
      });
      this.nzRadioService.selected$.pipe(takeUntil(this.destroy$)).subscribe((value) => {
        const isChecked = this.isChecked;
        this.isChecked = this.nzValue === value;
        if (this.isNgModel && isChecked !== this.isChecked && // We're only intereted if `isChecked` has been changed to `false` value to emit `false` to the ascendant form,
        // since we already emit `true` within the `setupClickListener`.
        this.isChecked === false) {
          this.onChange(false);
        }
        this.cdr.markForCheck();
      });
    }
    this.focusMonitor.monitor(this.elementRef, true).pipe(takeUntil(this.destroy$)).subscribe((focusOrigin) => {
      if (!focusOrigin) {
        Promise.resolve().then(() => this.onTouched());
        if (this.nzRadioService) {
          this.nzRadioService.touch();
        }
      }
    });
    this.directionality.change.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    this.setupClickListener();
  }
  ngAfterViewInit() {
    if (this.nzAutoFocus) {
      this.focus();
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
    this.focusMonitor.stopMonitoring(this.elementRef);
  }
  setupClickListener() {
    this.ngZone.runOutsideAngular(() => {
      fromEvent(this.elementRef.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event) => {
        event.stopPropagation();
        event.preventDefault();
        if (this.nzDisabled || this.isChecked) {
          return;
        }
        this.ngZone.run(() => {
          this.focus();
          this.nzRadioService?.select(this.nzValue);
          if (this.isNgModel) {
            this.isChecked = true;
            this.onChange(true);
          }
          this.cdr.markForCheck();
        });
      });
    });
  }
};
_NzRadioComponent.\u0275fac = function NzRadioComponent_Factory(t) {
  return new (t || _NzRadioComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(NzRadioService, 8), \u0275\u0275directiveInject(NzFormStatusService, 8));
};
_NzRadioComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzRadioComponent,
  selectors: [["", "nz-radio", ""], ["", "nz-radio-button", ""]],
  viewQuery: function NzRadioComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c12, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inputElement = _t.first);
    }
  },
  hostVars: 18,
  hostBindings: function NzRadioComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-radio-wrapper-in-form-item", !!ctx.nzFormStatusService)("ant-radio-wrapper", !ctx.isRadioButton)("ant-radio-button-wrapper", ctx.isRadioButton)("ant-radio-wrapper-checked", ctx.isChecked && !ctx.isRadioButton)("ant-radio-button-wrapper-checked", ctx.isChecked && ctx.isRadioButton)("ant-radio-wrapper-disabled", ctx.nzDisabled && !ctx.isRadioButton)("ant-radio-button-wrapper-disabled", ctx.nzDisabled && ctx.isRadioButton)("ant-radio-wrapper-rtl", !ctx.isRadioButton && ctx.dir === "rtl")("ant-radio-button-wrapper-rtl", ctx.isRadioButton && ctx.dir === "rtl");
    }
  },
  inputs: {
    nzValue: "nzValue",
    nzDisabled: "nzDisabled",
    nzAutoFocus: "nzAutoFocus",
    isRadioButton: [InputFlags.HasDecoratorInputTransform, "nz-radio-button", "isRadioButton", booleanAttribute]
  },
  exportAs: ["nzRadio"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => _NzRadioComponent),
    multi: true
  }]), \u0275\u0275InputTransformsFeature, \u0275\u0275StandaloneFeature],
  attrs: _c22,
  ngContentSelectors: _c02,
  decls: 6,
  vars: 24,
  consts: [["inputElement", ""], ["type", "radio", 3, "disabled", "checked"]],
  template: function NzRadioComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "span");
      \u0275\u0275element(1, "input", 1, 0)(3, "span");
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(4, "span");
      \u0275\u0275projection(5);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275classProp("ant-radio", !ctx.isRadioButton)("ant-radio-checked", ctx.isChecked && !ctx.isRadioButton)("ant-radio-disabled", ctx.nzDisabled && !ctx.isRadioButton)("ant-radio-button", ctx.isRadioButton)("ant-radio-button-checked", ctx.isChecked && ctx.isRadioButton)("ant-radio-button-disabled", ctx.nzDisabled && ctx.isRadioButton);
      \u0275\u0275advance();
      \u0275\u0275classProp("ant-radio-input", !ctx.isRadioButton)("ant-radio-button-input", ctx.isRadioButton);
      \u0275\u0275property("disabled", ctx.nzDisabled)("checked", ctx.isChecked);
      \u0275\u0275attribute("autofocus", ctx.nzAutoFocus ? "autofocus" : null)("name", ctx.name);
      \u0275\u0275advance(2);
      \u0275\u0275classProp("ant-radio-inner", !ctx.isRadioButton)("ant-radio-button-inner", ctx.isRadioButton);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var NzRadioComponent = _NzRadioComponent;
__decorate([InputBoolean()], NzRadioComponent.prototype, "nzDisabled", void 0);
__decorate([InputBoolean()], NzRadioComponent.prototype, "nzAutoFocus", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioComponent, [{
    type: Component,
    args: [{
      selector: "[nz-radio],[nz-radio-button]",
      exportAs: "nzRadio",
      preserveWhitespaces: false,
      template: `
    <span
      [class.ant-radio]="!isRadioButton"
      [class.ant-radio-checked]="isChecked && !isRadioButton"
      [class.ant-radio-disabled]="nzDisabled && !isRadioButton"
      [class.ant-radio-button]="isRadioButton"
      [class.ant-radio-button-checked]="isChecked && isRadioButton"
      [class.ant-radio-button-disabled]="nzDisabled && isRadioButton"
    >
      <input
        #inputElement
        type="radio"
        [attr.autofocus]="nzAutoFocus ? 'autofocus' : null"
        [class.ant-radio-input]="!isRadioButton"
        [class.ant-radio-button-input]="isRadioButton"
        [disabled]="nzDisabled"
        [checked]="isChecked"
        [attr.name]="name"
      />
      <span [class.ant-radio-inner]="!isRadioButton" [class.ant-radio-button-inner]="isRadioButton"></span>
    </span>
    <span><ng-content></ng-content></span>
  `,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => NzRadioComponent),
        multi: true
      }],
      host: {
        "[class.ant-radio-wrapper-in-form-item]": "!!nzFormStatusService",
        "[class.ant-radio-wrapper]": "!isRadioButton",
        "[class.ant-radio-button-wrapper]": "isRadioButton",
        "[class.ant-radio-wrapper-checked]": "isChecked && !isRadioButton",
        "[class.ant-radio-button-wrapper-checked]": "isChecked && isRadioButton",
        "[class.ant-radio-wrapper-disabled]": "nzDisabled && !isRadioButton",
        "[class.ant-radio-button-wrapper-disabled]": "nzDisabled && isRadioButton",
        "[class.ant-radio-wrapper-rtl]": `!isRadioButton && dir === 'rtl'`,
        "[class.ant-radio-button-wrapper-rtl]": `isRadioButton && dir === 'rtl'`
      },
      standalone: true
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: FocusMonitor
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NzRadioService,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [NzRadioService]
    }]
  }, {
    type: NzFormStatusService,
    decorators: [{
      type: Optional
    }]
  }], {
    inputElement: [{
      type: ViewChild,
      args: ["inputElement", {
        static: true
      }]
    }],
    nzValue: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzAutoFocus: [{
      type: Input
    }],
    isRadioButton: [{
      type: Input,
      args: [{
        alias: "nz-radio-button",
        transform: booleanAttribute
      }]
    }]
  });
})();
var _NzRadioModule = class _NzRadioModule {
};
_NzRadioModule.\u0275fac = function NzRadioModule_Factory(t) {
  return new (t || _NzRadioModule)();
};
_NzRadioModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzRadioModule
});
_NzRadioModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var NzRadioModule = _NzRadioModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRadioModule, [{
    type: NgModule,
    args: [{
      imports: [NzRadioComponent, NzRadioGroupComponent],
      exports: [NzRadioComponent, NzRadioGroupComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-tag.mjs
var _c03 = ["*"];
function NzTagComponent_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 1);
    \u0275\u0275listener("click", function NzTagComponent_span_1_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.closeTag($event));
    });
    \u0275\u0275elementEnd();
  }
}
var _NzTagComponent = class _NzTagComponent {
  constructor(cdr, renderer, elementRef, directionality) {
    this.cdr = cdr;
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.directionality = directionality;
    this.isPresetColor = false;
    this.nzMode = "default";
    this.nzChecked = false;
    this.nzBordered = true;
    this.nzOnClose = new EventEmitter();
    this.nzCheckedChange = new EventEmitter();
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  updateCheckedStatus() {
    if (this.nzMode === "checkable") {
      this.nzChecked = !this.nzChecked;
      this.nzCheckedChange.emit(this.nzChecked);
    }
  }
  closeTag(e) {
    this.nzOnClose.emit(e);
    if (!e.defaultPrevented) {
      this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);
    }
  }
  clearPresetColor() {
    const hostElement = this.elementRef.nativeElement;
    const regexp = new RegExp(`(ant-tag-(?:${[...presetColors, ...statusColors].join("|")}))`, "g");
    const classname = hostElement.classList.toString();
    const matches = [];
    let match = regexp.exec(classname);
    while (match !== null) {
      matches.push(match[1]);
      match = regexp.exec(classname);
    }
    hostElement.classList.remove(...matches);
  }
  setPresetColor() {
    const hostElement = this.elementRef.nativeElement;
    this.clearPresetColor();
    if (!this.nzColor) {
      this.isPresetColor = false;
    } else {
      this.isPresetColor = isPresetColor(this.nzColor) || isStatusColor(this.nzColor);
    }
    if (this.isPresetColor) {
      hostElement.classList.add(`ant-tag-${this.nzColor}`);
    }
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnChanges(changes) {
    const {
      nzColor
    } = changes;
    if (nzColor) {
      this.setPresetColor();
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzTagComponent.\u0275fac = function NzTagComponent_Factory(t) {
  return new (t || _NzTagComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Directionality, 8));
};
_NzTagComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTagComponent,
  selectors: [["nz-tag"]],
  hostAttrs: [1, "ant-tag"],
  hostVars: 12,
  hostBindings: function NzTagComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function NzTagComponent_click_HostBindingHandler() {
        return ctx.updateCheckedStatus();
      });
    }
    if (rf & 2) {
      \u0275\u0275styleProp("background-color", ctx.isPresetColor ? "" : ctx.nzColor);
      \u0275\u0275classProp("ant-tag-has-color", ctx.nzColor && !ctx.isPresetColor)("ant-tag-checkable", ctx.nzMode === "checkable")("ant-tag-checkable-checked", ctx.nzChecked)("ant-tag-rtl", ctx.dir === "rtl")("ant-tag-borderless", !ctx.nzBordered);
    }
  },
  inputs: {
    nzMode: "nzMode",
    nzColor: "nzColor",
    nzChecked: "nzChecked",
    nzBordered: "nzBordered"
  },
  outputs: {
    nzOnClose: "nzOnClose",
    nzCheckedChange: "nzCheckedChange"
  },
  exportAs: ["nzTag"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c03,
  decls: 2,
  vars: 1,
  consts: [["nz-icon", "", "nzType", "close", "class", "ant-tag-close-icon", "tabindex", "-1", 3, "click", 4, "ngIf"], ["nz-icon", "", "nzType", "close", "tabindex", "-1", 1, "ant-tag-close-icon", 3, "click"]],
  template: function NzTagComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
      \u0275\u0275template(1, NzTagComponent_span_1_Template, 1, 0, "span", 0);
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.nzMode === "closeable");
    }
  },
  dependencies: [NzIconModule, NzIconDirective, NgIf],
  encapsulation: 2,
  changeDetection: 0
});
var NzTagComponent = _NzTagComponent;
__decorate([InputBoolean()], NzTagComponent.prototype, "nzChecked", void 0);
__decorate([InputBoolean()], NzTagComponent.prototype, "nzBordered", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTagComponent, [{
    type: Component,
    args: [{
      selector: "nz-tag",
      exportAs: "nzTag",
      preserveWhitespaces: false,
      template: `
    <ng-content></ng-content>
    <span
      nz-icon
      nzType="close"
      class="ant-tag-close-icon"
      *ngIf="nzMode === 'closeable'"
      tabindex="-1"
      (click)="closeTag($event)"
    ></span>
  `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      host: {
        class: "ant-tag",
        "[style.background-color]": `isPresetColor ? '' : nzColor`,
        "[class.ant-tag-has-color]": `nzColor && !isPresetColor`,
        "[class.ant-tag-checkable]": `nzMode === 'checkable'`,
        "[class.ant-tag-checkable-checked]": `nzChecked`,
        "[class.ant-tag-rtl]": `dir === 'rtl'`,
        "[class.ant-tag-borderless]": `!nzBordered`,
        "(click)": "updateCheckedStatus()"
      },
      imports: [NzIconModule, NgIf],
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzMode: [{
      type: Input
    }],
    nzColor: [{
      type: Input
    }],
    nzChecked: [{
      type: Input
    }],
    nzBordered: [{
      type: Input
    }],
    nzOnClose: [{
      type: Output
    }],
    nzCheckedChange: [{
      type: Output
    }]
  });
})();
var _NzTagModule = class _NzTagModule {
};
_NzTagModule.\u0275fac = function NzTagModule_Factory(t) {
  return new (t || _NzTagModule)();
};
_NzTagModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzTagModule
});
_NzTagModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzTagComponent]
});
var NzTagModule = _NzTagModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTagModule, [{
    type: NgModule,
    args: [{
      imports: [NzTagComponent],
      exports: [NzTagComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-experimental-image.mjs
var _c04 = ["imageRef"];
function isFixedSize(size) {
  return typeof size === "number" || /^(\d)+(px)?$/.test(size);
}
var defaultImageSrcLoader = ({
  src
}) => {
  return src;
};
var NZ_CONFIG_MODULE_NAME2 = "imageExperimental";
var sizeBreakpoints = [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840];
var _NzImageViewComponent = class _NzImageViewComponent {
  constructor(cdr, nzConfigService, imagePreloadService) {
    this.cdr = cdr;
    this.nzConfigService = nzConfigService;
    this.imagePreloadService = imagePreloadService;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME2;
    this.nzSrc = "";
    this.nzAlt = "";
    this.nzWidth = "auto";
    this.nzHeight = "auto";
    this.nzSrcLoader = defaultImageSrcLoader;
    this.nzAutoSrcset = false;
    this.nzPriority = false;
    this.nzFallback = null;
    this.nzPlaceholder = null;
    this.nzDisablePreview = false;
    this.src = "";
    this.width = "auto";
    this.height = "auto";
    this.srcset = "";
    this.destroy$ = new Subject();
    this.reloadDisposeHandler = () => void 0;
    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME2).pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.composeImageAttrs();
      this.cdr.markForCheck();
    });
  }
  ngOnInit() {
    if (this.nzPriority) {
      this.preload();
    }
  }
  ngOnChanges(changes) {
    const {
      nzLoader,
      nzSrc,
      nzOptimize
    } = changes;
    if (nzSrc || nzLoader || nzOptimize) {
      this.composeImageAttrs();
    }
  }
  ngOnDestroy() {
    this.reloadDisposeHandler();
    this.destroy$.next();
    this.destroy$.complete();
  }
  preload() {
    this.reloadDisposeHandler = this.imagePreloadService.addPreload({
      src: this.src,
      srcset: this.srcset
    });
  }
  optimizable() {
    if (this.nzAutoSrcset) {
      if (!isFixedSize(this.nzWidth) || !isFixedSize(this.nzHeight)) {
        warn2(`When using "nzAutoSrcset" you should use a fixed size width and height, for more information please refer to CLS (https://web.dev/cls/) performance metrics`);
        return false;
      }
      if (this.nzSrc.endsWith(".svg")) {
        warn2(`SVG does not need to be optimized`);
        return false;
      }
      if (this.nzSrc.startsWith("data:")) {
        warn2(`Data URLs cannot be optimized`);
        return false;
      }
      return true;
    }
    return false;
  }
  composeImageAttrs() {
    const loader = this.getLoader();
    if (!this.optimizable()) {
      this.src = loader({
        src: this.nzSrc
      });
      this.width = this.nzWidth;
      this.height = this.nzHeight;
      return;
    }
    this.width = typeof this.nzWidth === "number" ? this.nzWidth : parseInt(this.nzWidth, 10);
    this.height = typeof this.nzHeight === "number" ? this.nzHeight : parseInt(this.nzHeight, 10);
    const widths = this.convertWidths(this.width, sizeBreakpoints);
    this.src = loader({
      src: this.nzSrc,
      width: widths[0]
    });
    this.srcset = widths.map((w, i) => `${loader({
      src: this.nzSrc,
      width: w
    })} ${i + 1}x`).join(", ");
  }
  getLoader() {
    return this.nzSrcLoader || defaultImageSrcLoader;
  }
  convertWidths(width, optimizeSizes) {
    const allSizes = [...optimizeSizes].sort((a, b) => a - b);
    return [...new Set(
      // 2x scale is sufficient
      // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html
      [width, width * 2].map((w) => allSizes.find((p) => p >= w) || w)
    )];
  }
};
_NzImageViewComponent.\u0275fac = function NzImageViewComponent_Factory(t) {
  return new (t || _NzImageViewComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ImagePreloadService));
};
_NzImageViewComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzImageViewComponent,
  selectors: [["nz-image"]],
  viewQuery: function NzImageViewComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c04, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.imageRef = _t.first);
    }
  },
  inputs: {
    nzSrc: "nzSrc",
    nzAlt: "nzAlt",
    nzWidth: "nzWidth",
    nzHeight: "nzHeight",
    nzSrcLoader: "nzSrcLoader",
    nzAutoSrcset: "nzAutoSrcset",
    nzPriority: "nzPriority",
    nzFallback: "nzFallback",
    nzPlaceholder: "nzPlaceholder",
    nzDisablePreview: "nzDisablePreview"
  },
  exportAs: ["nzImage"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 9,
  consts: [["imageRef", ""], ["nz-image", "", 3, "nzSrc", "nzSrcset", "nzDisablePreview", "nzFallback", "nzPlaceholder"]],
  template: function NzImageViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275element(0, "img", 1, 0);
    }
    if (rf & 2) {
      \u0275\u0275property("nzSrc", ctx.src)("nzSrcset", ctx.srcset)("nzDisablePreview", ctx.nzDisablePreview)("nzFallback", ctx.nzFallback)("nzPlaceholder", ctx.nzPlaceholder);
      \u0275\u0275attribute("width", ctx.width)("height", ctx.height)("srcset", ctx.srcset)("alt", ctx.nzAlt || null);
    }
  },
  dependencies: [NzImageDirective],
  encapsulation: 2,
  changeDetection: 0
});
var NzImageViewComponent = _NzImageViewComponent;
__decorate([WithConfig()], NzImageViewComponent.prototype, "nzSrcLoader", void 0);
__decorate([InputBoolean(), WithConfig()], NzImageViewComponent.prototype, "nzAutoSrcset", void 0);
__decorate([InputBoolean()], NzImageViewComponent.prototype, "nzPriority", void 0);
__decorate([WithConfig()], NzImageViewComponent.prototype, "nzFallback", void 0);
__decorate([WithConfig()], NzImageViewComponent.prototype, "nzPlaceholder", void 0);
__decorate([InputBoolean(), WithConfig()], NzImageViewComponent.prototype, "nzDisablePreview", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImageViewComponent, [{
    type: Component,
    args: [{
      selector: "nz-image",
      exportAs: "nzImage",
      template: `
    <img
      #imageRef
      nz-image
      [nzSrc]="src"
      [nzSrcset]="srcset"
      [nzDisablePreview]="nzDisablePreview"
      [nzFallback]="nzFallback"
      [nzPlaceholder]="nzPlaceholder"
      [attr.width]="width"
      [attr.height]="height"
      [attr.srcset]="srcset"
      [attr.alt]="nzAlt || null"
    />
  `,
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      imports: [NzImageDirective],
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NzConfigService
  }, {
    type: ImagePreloadService
  }], {
    nzSrc: [{
      type: Input
    }],
    nzAlt: [{
      type: Input
    }],
    nzWidth: [{
      type: Input
    }],
    nzHeight: [{
      type: Input
    }],
    nzSrcLoader: [{
      type: Input
    }],
    nzAutoSrcset: [{
      type: Input
    }],
    nzPriority: [{
      type: Input
    }],
    nzFallback: [{
      type: Input
    }],
    nzPlaceholder: [{
      type: Input
    }],
    nzDisablePreview: [{
      type: Input
    }],
    imageRef: [{
      type: ViewChild,
      args: ["imageRef"]
    }]
  });
})();
var _NzImageModule2 = class _NzImageModule2 {
};
_NzImageModule2.\u0275fac = function NzImageModule_Factory(t) {
  return new (t || _NzImageModule2)();
};
_NzImageModule2.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzImageModule2
});
_NzImageModule2.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var NzImageModule2 = _NzImageModule2;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzImageModule2, [{
    type: NgModule,
    args: [{
      imports: [NzImageViewComponent],
      exports: [NzImageViewComponent]
    }]
  }], null, null);
})();

// node_modules/@delon/abc/fesm2022/cell.mjs
function CellComponent_ng_template_0_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 3);
    \u0275\u0275listener("ngModelChange", function CellComponent_ng_template_0_Case_0_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.change($event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzDisabled", ctx_r1.disabled)("ngModel", ctx_r1.value);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.safeOpt.checkbox == null ? null : ctx_r1.safeOpt.checkbox.label, " ");
  }
}
function CellComponent_ng_template_0_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 4);
    \u0275\u0275listener("ngModelChange", function CellComponent_ng_template_0_Case_1_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.change($event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzDisabled", ctx_r1.disabled)("ngModel", ctx_r1.value);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.safeOpt.radio == null ? null : ctx_r1.safeOpt.radio.label, " ");
  }
}
function CellComponent_ng_template_0_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 5);
    \u0275\u0275listener("click", function CellComponent_ng_template_0_Case_2_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1._link($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("innerHTML", ctx_r1._text, \u0275\u0275sanitizeHtml);
    \u0275\u0275attribute("target", ctx_r1.safeOpt.link == null ? null : ctx_r1.safeOpt.link.target)("title", ctx_r1.value);
  }
}
function CellComponent_ng_template_0_Case_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-tag", 6);
    \u0275\u0275element(1, "span", 7);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzColor", ctx_r1.res == null ? null : ctx_r1.res.result == null ? null : ctx_r1.res.result.color);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r1._text, \u0275\u0275sanitizeHtml);
  }
}
function CellComponent_ng_template_0_Case_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-badge", 8);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("nzText", ctx_r1._text);
    \u0275\u0275property("nzStatus", ctx_r1.res == null ? null : ctx_r1.res.result == null ? null : ctx_r1.res.result.color);
  }
}
function CellComponent_ng_template_0_Case_5_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function CellComponent_ng_template_0_Case_5_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_0_Case_5_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("data", ctx_r1.res);
  }
}
function CellComponent_ng_template_0_Case_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_0_Case_5_Conditional_0_Template, 1, 1, null, 9);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(0, ctx_r1.res ? 0 : -1);
  }
}
function CellComponent_ng_template_0_Case_6_For_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 11);
    \u0275\u0275listener("click", function CellComponent_ng_template_0_Case_6_For_1_Template_img_click_0_listener() {
      const i_r6 = \u0275\u0275restoreView(_r5).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r1._showImg(i_r6));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r6 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275classProp("point", ctx_r1.safeOpt.img == null ? null : ctx_r1.safeOpt.img.big);
    \u0275\u0275attribute("src", i_r6, \u0275\u0275sanitizeUrl)("height", ctx_r1.safeOpt.img == null ? null : ctx_r1.safeOpt.img.size)("width", ctx_r1.safeOpt.img == null ? null : ctx_r1.safeOpt.img.size);
  }
}
function CellComponent_ng_template_0_Case_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, CellComponent_ng_template_0_Case_6_For_1_Template, 1, 5, "img", 10, \u0275\u0275repeaterTrackByIndex);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275repeater(ctx_r1._text);
  }
}
function CellComponent_ng_template_0_Case_7_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 12);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("innerText", ctx_r1._text);
    \u0275\u0275attribute("title", ctx_r1.value);
  }
}
function CellComponent_ng_template_0_Case_7_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 7);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("innerHTML", ctx_r1._text, \u0275\u0275sanitizeHtml);
    \u0275\u0275attribute("title", ctx_r1.value);
  }
}
function CellComponent_ng_template_0_Case_7_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 13);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1._unit);
  }
}
function CellComponent_ng_template_0_Case_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_0_Case_7_Conditional_0_Template, 1, 2, "span", 12)(1, CellComponent_ng_template_0_Case_7_Conditional_1_Template, 1, 2)(2, CellComponent_ng_template_0_Case_7_Conditional_2_Template, 2, 1, "span", 13);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(0, ctx_r1.isText ? 0 : 1);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, ctx_r1._unit ? 2 : -1);
  }
}
function CellComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_0_Case_0_Template, 2, 3)(1, CellComponent_ng_template_0_Case_1_Template, 2, 3)(2, CellComponent_ng_template_0_Case_2_Template, 1, 3)(3, CellComponent_ng_template_0_Case_3_Template, 2, 2)(4, CellComponent_ng_template_0_Case_4_Template, 1, 2)(5, CellComponent_ng_template_0_Case_5_Template, 1, 1)(6, CellComponent_ng_template_0_Case_6_Template, 2, 0)(7, CellComponent_ng_template_0_Case_7_Template, 3, 2);
  }
  if (rf & 2) {
    let tmp_3_0;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, (tmp_3_0 = ctx_r1.safeOpt.type) === "checkbox" ? 0 : tmp_3_0 === "radio" ? 1 : tmp_3_0 === "link" ? 2 : tmp_3_0 === "tag" ? 3 : tmp_3_0 === "badge" ? 4 : tmp_3_0 === "widget" ? 5 : tmp_3_0 === "img" ? 6 : 7);
  }
}
function CellComponent_ng_template_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275textInterpolate1(" ", ctx_r1.safeOpt.default == null ? null : ctx_r1.safeOpt.default.text, " ");
  }
}
function CellComponent_ng_template_2_Conditional_1_Conditional_0_ng_template_1_Template(rf, ctx) {
}
function CellComponent_ng_template_2_Conditional_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 14);
    \u0275\u0275template(1, CellComponent_ng_template_2_Conditional_1_Conditional_0_ng_template_1_Template, 0, 0, "ng-template", 15);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    const text_r7 = \u0275\u0275reference(1);
    \u0275\u0275property("nz-tooltip", ctx_r1.safeOpt.tooltip);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", text_r7);
  }
}
function CellComponent_ng_template_2_Conditional_1_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function CellComponent_ng_template_2_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_2_Conditional_1_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 15);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(3);
    const text_r7 = \u0275\u0275reference(1);
    \u0275\u0275property("ngTemplateOutlet", text_r7);
  }
}
function CellComponent_ng_template_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_2_Conditional_1_Conditional_0_Template, 2, 2, "span", 14)(1, CellComponent_ng_template_2_Conditional_1_Conditional_1_Template, 1, 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(0, ctx_r1.safeOpt.tooltip ? 0 : 1);
  }
}
function CellComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_ng_template_2_Conditional_0_Template, 1, 1)(1, CellComponent_ng_template_2_Conditional_1_Template, 2, 1);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, ctx_r1.showDefault ? 0 : 1);
  }
}
function CellComponent_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 2);
  }
}
function CellComponent_Conditional_5_ng_template_0_Template(rf, ctx) {
}
function CellComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CellComponent_Conditional_5_ng_template_0_Template, 0, 0, "ng-template", 15);
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const textWrap_r8 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", textWrap_r8);
  }
}
var _CellService = class _CellService {
  constructor(configSrv) {
    this.nzI18n = inject(NzI18nService);
    this.currency = inject(CurrencyService);
    this.dom = inject(DomSanitizer);
    this.widgets = {
      date: {
        type: "fn",
        ref: (value, opt) => {
          return {
            text: formatDate(value, opt.date.format, this.nzI18n.getDateLocale())
          };
        }
      },
      mega: {
        type: "fn",
        ref: (value, opt) => {
          const res = this.currency.mega(value, opt.mega);
          return {
            text: res.value,
            unit: res.unitI18n
          };
        }
      },
      currency: {
        type: "fn",
        ref: (value, opt) => {
          return {
            text: this.currency.format(value, opt.currency)
          };
        }
      },
      cny: {
        type: "fn",
        ref: (value, opt) => {
          return {
            text: this.currency.cny(value, opt.cny)
          };
        }
      },
      boolean: {
        type: "fn",
        ref: (value, opt) => {
          return {
            text: this.dom.bypassSecurityTrustHtml(yn(value, opt.boolean))
          };
        }
      },
      img: {
        type: "fn",
        ref: (value) => {
          return {
            text: Array.isArray(value) ? value : [value]
          };
        }
      }
    };
    this.globalOptions = configSrv.merge("cell", {
      date: {
        format: "yyyy-MM-dd HH:mm:ss"
      },
      img: {
        size: 32
      },
      default: {
        text: "-"
      }
    });
  }
  registerWidget(key, widget) {
    this.widgets[key] = {
      type: "widget",
      ref: widget
    };
  }
  getWidget(key) {
    return this.widgets[key];
  }
  genType(value, options) {
    if (options.type != null)
      return options.type;
    const typeOf = typeof value;
    if (typeOf === "number" && /^[0-9]{13}$/g.test(value))
      return "date";
    if (value instanceof Date || options.date != null)
      return "date";
    if (options.widget != null)
      return "widget";
    else if (options.mega != null)
      return "mega";
    else if (options.currency != null)
      return "currency";
    else if (options.cny != null)
      return "cny";
    else if (options.img != null)
      return "img";
    else if (options.link != null)
      return "link";
    else if (options.html != null)
      return "html";
    else if (options.badge != null)
      return "badge";
    else if (options.tag != null)
      return "tag";
    else if (options.checkbox != null)
      return "checkbox";
    else if (options.radio != null)
      return "radio";
    else if (options.enum != null)
      return "enum";
    else if (typeOf === "number")
      return "number";
    else if (typeOf === "boolean" || options.boolean != null)
      return "boolean";
    else
      return "string";
  }
  fixOptions(options) {
    return deepMerge({}, this.globalOptions, options);
  }
  get(value, options) {
    const type = this.genType(value, __spreadValues({}, options));
    const opt = this.fixOptions(options);
    opt.type = type;
    const isSafeHtml = typeof value === "object" && typeof value?.getTypeName === "function" && value?.getTypeName() != null;
    let res = {
      result: typeof value === "object" && !isSafeHtml ? value : {
        text: value == null ? "" : isSafeHtml ? value : `${value}`
      },
      options: opt
    };
    const widget = this.widgets[type];
    if (widget?.type === "fn") {
      res.result = widget.ref(value, opt);
    }
    return (typeof value === "function" ? value(value, opt) : of(res.result)).pipe(map((text) => {
      res.result = text;
      let dictData;
      switch (type) {
        case "badge":
          dictData = (opt.badge?.data ?? {})[value];
          res.result = __spreadValues({
            color: "default"
          }, dictData);
          break;
        case "tag":
          dictData = (opt.tag?.data ?? {})[value];
          res.result = dictData;
          break;
        case "enum":
          res.result = {
            text: (opt.enum ?? {})[value]
          };
          break;
        case "html":
          res.safeHtml = opt.html?.safe;
          break;
        case "string":
          if (isSafeHtml)
            res.safeHtml = "safeHtml";
          break;
      }
      if ((type === "badge" || type === "tag") && dictData?.tooltip != null) {
        res.options.tooltip = dictData.tooltip;
      }
      if (opt.mask != null) {
        res.result.text = formatMask(res.result.text, opt.mask);
      }
      return res;
    }));
  }
};
_CellService.\u0275fac = function CellService_Factory(t) {
  return new (t || _CellService)(\u0275\u0275inject(AlainConfigService));
};
_CellService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _CellService,
  factory: _CellService.\u0275fac,
  providedIn: "root"
});
var CellService = _CellService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CellService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: AlainConfigService
  }], null);
})();
var _CellHostDirective = class _CellHostDirective {
  constructor() {
    this.srv = inject(CellService);
    this.vcr = inject(ViewContainerRef);
  }
  ngOnChanges() {
    const widget = this.data.options.widget;
    const componentType = this.srv.getWidget(widget.key)?.ref;
    if (componentType == null) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        warn(`cell: No widget for type "${widget.key}"`);
      }
      return;
    }
    this.vcr.clear();
    const componentRef = this.vcr.createComponent(componentType);
    componentRef.instance.data = this.data;
  }
};
_CellHostDirective.\u0275fac = function CellHostDirective_Factory(t) {
  return new (t || _CellHostDirective)();
};
_CellHostDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CellHostDirective,
  selectors: [["", "cell-widget-host", ""]],
  inputs: {
    data: "data"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var CellHostDirective = _CellHostDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CellHostDirective, [{
    type: Directive,
    args: [{
      selector: "[cell-widget-host]",
      standalone: true
    }]
  }], null, {
    data: [{
      type: Input
    }]
  });
})();
var _CellComponent = class _CellComponent {
  constructor() {
    this.srv = inject(CellService);
    this.router = inject(Router);
    this.cdr = inject(ChangeDetectorRef);
    this.renderer = inject(Renderer2);
    this.imgSrv = inject(NzImageService);
    this.win = inject(WINDOW);
    this.el = inject(ElementRef).nativeElement;
    this.showDefault = false;
    this.valueChange = new EventEmitter();
    this.loading = false;
    this.disabled = false;
  }
  get safeOpt() {
    return this.res?.options ?? {};
  }
  get isText() {
    return this.res?.safeHtml === "text";
  }
  updateValue() {
    this.destroy$?.unsubscribe();
    this.destroy$ = this.srv.get(this.value, this.options).subscribe((res) => {
      this.res = res;
      this.showDefault = this.value == this.safeOpt.default.condition;
      this._text = res.result?.text ?? "";
      this._unit = res.result?.unit ?? this.safeOpt?.unit;
      this.cdr.detectChanges();
      this.setClass();
    });
  }
  setClass() {
    const {
      el,
      renderer
    } = this;
    const {
      renderType,
      size,
      type
    } = this.safeOpt;
    updateHostClass(el, renderer, {
      [`cell`]: true,
      [`cell__${renderType}`]: renderType != null,
      [`cell__${size}`]: size != null,
      [`cell__has-unit`]: this._unit,
      [`cell__has-default`]: this.showDefault,
      [`cell__disabled`]: this.disabled
    });
    el.setAttribute("data-type", `${type}`);
  }
  ngOnChanges(changes) {
    if (Object.keys(changes).every((k) => ["loading", "disabled"].includes(k))) {
      this.setClass();
    } else {
      this.updateValue();
    }
  }
  change(value) {
    this.value = value;
    this.valueChange.emit(value);
  }
  _link(e) {
    e.preventDefault();
    e.stopPropagation();
    if (this.disabled)
      return;
    const link = this.safeOpt.link;
    const url = link?.url;
    if (url == null)
      return;
    if (/https?:\/\//g.test(url)) {
      this.win.open(url, link?.target);
    } else {
      this.router.navigateByUrl(url);
    }
  }
  _showImg(img) {
    const config = this.safeOpt.img;
    if (config == null || config.big == null)
      return;
    let idx = -1;
    const list = this._text.map((p, index) => {
      if (idx === -1 && p === img)
        idx = index;
      return typeof config.big === "function" ? config.big(p) : p;
    });
    this.imgSrv.preview(list.map((p) => ({
      src: p
    })), config.previewOptions).switchTo(idx);
  }
  ngOnDestroy() {
    this.destroy$?.unsubscribe();
  }
};
_CellComponent.\u0275fac = function CellComponent_Factory(t) {
  return new (t || _CellComponent)();
};
_CellComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _CellComponent,
  selectors: [["cell"], ["", "cell", ""]],
  inputs: {
    value: "value",
    options: "options",
    loading: [InputFlags.HasDecoratorInputTransform, "loading", "loading", booleanAttribute],
    disabled: [InputFlags.HasDecoratorInputTransform, "disabled", "disabled", booleanAttribute]
  },
  outputs: {
    valueChange: "valueChange"
  },
  exportAs: ["cell"],
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 6,
  vars: 1,
  consts: [["text", ""], ["textWrap", ""], ["nz-icon", "", "nzType", "loading"], ["nz-checkbox", "", 3, "ngModelChange", "nzDisabled", "ngModel"], ["nz-radio", "", 3, "ngModelChange", "nzDisabled", "ngModel"], [3, "click", "innerHTML"], [3, "nzColor"], [3, "innerHTML"], [3, "nzStatus", "nzText"], ["cell-widget-host", "", 3, "data"], [1, "img", 3, "point"], [1, "img", 3, "click"], [3, "innerText"], [1, "unit"], [3, "nz-tooltip"], [3, "ngTemplateOutlet"]],
  template: function CellComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, CellComponent_ng_template_0_Template, 8, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, CellComponent_ng_template_2_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(4, CellComponent_Conditional_4_Template, 1, 0, "span", 2)(5, CellComponent_Conditional_5_Template, 1, 1);
    }
    if (rf & 2) {
      \u0275\u0275advance(4);
      \u0275\u0275conditional(4, ctx.loading ? 4 : 5);
    }
  },
  dependencies: [FormsModule, NgControlStatus, NgModel, NgTemplateOutlet, NzCheckboxComponent, NzRadioComponent, NzIconDirective, NzTagComponent, NzBadgeComponent, NzTooltipDirective, NzImageModule, CellHostDirective],
  encapsulation: 2,
  changeDetection: 0
});
var CellComponent = _CellComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CellComponent, [{
    type: Component,
    args: [{
      selector: "cell, [cell]",
      template: `
    <ng-template #text>
      @switch (safeOpt.type) {
        @case ('checkbox') {
          <label nz-checkbox [nzDisabled]="disabled" [ngModel]="value" (ngModelChange)="change($event)">
            {{ safeOpt.checkbox?.label }}
          </label>
        }
        @case ('radio') {
          <label nz-radio [nzDisabled]="disabled" [ngModel]="value" (ngModelChange)="change($event)">
            {{ safeOpt.radio?.label }}
          </label>
        }
        @case ('link') {
          <a (click)="_link($event)" [attr.target]="safeOpt.link?.target" [attr.title]="value" [innerHTML]="_text"></a>
        }
        @case ('tag') {
          <nz-tag [nzColor]="res?.result?.color">
            <span [innerHTML]="_text"></span>
          </nz-tag>
        }
        @case ('badge') {
          <nz-badge [nzStatus]="res?.result?.color" nzText="{{ _text }}" />
        }
        @case ('widget') {
          @if (res) {
            <ng-template cell-widget-host [data]="res" />
          }
        }
        @case ('img') {
          @for (i of $any(_text); track $index) {
            <img
              [attr.src]="i"
              [attr.height]="safeOpt.img?.size"
              [attr.width]="safeOpt.img?.size"
              (click)="_showImg(i)"
              class="img"
              [class.point]="safeOpt.img?.big"
            />
          }
        }
        @default {
          @if (isText) {
            <span [innerText]="_text" [attr.title]="value"></span>
          } @else {
            <span [innerHTML]="_text" [attr.title]="value"></span>
          }
          @if (_unit) {
            <span class="unit">{{ _unit }}</span>
          }
        }
      }
    </ng-template>
    <ng-template #textWrap>
      @if (showDefault) {
        {{ safeOpt.default?.text }}
      } @else {
        @if (safeOpt.tooltip) {
          <span [nz-tooltip]="safeOpt.tooltip">
            <ng-template [ngTemplateOutlet]="text" />
          </span>
        } @else {
          <ng-template [ngTemplateOutlet]="text" />
        }
      }
    </ng-template>
    @if (loading) {
      <span nz-icon nzType="loading"></span>
    } @else {
      <ng-template [ngTemplateOutlet]="textWrap" />
    }
  `,
      exportAs: "cell",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [FormsModule, NgTemplateOutlet, NzCheckboxComponent, NzRadioComponent, NzIconDirective, NzTagComponent, NzBadgeComponent, NzTooltipDirective, NzImageModule, CellHostDirective]
    }]
  }], null, {
    value: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    options: [{
      type: Input
    }],
    loading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var COMPS = [CellComponent];
var _CellModule = class _CellModule {
};
_CellModule.\u0275fac = function CellModule_Factory(t) {
  return new (t || _CellModule)();
};
_CellModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _CellModule
});
_CellModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [CommonModule, FormsModule, NzCheckboxModule, NzRadioModule, NzBadgeModule, NzTagModule, NzToolTipModule, NzIconModule, NzImageModule2, COMPS]
});
var CellModule = _CellModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CellModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, NzCheckboxModule, NzRadioModule, NzBadgeModule, NzTagModule, NzToolTipModule, NzIconModule, NzImageModule2, ...COMPS, CellHostDirective],
      exports: COMPS
    }]
  }], null, null);
})();
function provideCellWidgets(...widgets) {
  return makeEnvironmentProviders([{
    provide: ENVIRONMENT_INITIALIZER,
    multi: true,
    useValue: () => {
      const srv = inject(CellService);
      widgets.forEach((widget) => srv.registerWidget(widget.KEY, widget.type));
    }
  }]);
}

// node_modules/isutf8/dist/index.esm.js
function isUtf8(buf) {
  if (!buf) {
    return false;
  }
  var i = 0;
  var len = buf.length;
  while (i < len) {
    if (buf[i] <= 127) {
      i++;
      continue;
    }
    if (buf[i] >= 194 && buf[i] <= 223) {
      if (buf[i + 1] >> 6 === 2) {
        i += 2;
        continue;
      } else {
        return false;
      }
    }
    if ((buf[i] === 224 && buf[i + 1] >= 160 && buf[i + 1] <= 191 || buf[i] === 237 && buf[i + 1] >= 128 && buf[i + 1] <= 159) && buf[i + 2] >> 6 === 2) {
      i += 3;
      continue;
    }
    if ((buf[i] >= 225 && buf[i] <= 236 || buf[i] >= 238 && buf[i] <= 239) && buf[i + 1] >> 6 === 2 && buf[i + 2] >> 6 === 2) {
      i += 3;
      continue;
    }
    if ((buf[i] === 240 && buf[i + 1] >= 144 && buf[i + 1] <= 191 || buf[i] >= 241 && buf[i] <= 243 && buf[i + 1] >> 6 === 2 || buf[i] === 244 && buf[i + 1] >= 128 && buf[i + 1] <= 143) && buf[i + 2] >> 6 === 2 && buf[i + 3] >> 6 === 2) {
      i += 4;
      continue;
    }
    return false;
  }
  return true;
}

// node_modules/@delon/abc/fesm2022/xlsx.mjs
var _XlsxService = class _XlsxService {
  constructor(configSrv) {
    this.http = inject(HttpClient);
    this.lazy = inject(LazyService);
    this.ngZone = inject(NgZone);
    this.cog = configSrv.merge("xlsx", {
      url: "https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js",
      modules: [`https://cdn.jsdelivr.net/npm/xlsx/dist/cpexcel.js`]
    });
  }
  init() {
    return typeof XLSX !== "undefined" ? Promise.resolve([]) : this.lazy.load([this.cog.url].concat(this.cog.modules));
  }
  read(data) {
    const {
      read,
      utils: {
        sheet_to_json
      }
    } = XLSX;
    const ret = {};
    const buf = new Uint8Array(data);
    let type = "array";
    if (!isUtf8(buf)) {
      try {
        data = cptable.utils.decode(936, buf);
        type = "string";
      } catch {
      }
    }
    const wb = read(data, {
      type
    });
    wb.SheetNames.forEach((name) => {
      const sheet = wb.Sheets[name];
      ret[name] = sheet_to_json(sheet, {
        header: 1
      });
    });
    return ret;
  }
  /**
   * 导入Excel并输出JSON，支持 `<input type="file">`、URL 形式
   */
  import(fileOrUrl) {
    return new Promise((resolve, reject) => {
      const r = (data) => this.ngZone.run(() => resolve(this.read(data)));
      this.init().then(() => {
        if (typeof fileOrUrl === "string") {
          this.http.request("GET", fileOrUrl, {
            responseType: "arraybuffer"
          }).subscribe({
            next: (res) => r(new Uint8Array(res)),
            error: (err) => reject(err)
          });
          return;
        }
        const reader = new FileReader();
        reader.onload = (e) => r(e.target.result);
        reader.onerror = (e) => reject(e);
        reader.readAsArrayBuffer(fileOrUrl);
      }).catch(() => reject(`Unable to load xlsx.js`));
    });
  }
  export(options) {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        this.init().then(() => {
          options = __spreadValues({
            format: "xlsx"
          }, options);
          const {
            writeFile,
            utils: {
              book_new,
              aoa_to_sheet,
              book_append_sheet
            }
          } = XLSX;
          const wb = book_new();
          if (Array.isArray(options.sheets)) {
            options.sheets.forEach((value, index) => {
              const ws = aoa_to_sheet(value.data);
              book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);
            });
          } else {
            wb.SheetNames = Object.keys(options.sheets);
            wb.Sheets = options.sheets;
          }
          if (options.callback)
            options.callback(wb);
          const filename = options.filename || `export.${options.format}`;
          writeFile(wb, filename, __spreadValues({
            bookType: options.format,
            bookSST: false,
            type: "array"
          }, options.opts));
          resolve({
            filename,
            wb
          });
        }).catch((err) => reject(err));
      });
    });
  }
  /**
   * 数据转符号名
   * - `1` => `A`
   * - `27` => `AA`
   * - `703` => `AAA`
   */
  numberToSchema(val) {
    const startCode = "A".charCodeAt(0);
    let res = "";
    do {
      --val;
      res = String.fromCharCode(startCode + val % 26) + res;
      val = val / 26 >> 0;
    } while (val > 0);
    return res;
  }
};
_XlsxService.\u0275fac = function XlsxService_Factory(t) {
  return new (t || _XlsxService)(\u0275\u0275inject(AlainConfigService));
};
_XlsxService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _XlsxService,
  factory: _XlsxService.\u0275fac,
  providedIn: "root"
});
var XlsxService = _XlsxService;
__decorate([ZoneOutside()], XlsxService.prototype, "read", null);
__decorate([ZoneOutside()], XlsxService.prototype, "export", null);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(XlsxService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: AlainConfigService
  }], {
    read: [],
    export: []
  });
})();
var _XlsxDirective = class _XlsxDirective {
  constructor() {
    this.srv = inject(XlsxService);
  }
  _click() {
    this.srv.export(this.data);
  }
};
_XlsxDirective.\u0275fac = function XlsxDirective_Factory(t) {
  return new (t || _XlsxDirective)();
};
_XlsxDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _XlsxDirective,
  selectors: [["", "xlsx", ""]],
  hostBindings: function XlsxDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function XlsxDirective_click_HostBindingHandler() {
        return ctx._click();
      });
    }
  },
  inputs: {
    data: [InputFlags.None, "xlsx", "data"]
  },
  exportAs: ["xlsx"],
  standalone: true
});
var XlsxDirective = _XlsxDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(XlsxDirective, [{
    type: Directive,
    args: [{
      selector: "[xlsx]",
      exportAs: "xlsx",
      host: {
        "(click)": "_click()"
      },
      standalone: true
    }]
  }], null, {
    data: [{
      type: Input,
      args: ["xlsx"]
    }]
  });
})();
var COMPONENTS = [XlsxDirective];
var _XlsxModule = class _XlsxModule {
};
_XlsxModule.\u0275fac = function XlsxModule_Factory(t) {
  return new (t || _XlsxModule)();
};
_XlsxModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _XlsxModule
});
_XlsxModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var XlsxModule = _XlsxModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(XlsxModule, [{
    type: NgModule,
    args: [{
      imports: [COMPONENTS],
      exports: COMPONENTS
    }]
  }], null, null);
})();

// node_modules/@delon/abc/fesm2022/let.mjs
var LetContext = class {
  constructor(dir) {
    this.dir = dir;
  }
  get $implicit() {
    return this.dir.let;
  }
  get let() {
    return this.dir.let;
  }
};
var _LetDirective = class _LetDirective {
  constructor(vc, ref) {
    vc.createEmbeddedView(ref, new LetContext(this));
  }
  static ngTemplateContextGuard(_dir, _ctx) {
    return true;
  }
};
_LetDirective.\u0275fac = function LetDirective_Factory(t) {
  return new (t || _LetDirective)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef));
};
_LetDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _LetDirective,
  selectors: [["", "let", ""]],
  inputs: {
    let: "let"
  },
  standalone: true
});
var LetDirective = _LetDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LetDirective, [{
    type: Directive,
    args: [{
      selector: "[let]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef,
    decorators: [{
      type: Inject,
      args: [ViewContainerRef]
    }]
  }, {
    type: TemplateRef,
    decorators: [{
      type: Inject,
      args: [TemplateRef]
    }]
  }], {
    let: [{
      type: Input,
      args: [{
        required: true
      }]
    }]
  });
})();
var DIRECTIVES = [LetDirective];
var _LetModule = class _LetModule {
};
_LetModule.\u0275fac = function LetModule_Factory(t) {
  return new (t || _LetModule)();
};
_LetModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _LetModule
});
_LetModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var LetModule = _LetModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LetModule, [{
    type: NgModule,
    args: [{
      imports: DIRECTIVES,
      exports: DIRECTIVES
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-pagination.mjs
var _c05 = ["nz-pagination-item", ""];
var _c13 = (a0, a1) => ({
  $implicit: a0,
  page: a1
});
function NzPaginationItemComponent_ng_template_0_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const page_r1 = \u0275\u0275nextContext().page;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(page_r1);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 4);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "button", 2);
    \u0275\u0275template(1, NzPaginationItemComponent_ng_template_0_Case_1_Conditional_1_Template, 1, 0, "span", 3)(2, NzPaginationItemComponent_ng_template_0_Case_1_Conditional_2_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("disabled", ctx_r1.disabled);
    \u0275\u0275attribute("title", ctx_r1.locale.prev_page);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r1.direction === "rtl" ? 1 : 2);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 4);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 3);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "button", 2);
    \u0275\u0275template(1, NzPaginationItemComponent_ng_template_0_Case_2_Conditional_1_Template, 1, 0, "span", 4)(2, NzPaginationItemComponent_ng_template_0_Case_2_Conditional_2_Template, 1, 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("disabled", ctx_r1.disabled);
    \u0275\u0275attribute("title", ctx_r1.locale.next_page);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r1.direction === "rtl" ? 1 : 2);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Case_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 8);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Case_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 9);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzPaginationItemComponent_ng_template_0_Case_3_Case_2_Conditional_0_Template, 1, 0, "span", 8)(1, NzPaginationItemComponent_ng_template_0_Case_3_Case_2_Conditional_1_Template, 1, 0);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275conditional(0, ctx_r1.direction === "rtl" ? 0 : 1);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Case_3_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 9);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Case_3_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 8);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Case_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzPaginationItemComponent_ng_template_0_Case_3_Case_3_Conditional_0_Template, 1, 0, "span", 9)(1, NzPaginationItemComponent_ng_template_0_Case_3_Case_3_Conditional_1_Template, 1, 0);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275conditional(0, ctx_r1.direction === "rtl" ? 0 : 1);
  }
}
function NzPaginationItemComponent_ng_template_0_Case_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 5)(1, "div", 6);
    \u0275\u0275template(2, NzPaginationItemComponent_ng_template_0_Case_3_Case_2_Template, 2, 1)(3, NzPaginationItemComponent_ng_template_0_Case_3_Case_3_Template, 2, 1);
    \u0275\u0275elementStart(4, "span", 7);
    \u0275\u0275text(5, "\u2022\u2022\u2022");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    let tmp_5_0;
    const type_r3 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, (tmp_5_0 = type_r3) === "prev_5" ? 2 : tmp_5_0 === "next_5" ? 3 : -1);
  }
}
function NzPaginationItemComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzPaginationItemComponent_ng_template_0_Case_0_Template, 2, 1)(1, NzPaginationItemComponent_ng_template_0_Case_1_Template, 3, 3)(2, NzPaginationItemComponent_ng_template_0_Case_2_Template, 3, 3)(3, NzPaginationItemComponent_ng_template_0_Case_3_Template, 6, 1);
  }
  if (rf & 2) {
    let tmp_4_0;
    const type_r3 = ctx.$implicit;
    \u0275\u0275conditional(0, (tmp_4_0 = type_r3) === "page" ? 0 : tmp_4_0 === "prev" ? 1 : tmp_4_0 === "next" ? 2 : 3);
  }
}
function NzPaginationItemComponent_ng_template_2_Template(rf, ctx) {
}
var _c23 = ["nz-pagination-options", ""];
var _forTrack0 = ($index, $item) => $item.value;
function NzPaginationOptionsComponent_Conditional_0_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-option", 3);
  }
  if (rf & 2) {
    const option_r3 = ctx.$implicit;
    \u0275\u0275property("nzLabel", option_r3.label)("nzValue", option_r3.value);
  }
}
function NzPaginationOptionsComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-select", 2);
    \u0275\u0275listener("ngModelChange", function NzPaginationOptionsComponent_Conditional_0_Template_nz_select_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onPageSizeChange($event));
    });
    \u0275\u0275repeaterCreate(1, NzPaginationOptionsComponent_Conditional_0_For_2_Template, 1, 2, "nz-option", 3, _forTrack0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzDisabled", ctx_r1.disabled)("nzSize", ctx_r1.nzSize)("ngModel", ctx_r1.pageSize);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.listOfPageSizeOption);
  }
}
function NzPaginationOptionsComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 1);
    \u0275\u0275text(1);
    \u0275\u0275elementStart(2, "input", 4);
    \u0275\u0275listener("keydown.enter", function NzPaginationOptionsComponent_Conditional_1_Template_input_keydown_enter_2_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.jumpToPageViaInput($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.locale.jump_to, " ");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r1.disabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.locale.page, " ");
  }
}
var _c3 = ["containerTemplate"];
function _forTrack1($index, $item) {
  return this.trackByPageItem;
}
var _c4 = (a0, a1) => ({
  $implicit: a0,
  range: a1
});
function NzPaginationDefaultComponent_ng_template_0_Conditional_1_ng_template_1_Template(rf, ctx) {
}
function NzPaginationDefaultComponent_ng_template_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "li", 1);
    \u0275\u0275template(1, NzPaginationDefaultComponent_ng_template_0_Conditional_1_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.showTotal)("ngTemplateOutletContext", \u0275\u0275pureFunction2(2, _c4, ctx_r0.total, ctx_r0.ranges));
  }
}
function NzPaginationDefaultComponent_ng_template_0_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 5);
    \u0275\u0275listener("gotoIndex", function NzPaginationDefaultComponent_ng_template_0_For_3_Template_li_gotoIndex_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.jumpPage($event));
    })("diffIndex", function NzPaginationDefaultComponent_ng_template_0_For_3_Template_li_diffIndex_0_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.jumpDiff($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const page_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("locale", ctx_r0.locale)("type", page_r3.type)("index", page_r3.index)("disabled", !!page_r3.disabled)("itemRender", ctx_r0.itemRender)("active", ctx_r0.pageIndex === page_r3.index)("direction", ctx_r0.dir);
  }
}
function NzPaginationDefaultComponent_ng_template_0_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 6);
    \u0275\u0275listener("pageIndexChange", function NzPaginationDefaultComponent_ng_template_0_Conditional_4_Template_li_pageIndexChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onPageIndexChange($event));
    })("pageSizeChange", function NzPaginationDefaultComponent_ng_template_0_Conditional_4_Template_li_pageSizeChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onPageSizeChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("total", ctx_r0.total)("locale", ctx_r0.locale)("disabled", ctx_r0.disabled)("nzSize", ctx_r0.nzSize)("showSizeChanger", ctx_r0.showSizeChanger)("showQuickJumper", ctx_r0.showQuickJumper)("pageIndex", ctx_r0.pageIndex)("pageSize", ctx_r0.pageSize)("pageSizeOptions", ctx_r0.pageSizeOptions);
  }
}
function NzPaginationDefaultComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul");
    \u0275\u0275template(1, NzPaginationDefaultComponent_ng_template_0_Conditional_1_Template, 2, 5, "li", 1);
    \u0275\u0275repeaterCreate(2, NzPaginationDefaultComponent_ng_template_0_For_3_Template, 1, 7, "li", 2, _forTrack1, true);
    \u0275\u0275template(4, NzPaginationDefaultComponent_ng_template_0_Conditional_4_Template, 1, 9, "li", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r0.showTotal ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r0.listOfPageItem);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(4, ctx_r0.showQuickJumper || ctx_r0.showSizeChanger ? 4 : -1);
  }
}
function NzPaginationSimpleComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "ul")(1, "li", 1);
    \u0275\u0275listener("click", function NzPaginationSimpleComponent_ng_template_0_Template_li_click_1_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.prePage());
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "li", 2)(3, "input", 3);
    \u0275\u0275listener("keydown.enter", function NzPaginationSimpleComponent_ng_template_0_Template_input_keydown_enter_3_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.jumpToPageViaInput($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "span", 4);
    \u0275\u0275text(5, "/");
    \u0275\u0275elementEnd();
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "li", 5);
    \u0275\u0275listener("click", function NzPaginationSimpleComponent_ng_template_0_Template_li_click_7_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.nextPage());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("locale", ctx_r1.locale)("disabled", ctx_r1.isFirstIndex)("direction", ctx_r1.dir)("itemRender", ctx_r1.itemRender);
    \u0275\u0275attribute("title", ctx_r1.locale.prev_page);
    \u0275\u0275advance();
    \u0275\u0275attribute("title", ctx_r1.pageIndex + "/" + ctx_r1.lastIndex);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r1.disabled)("value", ctx_r1.pageIndex);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate1(" ", ctx_r1.lastIndex, " ");
    \u0275\u0275advance();
    \u0275\u0275property("locale", ctx_r1.locale)("disabled", ctx_r1.isLastIndex)("direction", ctx_r1.dir)("itemRender", ctx_r1.itemRender);
    \u0275\u0275attribute("title", ctx_r1.locale == null ? null : ctx_r1.locale.next_page);
  }
}
function NzPaginationComponent_Conditional_0_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function NzPaginationComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzPaginationComponent_Conditional_0_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const simplePagination_r2 = \u0275\u0275reference(2);
    \u0275\u0275property("ngTemplateOutlet", simplePagination_r2.template);
  }
}
function NzPaginationComponent_Conditional_0_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function NzPaginationComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzPaginationComponent_Conditional_0_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const defaultPagination_r3 = \u0275\u0275reference(4);
    \u0275\u0275property("ngTemplateOutlet", defaultPagination_r3.template);
  }
}
function NzPaginationComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzPaginationComponent_Conditional_0_Conditional_0_Template, 1, 1, null, 4)(1, NzPaginationComponent_Conditional_0_Conditional_1_Template, 1, 1);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, ctx_r3.nzSimple ? 0 : 1);
  }
}
var _NzPaginationItemComponent = class _NzPaginationItemComponent {
  constructor() {
    this.active = false;
    this.index = null;
    this.disabled = false;
    this.direction = "ltr";
    this.type = null;
    this.itemRender = null;
    this.diffIndex = new EventEmitter();
    this.gotoIndex = new EventEmitter();
    this.title = null;
  }
  clickItem() {
    if (!this.disabled) {
      if (this.type === "page") {
        this.gotoIndex.emit(this.index);
      } else {
        this.diffIndex.emit({
          next: 1,
          prev: -1,
          prev_5: -5,
          next_5: 5
        }[this.type]);
      }
    }
  }
  ngOnChanges(changes) {
    const {
      locale,
      index,
      type
    } = changes;
    if (locale || index || type) {
      this.title = {
        page: `${this.index}`,
        next: this.locale?.next_page,
        prev: this.locale?.prev_page,
        prev_5: this.locale?.prev_5,
        next_5: this.locale?.next_5
      }[this.type];
    }
  }
};
_NzPaginationItemComponent.\u0275fac = function NzPaginationItemComponent_Factory(t) {
  return new (t || _NzPaginationItemComponent)();
};
_NzPaginationItemComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzPaginationItemComponent,
  selectors: [["li", "nz-pagination-item", ""]],
  hostVars: 19,
  hostBindings: function NzPaginationItemComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function NzPaginationItemComponent_click_HostBindingHandler() {
        return ctx.clickItem();
      });
    }
    if (rf & 2) {
      \u0275\u0275attribute("title", ctx.title);
      \u0275\u0275classProp("ant-pagination-prev", ctx.type === "prev")("ant-pagination-next", ctx.type === "next")("ant-pagination-item", ctx.type === "page")("ant-pagination-jump-prev", ctx.type === "prev_5")("ant-pagination-jump-prev-custom-icon", ctx.type === "prev_5")("ant-pagination-jump-next", ctx.type === "next_5")("ant-pagination-jump-next-custom-icon", ctx.type === "next_5")("ant-pagination-disabled", ctx.disabled)("ant-pagination-item-active", ctx.active);
    }
  },
  inputs: {
    active: "active",
    locale: "locale",
    index: "index",
    disabled: "disabled",
    direction: "direction",
    type: "type",
    itemRender: "itemRender"
  },
  outputs: {
    diffIndex: "diffIndex",
    gotoIndex: "gotoIndex"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  attrs: _c05,
  decls: 3,
  vars: 5,
  consts: [["renderItemTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["type", "button", 1, "ant-pagination-item-link", 3, "disabled"], ["nz-icon", "", "nzType", "right"], ["nz-icon", "", "nzType", "left"], [1, "ant-pagination-item-link"], [1, "ant-pagination-item-container"], [1, "ant-pagination-item-ellipsis"], ["nz-icon", "", "nzType", "double-right", 1, "ant-pagination-item-link-icon"], ["nz-icon", "", "nzType", "double-left", 1, "ant-pagination-item-link-icon"]],
  template: function NzPaginationItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzPaginationItemComponent_ng_template_0_Template, 4, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, NzPaginationItemComponent_ng_template_2_Template, 0, 0, "ng-template", 1);
    }
    if (rf & 2) {
      const renderItemTemplate_r4 = \u0275\u0275reference(1);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngTemplateOutlet", ctx.itemRender || renderItemTemplate_r4)("ngTemplateOutletContext", \u0275\u0275pureFunction2(2, _c13, ctx.type, ctx.index));
    }
  },
  dependencies: [NzIconModule, NzIconDirective, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var NzPaginationItemComponent = _NzPaginationItemComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPaginationItemComponent, [{
    type: Component,
    args: [{
      selector: "li[nz-pagination-item]",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-template #renderItemTemplate let-type let-page="page">
      @switch (type) {
        @case ('page') {
          <a>{{ page }}</a>
        }
        @case ('prev') {
          <button type="button" [disabled]="disabled" [attr.title]="locale.prev_page" class="ant-pagination-item-link">
            @if (direction === 'rtl') {
              <span nz-icon nzType="right"></span>
            } @else {
              <span nz-icon nzType="left"></span>
            }
          </button>
        }
        @case ('next') {
          <button type="button" [disabled]="disabled" [attr.title]="locale.next_page" class="ant-pagination-item-link">
            @if (direction === 'rtl') {
              <span nz-icon nzType="left"></span>
            } @else {
              <span nz-icon nzType="right"></span>
            }
          </button>
        }
        @default {
          <a class="ant-pagination-item-link">
            <div class="ant-pagination-item-container">
              @switch (type) {
                @case ('prev_5') {
                  @if (direction === 'rtl') {
                    <span
                      nz-icon
                      nzType="double-right"
                      class="ant-pagination-item-link-icon"
                    ></span>
                  } @else {
                    <span nz-icon nzType="double-left" class="ant-pagination-item-link-icon"></span>
                  }
                }
                @case ('next_5') {
                  @if (direction === 'rtl') {
                    <span nz-icon nzType="double-left"
                          class="ant-pagination-item-link-icon"></span>
                  } @else {
                    <span nz-icon nzType="double-right" class="ant-pagination-item-link-icon"></span>
                  }
                }
              }
              <span class="ant-pagination-item-ellipsis">\u2022\u2022\u2022</span>
            </div>
          </a>
        }
      }
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="itemRender || renderItemTemplate"
      [ngTemplateOutletContext]="{ $implicit: type, page: index }"
    />
  `,
      host: {
        "[class.ant-pagination-prev]": `type === 'prev'`,
        "[class.ant-pagination-next]": `type === 'next'`,
        "[class.ant-pagination-item]": `type === 'page'`,
        "[class.ant-pagination-jump-prev]": `type === 'prev_5'`,
        "[class.ant-pagination-jump-prev-custom-icon]": `type === 'prev_5'`,
        "[class.ant-pagination-jump-next]": `type === 'next_5'`,
        "[class.ant-pagination-jump-next-custom-icon]": `type === 'next_5'`,
        "[class.ant-pagination-disabled]": "disabled",
        "[class.ant-pagination-item-active]": "active",
        "[attr.title]": "title",
        "(click)": "clickItem()"
      },
      imports: [NzIconModule, NgTemplateOutlet],
      standalone: true
    }]
  }], null, {
    active: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    index: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    direction: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    itemRender: [{
      type: Input
    }],
    diffIndex: [{
      type: Output
    }],
    gotoIndex: [{
      type: Output
    }]
  });
})();
var _NzPaginationOptionsComponent = class _NzPaginationOptionsComponent {
  constructor() {
    this.nzSize = "default";
    this.disabled = false;
    this.showSizeChanger = false;
    this.showQuickJumper = false;
    this.total = 0;
    this.pageIndex = 1;
    this.pageSize = 10;
    this.pageSizeOptions = [];
    this.pageIndexChange = new EventEmitter();
    this.pageSizeChange = new EventEmitter();
    this.listOfPageSizeOption = [];
  }
  onPageSizeChange(size) {
    if (this.pageSize !== size) {
      this.pageSizeChange.next(size);
    }
  }
  jumpToPageViaInput($event) {
    const target = $event.target;
    const index = Math.floor(toNumber(target.value, this.pageIndex));
    this.pageIndexChange.next(index);
    target.value = "";
  }
  ngOnChanges(changes) {
    const {
      pageSize,
      pageSizeOptions,
      locale
    } = changes;
    if (pageSize || pageSizeOptions || locale) {
      this.listOfPageSizeOption = [.../* @__PURE__ */ new Set([...this.pageSizeOptions, this.pageSize])].map((item) => ({
        value: item,
        label: `${item} ${this.locale.items_per_page}`
      }));
    }
  }
};
_NzPaginationOptionsComponent.\u0275fac = function NzPaginationOptionsComponent_Factory(t) {
  return new (t || _NzPaginationOptionsComponent)();
};
_NzPaginationOptionsComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzPaginationOptionsComponent,
  selectors: [["li", "nz-pagination-options", ""]],
  hostAttrs: [1, "ant-pagination-options"],
  inputs: {
    nzSize: "nzSize",
    disabled: "disabled",
    showSizeChanger: "showSizeChanger",
    showQuickJumper: "showQuickJumper",
    locale: "locale",
    total: "total",
    pageIndex: "pageIndex",
    pageSize: "pageSize",
    pageSizeOptions: "pageSizeOptions"
  },
  outputs: {
    pageIndexChange: "pageIndexChange",
    pageSizeChange: "pageSizeChange"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  attrs: _c23,
  decls: 2,
  vars: 2,
  consts: [[1, "ant-pagination-options-size-changer", 3, "nzDisabled", "nzSize", "ngModel"], [1, "ant-pagination-options-quick-jumper"], [1, "ant-pagination-options-size-changer", 3, "ngModelChange", "nzDisabled", "nzSize", "ngModel"], [3, "nzLabel", "nzValue"], [3, "keydown.enter", "disabled"]],
  template: function NzPaginationOptionsComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzPaginationOptionsComponent_Conditional_0_Template, 3, 3, "nz-select", 0)(1, NzPaginationOptionsComponent_Conditional_1_Template, 4, 3, "div", 1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.showSizeChanger ? 0 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.showQuickJumper ? 1 : -1);
    }
  },
  dependencies: [NzSelectModule, NzOptionComponent, NzSelectComponent, FormsModule, NgControlStatus, NgModel],
  encapsulation: 2,
  changeDetection: 0
});
var NzPaginationOptionsComponent = _NzPaginationOptionsComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPaginationOptionsComponent, [{
    type: Component,
    args: [{
      selector: "li[nz-pagination-options]",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (showSizeChanger) {
      <nz-select
        class="ant-pagination-options-size-changer"
        [nzDisabled]="disabled"
        [nzSize]="nzSize"
        [ngModel]="pageSize"
        (ngModelChange)="onPageSizeChange($event)"
      >
        @for (option of listOfPageSizeOption; track option.value) {
          <nz-option [nzLabel]="option.label" [nzValue]="option.value" />
        }
      </nz-select>
    }

    @if (showQuickJumper) {
      <div class="ant-pagination-options-quick-jumper">
        {{ locale.jump_to }}
        <input [disabled]="disabled" (keydown.enter)="jumpToPageViaInput($event)" />
        {{ locale.page }}
      </div>
    }
  `,
      host: {
        class: "ant-pagination-options"
      },
      imports: [NzSelectModule, FormsModule],
      standalone: true
    }]
  }], () => [], {
    nzSize: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    showSizeChanger: [{
      type: Input
    }],
    showQuickJumper: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    total: [{
      type: Input
    }],
    pageIndex: [{
      type: Input
    }],
    pageSize: [{
      type: Input
    }],
    pageSizeOptions: [{
      type: Input
    }],
    pageIndexChange: [{
      type: Output
    }],
    pageSizeChange: [{
      type: Output
    }]
  });
})();
var _NzPaginationDefaultComponent = class _NzPaginationDefaultComponent {
  constructor(cdr, renderer, elementRef, directionality) {
    this.cdr = cdr;
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.directionality = directionality;
    this.nzSize = "default";
    this.itemRender = null;
    this.showTotal = null;
    this.disabled = false;
    this.showSizeChanger = false;
    this.showQuickJumper = false;
    this.total = 0;
    this.pageIndex = 1;
    this.pageSize = 10;
    this.pageSizeOptions = [10, 20, 30, 40];
    this.pageIndexChange = new EventEmitter();
    this.pageSizeChange = new EventEmitter();
    this.ranges = [0, 0];
    this.listOfPageItem = [];
    this.dir = "ltr";
    this.destroy$ = new Subject();
    renderer.removeChild(renderer.parentNode(elementRef.nativeElement), elementRef.nativeElement);
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.updateRtlStyle();
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    this.updateRtlStyle();
  }
  updateRtlStyle() {
    if (this.dir === "rtl") {
      this.renderer.addClass(this.elementRef.nativeElement, "ant-pagination-rtl");
    } else {
      this.renderer.removeClass(this.elementRef.nativeElement, "ant-pagination-rtl");
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  jumpPage(index) {
    this.onPageIndexChange(index);
  }
  jumpDiff(diff) {
    this.jumpPage(this.pageIndex + diff);
  }
  trackByPageItem(_, value) {
    return `${value.type}-${value.index}`;
  }
  onPageIndexChange(index) {
    this.pageIndexChange.next(index);
  }
  onPageSizeChange(size) {
    this.pageSizeChange.next(size);
  }
  getLastIndex(total, pageSize) {
    return Math.ceil(total / pageSize);
  }
  buildIndexes() {
    const lastIndex = this.getLastIndex(this.total, this.pageSize);
    this.listOfPageItem = this.getListOfPageItem(this.pageIndex, lastIndex);
  }
  getListOfPageItem(pageIndex, lastIndex) {
    const concatWithPrevNext = (listOfPage) => {
      const prevItem = {
        type: "prev",
        disabled: pageIndex === 1
      };
      const nextItem = {
        type: "next",
        disabled: pageIndex === lastIndex
      };
      return [prevItem, ...listOfPage, nextItem];
    };
    const generatePage = (start, end) => {
      const list = [];
      for (let i = start; i <= end; i++) {
        list.push({
          index: i,
          type: "page"
        });
      }
      return list;
    };
    if (lastIndex <= 9) {
      return concatWithPrevNext(generatePage(1, lastIndex));
    } else {
      const generateRangeItem = (selected, last) => {
        let listOfRange = [];
        const prevFiveItem = {
          type: "prev_5"
        };
        const nextFiveItem = {
          type: "next_5"
        };
        const firstPageItem = generatePage(1, 1);
        const lastPageItem = generatePage(lastIndex, lastIndex);
        if (selected < 5) {
          const maxLeft = selected === 4 ? 6 : 5;
          listOfRange = [...generatePage(2, maxLeft), nextFiveItem];
        } else if (selected < last - 3) {
          listOfRange = [prevFiveItem, ...generatePage(selected - 2, selected + 2), nextFiveItem];
        } else {
          const minRight = selected === last - 3 ? last - 5 : last - 4;
          listOfRange = [prevFiveItem, ...generatePage(minRight, last - 1)];
        }
        return [...firstPageItem, ...listOfRange, ...lastPageItem];
      };
      return concatWithPrevNext(generateRangeItem(pageIndex, lastIndex));
    }
  }
  ngOnChanges(changes) {
    const {
      pageIndex,
      pageSize,
      total
    } = changes;
    if (pageIndex || pageSize || total) {
      this.ranges = [(this.pageIndex - 1) * this.pageSize + 1, Math.min(this.pageIndex * this.pageSize, this.total)];
      this.buildIndexes();
    }
  }
};
_NzPaginationDefaultComponent.\u0275fac = function NzPaginationDefaultComponent_Factory(t) {
  return new (t || _NzPaginationDefaultComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Directionality, 8));
};
_NzPaginationDefaultComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzPaginationDefaultComponent,
  selectors: [["nz-pagination-default"]],
  viewQuery: function NzPaginationDefaultComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c3, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    nzSize: "nzSize",
    itemRender: "itemRender",
    showTotal: "showTotal",
    disabled: "disabled",
    locale: "locale",
    showSizeChanger: "showSizeChanger",
    showQuickJumper: "showQuickJumper",
    total: "total",
    pageIndex: "pageIndex",
    pageSize: "pageSize",
    pageSizeOptions: "pageSizeOptions"
  },
  outputs: {
    pageIndexChange: "pageIndexChange",
    pageSizeChange: "pageSizeChange"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 0,
  consts: [["containerTemplate", ""], [1, "ant-pagination-total-text"], ["nz-pagination-item", "", 3, "locale", "type", "index", "disabled", "itemRender", "active", "direction"], ["nz-pagination-options", "", 3, "total", "locale", "disabled", "nzSize", "showSizeChanger", "showQuickJumper", "pageIndex", "pageSize", "pageSizeOptions"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["nz-pagination-item", "", 3, "gotoIndex", "diffIndex", "locale", "type", "index", "disabled", "itemRender", "active", "direction"], ["nz-pagination-options", "", 3, "pageIndexChange", "pageSizeChange", "total", "locale", "disabled", "nzSize", "showSizeChanger", "showQuickJumper", "pageIndex", "pageSize", "pageSizeOptions"]],
  template: function NzPaginationDefaultComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzPaginationDefaultComponent_ng_template_0_Template, 5, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
  },
  dependencies: [NgTemplateOutlet, NzPaginationItemComponent, NzPaginationOptionsComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzPaginationDefaultComponent = _NzPaginationDefaultComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPaginationDefaultComponent, [{
    type: Component,
    args: [{
      selector: "nz-pagination-default",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-template #containerTemplate>
      <ul>
        @if (showTotal) {
          <li class="ant-pagination-total-text">
            <ng-template
              [ngTemplateOutlet]="showTotal"
              [ngTemplateOutletContext]="{ $implicit: total, range: ranges }"
            />
          </li>
        }

        @for (page of listOfPageItem; track trackByPageItem) {
          <li
            nz-pagination-item
            [locale]="locale"
            [type]="page.type"
            [index]="page.index"
            [disabled]="!!page.disabled"
            [itemRender]="itemRender"
            [active]="pageIndex === page.index"
            (gotoIndex)="jumpPage($event)"
            (diffIndex)="jumpDiff($event)"
            [direction]="dir"
          ></li>
        }

        @if (showQuickJumper || showSizeChanger) {
          <li
            nz-pagination-options
            [total]="total"
            [locale]="locale"
            [disabled]="disabled"
            [nzSize]="nzSize"
            [showSizeChanger]="showSizeChanger"
            [showQuickJumper]="showQuickJumper"
            [pageIndex]="pageIndex"
            [pageSize]="pageSize"
            [pageSizeOptions]="pageSizeOptions"
            (pageIndexChange)="onPageIndexChange($event)"
            (pageSizeChange)="onPageSizeChange($event)"
          ></li>
        }
      </ul>
    </ng-template>
  `,
      imports: [NgTemplateOutlet, NzPaginationItemComponent, NzPaginationOptionsComponent],
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    template: [{
      type: ViewChild,
      args: ["containerTemplate", {
        static: true
      }]
    }],
    nzSize: [{
      type: Input
    }],
    itemRender: [{
      type: Input
    }],
    showTotal: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    showSizeChanger: [{
      type: Input
    }],
    showQuickJumper: [{
      type: Input
    }],
    total: [{
      type: Input
    }],
    pageIndex: [{
      type: Input
    }],
    pageSize: [{
      type: Input
    }],
    pageSizeOptions: [{
      type: Input
    }],
    pageIndexChange: [{
      type: Output
    }],
    pageSizeChange: [{
      type: Output
    }]
  });
})();
var _NzPaginationSimpleComponent = class _NzPaginationSimpleComponent {
  constructor(cdr, renderer, elementRef, directionality) {
    this.cdr = cdr;
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.directionality = directionality;
    this.itemRender = null;
    this.disabled = false;
    this.total = 0;
    this.pageIndex = 1;
    this.pageSize = 10;
    this.pageIndexChange = new EventEmitter();
    this.lastIndex = 0;
    this.isFirstIndex = false;
    this.isLastIndex = false;
    this.dir = "ltr";
    this.destroy$ = new Subject();
    renderer.removeChild(renderer.parentNode(elementRef.nativeElement), elementRef.nativeElement);
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.updateRtlStyle();
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    this.updateRtlStyle();
  }
  updateRtlStyle() {
    if (this.dir === "rtl") {
      this.renderer.addClass(this.elementRef.nativeElement, "ant-pagination-rtl");
    } else {
      this.renderer.removeClass(this.elementRef.nativeElement, "ant-pagination-rtl");
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  jumpToPageViaInput($event) {
    const target = $event.target;
    const index = toNumber(target.value, this.pageIndex);
    this.onPageIndexChange(index);
    target.value = `${this.pageIndex}`;
  }
  prePage() {
    this.onPageIndexChange(this.pageIndex - 1);
  }
  nextPage() {
    this.onPageIndexChange(this.pageIndex + 1);
  }
  onPageIndexChange(index) {
    this.pageIndexChange.next(index);
  }
  updateBindingValue() {
    this.lastIndex = Math.ceil(this.total / this.pageSize);
    this.isFirstIndex = this.pageIndex === 1;
    this.isLastIndex = this.pageIndex === this.lastIndex;
  }
  ngOnChanges(changes) {
    const {
      pageIndex,
      total,
      pageSize
    } = changes;
    if (pageIndex || total || pageSize) {
      this.updateBindingValue();
    }
  }
};
_NzPaginationSimpleComponent.\u0275fac = function NzPaginationSimpleComponent_Factory(t) {
  return new (t || _NzPaginationSimpleComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Directionality, 8));
};
_NzPaginationSimpleComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzPaginationSimpleComponent,
  selectors: [["nz-pagination-simple"]],
  viewQuery: function NzPaginationSimpleComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c3, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.template = _t.first);
    }
  },
  inputs: {
    itemRender: "itemRender",
    disabled: "disabled",
    locale: "locale",
    total: "total",
    pageIndex: "pageIndex",
    pageSize: "pageSize"
  },
  outputs: {
    pageIndexChange: "pageIndexChange"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 0,
  consts: [["containerTemplate", ""], ["nz-pagination-item", "", "type", "prev", 3, "click", "locale", "disabled", "direction", "itemRender"], [1, "ant-pagination-simple-pager"], ["size", "3", 3, "keydown.enter", "disabled", "value"], [1, "ant-pagination-slash"], ["nz-pagination-item", "", "type", "next", 3, "click", "locale", "disabled", "direction", "itemRender"]],
  template: function NzPaginationSimpleComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzPaginationSimpleComponent_ng_template_0_Template, 8, 14, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
  },
  dependencies: [NzPaginationItemComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzPaginationSimpleComponent = _NzPaginationSimpleComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPaginationSimpleComponent, [{
    type: Component,
    args: [{
      selector: "nz-pagination-simple",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <ng-template #containerTemplate>
      <ul>
        <li
          nz-pagination-item
          [locale]="locale"
          [attr.title]="locale.prev_page"
          [disabled]="isFirstIndex"
          [direction]="dir"
          (click)="prePage()"
          type="prev"
          [itemRender]="itemRender"
        ></li>
        <li [attr.title]="pageIndex + '/' + lastIndex" class="ant-pagination-simple-pager">
          <input [disabled]="disabled" [value]="pageIndex" (keydown.enter)="jumpToPageViaInput($event)" size="3" />
          <span class="ant-pagination-slash">/</span>
          {{ lastIndex }}
        </li>
        <li
          nz-pagination-item
          [locale]="locale"
          [attr.title]="locale?.next_page"
          [disabled]="isLastIndex"
          [direction]="dir"
          (click)="nextPage()"
          type="next"
          [itemRender]="itemRender"
        ></li>
      </ul>
    </ng-template>
  `,
      imports: [NzPaginationItemComponent],
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    template: [{
      type: ViewChild,
      args: ["containerTemplate", {
        static: true
      }]
    }],
    itemRender: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    total: [{
      type: Input
    }],
    pageIndex: [{
      type: Input
    }],
    pageSize: [{
      type: Input
    }],
    pageIndexChange: [{
      type: Output
    }]
  });
})();
var NZ_CONFIG_MODULE_NAME3 = "pagination";
var _NzPaginationComponent = class _NzPaginationComponent {
  validatePageIndex(value, lastIndex) {
    if (value > lastIndex) {
      return lastIndex;
    } else if (value < 1) {
      return 1;
    } else {
      return value;
    }
  }
  onPageIndexChange(index) {
    const lastIndex = this.getLastIndex(this.nzTotal, this.nzPageSize);
    const validIndex = this.validatePageIndex(index, lastIndex);
    if (validIndex !== this.nzPageIndex && !this.nzDisabled) {
      this.nzPageIndex = validIndex;
      this.nzPageIndexChange.emit(this.nzPageIndex);
    }
  }
  onPageSizeChange(size) {
    this.nzPageSize = size;
    this.nzPageSizeChange.emit(size);
    const lastIndex = this.getLastIndex(this.nzTotal, this.nzPageSize);
    if (this.nzPageIndex > lastIndex) {
      this.onPageIndexChange(lastIndex);
    }
  }
  onTotalChange(total) {
    const lastIndex = this.getLastIndex(total, this.nzPageSize);
    if (this.nzPageIndex > lastIndex) {
      Promise.resolve().then(() => {
        this.onPageIndexChange(lastIndex);
        this.cdr.markForCheck();
      });
    }
  }
  getLastIndex(total, pageSize) {
    return Math.ceil(total / pageSize);
  }
  constructor(i18n, cdr, breakpointService, nzConfigService, directionality) {
    this.i18n = i18n;
    this.cdr = cdr;
    this.breakpointService = breakpointService;
    this.nzConfigService = nzConfigService;
    this.directionality = directionality;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME3;
    this.nzPageSizeChange = new EventEmitter();
    this.nzPageIndexChange = new EventEmitter();
    this.nzShowTotal = null;
    this.nzItemRender = null;
    this.nzSize = "default";
    this.nzPageSizeOptions = [10, 20, 30, 40];
    this.nzShowSizeChanger = false;
    this.nzShowQuickJumper = false;
    this.nzSimple = false;
    this.nzDisabled = false;
    this.nzResponsive = false;
    this.nzHideOnSinglePage = false;
    this.nzTotal = 0;
    this.nzPageIndex = 1;
    this.nzPageSize = 10;
    this.showPagination = true;
    this.size = "default";
    this.dir = "ltr";
    this.destroy$ = new Subject();
    this.total$ = new ReplaySubject(1);
  }
  ngOnInit() {
    this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.locale = this.i18n.getLocaleData("Pagination");
      this.cdr.markForCheck();
    });
    this.total$.pipe(takeUntil(this.destroy$)).subscribe((total) => {
      this.onTotalChange(total);
    });
    this.breakpointService.subscribe(gridResponsiveMap).pipe(takeUntil(this.destroy$)).subscribe((bp) => {
      if (this.nzResponsive) {
        this.size = bp === NzBreakpointEnum.xs ? "small" : "default";
        this.cdr.markForCheck();
      }
    });
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  ngOnChanges(changes) {
    const {
      nzHideOnSinglePage,
      nzTotal,
      nzPageSize,
      nzSize
    } = changes;
    if (nzTotal) {
      this.total$.next(this.nzTotal);
    }
    if (nzHideOnSinglePage || nzTotal || nzPageSize) {
      this.showPagination = this.nzHideOnSinglePage && this.nzTotal > this.nzPageSize || this.nzTotal > 0 && !this.nzHideOnSinglePage;
    }
    if (nzSize) {
      this.size = nzSize.currentValue;
    }
  }
};
_NzPaginationComponent.\u0275fac = function NzPaginationComponent_Factory(t) {
  return new (t || _NzPaginationComponent)(\u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzBreakpointService), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(Directionality, 8));
};
_NzPaginationComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzPaginationComponent,
  selectors: [["nz-pagination"]],
  hostAttrs: [1, "ant-pagination"],
  hostVars: 8,
  hostBindings: function NzPaginationComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-pagination-simple", ctx.nzSimple)("ant-pagination-disabled", ctx.nzDisabled)("ant-pagination-mini", !ctx.nzSimple && ctx.size === "small")("ant-pagination-rtl", ctx.dir === "rtl");
    }
  },
  inputs: {
    nzShowTotal: "nzShowTotal",
    nzItemRender: "nzItemRender",
    nzSize: "nzSize",
    nzPageSizeOptions: "nzPageSizeOptions",
    nzShowSizeChanger: "nzShowSizeChanger",
    nzShowQuickJumper: "nzShowQuickJumper",
    nzSimple: "nzSimple",
    nzDisabled: "nzDisabled",
    nzResponsive: "nzResponsive",
    nzHideOnSinglePage: "nzHideOnSinglePage",
    nzTotal: "nzTotal",
    nzPageIndex: "nzPageIndex",
    nzPageSize: "nzPageSize"
  },
  outputs: {
    nzPageSizeChange: "nzPageSizeChange",
    nzPageIndexChange: "nzPageIndexChange"
  },
  exportAs: ["nzPagination"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 5,
  vars: 18,
  consts: [["simplePagination", ""], ["defaultPagination", ""], [3, "pageIndexChange", "disabled", "itemRender", "locale", "pageSize", "total", "pageIndex"], [3, "pageIndexChange", "pageSizeChange", "nzSize", "itemRender", "showTotal", "disabled", "locale", "showSizeChanger", "showQuickJumper", "total", "pageIndex", "pageSize", "pageSizeOptions"], [3, "ngTemplateOutlet"]],
  template: function NzPaginationComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275template(0, NzPaginationComponent_Conditional_0_Template, 2, 1);
      \u0275\u0275elementStart(1, "nz-pagination-simple", 2, 0);
      \u0275\u0275listener("pageIndexChange", function NzPaginationComponent_Template_nz_pagination_simple_pageIndexChange_1_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onPageIndexChange($event));
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(3, "nz-pagination-default", 3, 1);
      \u0275\u0275listener("pageIndexChange", function NzPaginationComponent_Template_nz_pagination_default_pageIndexChange_3_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onPageIndexChange($event));
      })("pageSizeChange", function NzPaginationComponent_Template_nz_pagination_default_pageSizeChange_3_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onPageSizeChange($event));
      });
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.showPagination ? 0 : -1);
      \u0275\u0275advance();
      \u0275\u0275property("disabled", ctx.nzDisabled)("itemRender", ctx.nzItemRender)("locale", ctx.locale)("pageSize", ctx.nzPageSize)("total", ctx.nzTotal)("pageIndex", ctx.nzPageIndex);
      \u0275\u0275advance(2);
      \u0275\u0275property("nzSize", ctx.size)("itemRender", ctx.nzItemRender)("showTotal", ctx.nzShowTotal)("disabled", ctx.nzDisabled)("locale", ctx.locale)("showSizeChanger", ctx.nzShowSizeChanger)("showQuickJumper", ctx.nzShowQuickJumper)("total", ctx.nzTotal)("pageIndex", ctx.nzPageIndex)("pageSize", ctx.nzPageSize)("pageSizeOptions", ctx.nzPageSizeOptions);
    }
  },
  dependencies: [NgTemplateOutlet, NzPaginationSimpleComponent, NzPaginationDefaultComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzPaginationComponent = _NzPaginationComponent;
__decorate([WithConfig()], NzPaginationComponent.prototype, "nzSize", void 0);
__decorate([WithConfig()], NzPaginationComponent.prototype, "nzPageSizeOptions", void 0);
__decorate([WithConfig(), InputBoolean()], NzPaginationComponent.prototype, "nzShowSizeChanger", void 0);
__decorate([WithConfig(), InputBoolean()], NzPaginationComponent.prototype, "nzShowQuickJumper", void 0);
__decorate([WithConfig(), InputBoolean()], NzPaginationComponent.prototype, "nzSimple", void 0);
__decorate([InputBoolean()], NzPaginationComponent.prototype, "nzDisabled", void 0);
__decorate([InputBoolean()], NzPaginationComponent.prototype, "nzResponsive", void 0);
__decorate([InputBoolean()], NzPaginationComponent.prototype, "nzHideOnSinglePage", void 0);
__decorate([InputNumber()], NzPaginationComponent.prototype, "nzTotal", void 0);
__decorate([InputNumber()], NzPaginationComponent.prototype, "nzPageIndex", void 0);
__decorate([InputNumber()], NzPaginationComponent.prototype, "nzPageSize", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPaginationComponent, [{
    type: Component,
    args: [{
      selector: "nz-pagination",
      exportAs: "nzPagination",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    @if (showPagination) {
      @if (nzSimple) {
        <ng-template [ngTemplateOutlet]="simplePagination.template" />
      } @else {
        <ng-template [ngTemplateOutlet]="defaultPagination.template" />
      }
    }

    <nz-pagination-simple
      #simplePagination
      [disabled]="nzDisabled"
      [itemRender]="nzItemRender"
      [locale]="locale"
      [pageSize]="nzPageSize"
      [total]="nzTotal"
      [pageIndex]="nzPageIndex"
      (pageIndexChange)="onPageIndexChange($event)"
    ></nz-pagination-simple>
    <nz-pagination-default
      #defaultPagination
      [nzSize]="size"
      [itemRender]="nzItemRender"
      [showTotal]="nzShowTotal"
      [disabled]="nzDisabled"
      [locale]="locale"
      [showSizeChanger]="nzShowSizeChanger"
      [showQuickJumper]="nzShowQuickJumper"
      [total]="nzTotal"
      [pageIndex]="nzPageIndex"
      [pageSize]="nzPageSize"
      [pageSizeOptions]="nzPageSizeOptions"
      (pageIndexChange)="onPageIndexChange($event)"
      (pageSizeChange)="onPageSizeChange($event)"
    ></nz-pagination-default>
  `,
      host: {
        class: "ant-pagination",
        "[class.ant-pagination-simple]": "nzSimple",
        "[class.ant-pagination-disabled]": "nzDisabled",
        "[class.ant-pagination-mini]": `!nzSimple && size === 'small'`,
        "[class.ant-pagination-rtl]": `dir === 'rtl'`
      },
      imports: [NgTemplateOutlet, NzPaginationSimpleComponent, NzPaginationDefaultComponent],
      standalone: true
    }]
  }], () => [{
    type: NzI18nService
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzBreakpointService
  }, {
    type: NzConfigService
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzPageSizeChange: [{
      type: Output
    }],
    nzPageIndexChange: [{
      type: Output
    }],
    nzShowTotal: [{
      type: Input
    }],
    nzItemRender: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzPageSizeOptions: [{
      type: Input
    }],
    nzShowSizeChanger: [{
      type: Input
    }],
    nzShowQuickJumper: [{
      type: Input
    }],
    nzSimple: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzResponsive: [{
      type: Input
    }],
    nzHideOnSinglePage: [{
      type: Input
    }],
    nzTotal: [{
      type: Input
    }],
    nzPageIndex: [{
      type: Input
    }],
    nzPageSize: [{
      type: Input
    }]
  });
})();
var _NzPaginationModule = class _NzPaginationModule {
};
_NzPaginationModule.\u0275fac = function NzPaginationModule_Factory(t) {
  return new (t || _NzPaginationModule)();
};
_NzPaginationModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzPaginationModule
});
_NzPaginationModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzPaginationComponent, NzPaginationSimpleComponent, NzPaginationOptionsComponent, NzPaginationItemComponent, NzPaginationDefaultComponent]
});
var NzPaginationModule = _NzPaginationModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPaginationModule, [{
    type: NgModule,
    args: [{
      imports: [NzPaginationComponent, NzPaginationSimpleComponent, NzPaginationOptionsComponent, NzPaginationItemComponent, NzPaginationDefaultComponent],
      exports: [NzPaginationComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-spin.mjs
var _c06 = ["*"];
function NzSpinComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 3);
    \u0275\u0275element(1, "i", 4)(2, "i", 4)(3, "i", 4)(4, "i", 4);
    \u0275\u0275elementEnd();
  }
}
function NzSpinComponent_div_2_ng_template_2_Template(rf, ctx) {
}
function NzSpinComponent_div_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.nzTip);
  }
}
function NzSpinComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "div", 5);
    \u0275\u0275template(2, NzSpinComponent_div_2_ng_template_2_Template, 0, 0, "ng-template", 6)(3, NzSpinComponent_div_2_div_3_Template, 2, 1, "div", 7);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const defaultTemplate_r2 = \u0275\u0275reference(1);
    \u0275\u0275advance();
    \u0275\u0275classProp("ant-spin-rtl", ctx_r0.dir === "rtl")("ant-spin-spinning", ctx_r0.isLoading)("ant-spin-lg", ctx_r0.nzSize === "large")("ant-spin-sm", ctx_r0.nzSize === "small")("ant-spin-show-text", ctx_r0.nzTip);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.nzIndicator || defaultTemplate_r2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.nzTip);
  }
}
function NzSpinComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9);
    \u0275\u0275projection(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classProp("ant-spin-blur", ctx_r0.isLoading);
  }
}
var NZ_CONFIG_MODULE_NAME4 = "spin";
var _NzSpinComponent = class _NzSpinComponent {
  constructor(nzConfigService, cdr, directionality) {
    this.nzConfigService = nzConfigService;
    this.cdr = cdr;
    this.directionality = directionality;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME4;
    this.nzIndicator = null;
    this.nzSize = "default";
    this.nzTip = null;
    this.nzDelay = 0;
    this.nzSimple = false;
    this.nzSpinning = true;
    this.destroy$ = new Subject();
    this.spinning$ = new BehaviorSubject(this.nzSpinning);
    this.delay$ = new ReplaySubject(1);
    this.isLoading = false;
    this.dir = "ltr";
  }
  ngOnInit() {
    const loading$ = this.delay$.pipe(startWith(this.nzDelay), distinctUntilChanged(), switchMap((delay2) => {
      if (delay2 === 0) {
        return this.spinning$;
      }
      return this.spinning$.pipe(debounce((spinning) => timer(spinning ? delay2 : 0)));
    }), takeUntil(this.destroy$));
    loading$.subscribe((loading) => {
      this.isLoading = loading;
      this.cdr.markForCheck();
    });
    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME4).pipe(takeUntil(this.destroy$)).subscribe(() => this.cdr.markForCheck());
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnChanges(changes) {
    const {
      nzSpinning,
      nzDelay
    } = changes;
    if (nzSpinning) {
      this.spinning$.next(this.nzSpinning);
    }
    if (nzDelay) {
      this.delay$.next(this.nzDelay);
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzSpinComponent.\u0275fac = function NzSpinComponent_Factory(t) {
  return new (t || _NzSpinComponent)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality, 8));
};
_NzSpinComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzSpinComponent,
  selectors: [["nz-spin"]],
  hostVars: 2,
  hostBindings: function NzSpinComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-spin-nested-loading", !ctx.nzSimple);
    }
  },
  inputs: {
    nzIndicator: "nzIndicator",
    nzSize: "nzSize",
    nzTip: "nzTip",
    nzDelay: "nzDelay",
    nzSimple: "nzSimple",
    nzSpinning: "nzSpinning"
  },
  exportAs: ["nzSpin"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c06,
  decls: 4,
  vars: 2,
  consts: [["defaultTemplate", ""], [4, "ngIf"], ["class", "ant-spin-container", 3, "ant-spin-blur", 4, "ngIf"], [1, "ant-spin-dot", "ant-spin-dot-spin"], [1, "ant-spin-dot-item"], [1, "ant-spin"], [3, "ngTemplateOutlet"], ["class", "ant-spin-text", 4, "ngIf"], [1, "ant-spin-text"], [1, "ant-spin-container"]],
  template: function NzSpinComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzSpinComponent_ng_template_0_Template, 5, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, NzSpinComponent_div_2_Template, 4, 12, "div", 1)(3, NzSpinComponent_div_3_Template, 2, 2, "div", 2);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", ctx.isLoading);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.nzSimple);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet],
  encapsulation: 2
});
var NzSpinComponent = _NzSpinComponent;
__decorate([WithConfig()], NzSpinComponent.prototype, "nzIndicator", void 0);
__decorate([InputNumber()], NzSpinComponent.prototype, "nzDelay", void 0);
__decorate([InputBoolean()], NzSpinComponent.prototype, "nzSimple", void 0);
__decorate([InputBoolean()], NzSpinComponent.prototype, "nzSpinning", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpinComponent, [{
    type: Component,
    args: [{
      selector: "nz-spin",
      exportAs: "nzSpin",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <ng-template #defaultTemplate>
      <span class="ant-spin-dot ant-spin-dot-spin">
        <i class="ant-spin-dot-item"></i>
        <i class="ant-spin-dot-item"></i>
        <i class="ant-spin-dot-item"></i>
        <i class="ant-spin-dot-item"></i>
      </span>
    </ng-template>
    <div *ngIf="isLoading">
      <div
        class="ant-spin"
        [class.ant-spin-rtl]="dir === 'rtl'"
        [class.ant-spin-spinning]="isLoading"
        [class.ant-spin-lg]="nzSize === 'large'"
        [class.ant-spin-sm]="nzSize === 'small'"
        [class.ant-spin-show-text]="nzTip"
      >
        <ng-template [ngTemplateOutlet]="nzIndicator || defaultTemplate"></ng-template>
        <div class="ant-spin-text" *ngIf="nzTip">{{ nzTip }}</div>
      </div>
    </div>
    <div *ngIf="!nzSimple" class="ant-spin-container" [class.ant-spin-blur]="isLoading">
      <ng-content></ng-content>
    </div>
  `,
      host: {
        "[class.ant-spin-nested-loading]": "!nzSimple"
      },
      imports: [NgIf, NgTemplateOutlet],
      standalone: true
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: ChangeDetectorRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzIndicator: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzTip: [{
      type: Input
    }],
    nzDelay: [{
      type: Input
    }],
    nzSimple: [{
      type: Input
    }],
    nzSpinning: [{
      type: Input
    }]
  });
})();
var _NzSpinModule = class _NzSpinModule {
};
_NzSpinModule.\u0275fac = function NzSpinModule_Factory(t) {
  return new (t || _NzSpinModule)();
};
_NzSpinModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzSpinModule
});
_NzSpinModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var NzSpinModule = _NzSpinModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzSpinModule, [{
    type: NgModule,
    args: [{
      imports: [NzSpinComponent],
      exports: [NzSpinComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-table.mjs
var _c07 = ["*"];
function NzTableFilterComponent_ng_template_1_Template(rf, ctx) {
}
function NzTableFilterComponent_ng_container_2_li_7_label_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 15);
    \u0275\u0275listener("ngModelChange", function NzTableFilterComponent_ng_container_2_li_7_label_1_Template_label_ngModelChange_0_listener() {
      \u0275\u0275restoreView(_r5);
      const f_r4 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.check(f_r4));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const f_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngModel", f_r4.checked);
  }
}
function NzTableFilterComponent_ng_container_2_li_7_label_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 16);
    \u0275\u0275listener("ngModelChange", function NzTableFilterComponent_ng_container_2_li_7_label_2_Template_label_ngModelChange_0_listener() {
      \u0275\u0275restoreView(_r6);
      const f_r4 = \u0275\u0275nextContext().$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.check(f_r4));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const f_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngModel", f_r4.checked);
  }
}
function NzTableFilterComponent_ng_container_2_li_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 12);
    \u0275\u0275listener("click", function NzTableFilterComponent_ng_container_2_li_7_Template_li_click_0_listener() {
      const f_r4 = \u0275\u0275restoreView(_r3).$implicit;
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.check(f_r4));
    });
    \u0275\u0275template(1, NzTableFilterComponent_ng_container_2_li_7_label_1_Template, 1, 1, "label", 13)(2, NzTableFilterComponent_ng_container_2_li_7_label_2_Template, 1, 1, "label", 14);
    \u0275\u0275elementStart(3, "span");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const f_r4 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzSelected", f_r4.checked);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r1.filterMultiple);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.filterMultiple);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(f_r4.text);
  }
}
function NzTableFilterComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "nz-filter-trigger", 4);
    \u0275\u0275listener("nzVisibleChange", function NzTableFilterComponent_ng_container_2_Template_nz_filter_trigger_nzVisibleChange_1_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onVisibleChange($event));
    });
    \u0275\u0275element(2, "span", 5);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "nz-dropdown-menu", null, 0)(5, "div", 6)(6, "ul", 7);
    \u0275\u0275template(7, NzTableFilterComponent_ng_container_2_li_7_Template, 5, 4, "li", 8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "div", 9)(9, "button", 10);
    \u0275\u0275listener("click", function NzTableFilterComponent_ng_container_2_Template_button_click_9_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.reset());
    });
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "button", 11);
    \u0275\u0275listener("click", function NzTableFilterComponent_ng_container_2_Template_button_click_11_listener() {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.confirm());
    });
    \u0275\u0275text(12);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const filterMenu_r7 = \u0275\u0275reference(4);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzVisible", ctx_r1.isVisible)("nzActive", ctx_r1.isChecked)("nzDropdownMenu", filterMenu_r7);
    \u0275\u0275advance(6);
    \u0275\u0275property("ngForOf", ctx_r1.listOfParsedFilter)("ngForTrackBy", ctx_r1.trackByValue);
    \u0275\u0275advance(2);
    \u0275\u0275property("disabled", !ctx_r1.isChecked);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r1.locale.filterReset, " ");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r1.locale.filterConfirm);
  }
}
function NzTableSelectionComponent_label_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 3);
    \u0275\u0275listener("ngModelChange", function NzTableSelectionComponent_label_0_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCheckedChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classProp("ant-table-selection-select-all-custom", ctx_r1.showRowSelection);
    \u0275\u0275property("ngModel", ctx_r1.checked)("nzDisabled", ctx_r1.disabled)("nzIndeterminate", ctx_r1.indeterminate);
    \u0275\u0275attribute("aria-label", ctx_r1.label);
  }
}
function NzTableSelectionComponent_div_1_li_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 9);
    \u0275\u0275listener("click", function NzTableSelectionComponent_div_1_li_6_Template_li_click_0_listener() {
      const selection_r4 = \u0275\u0275restoreView(_r3).$implicit;
      return \u0275\u0275resetView(selection_r4.onSelect());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const selection_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", selection_r4.text, " ");
  }
}
function NzTableSelectionComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 4)(1, "span", 5);
    \u0275\u0275element(2, "span", 6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "nz-dropdown-menu", null, 0)(5, "ul", 7);
    \u0275\u0275template(6, NzTableSelectionComponent_div_1_li_6_Template, 2, 1, "li", 8);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const selectionMenu_r5 = \u0275\u0275reference(4);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzDropdownMenu", selectionMenu_r5);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", ctx_r1.listOfSelections);
  }
}
function NzTableSortersComponent_ng_template_1_Template(rf, ctx) {
}
function NzTableSortersComponent_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 6);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classProp("active", ctx_r0.sortOrder === "ascend");
  }
}
function NzTableSortersComponent_span_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 7);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classProp("active", ctx_r0.sortOrder === "descend");
  }
}
var _c14 = ["nzChecked", ""];
function NzTdAddOnComponent_ng_container_0_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 5);
    \u0275\u0275listener("expandChange", function NzTdAddOnComponent_ng_container_0_ng_template_2_Template_button_expandChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onExpandChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("expand", ctx_r1.nzExpand)("spaceMode", !ctx_r1.nzShowExpand);
  }
}
function NzTdAddOnComponent_ng_container_0_ng_container_4_ng_template_1_Template(rf, ctx) {
}
function NzTdAddOnComponent_ng_container_0_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTdAddOnComponent_ng_container_0_ng_container_4_ng_template_1_Template, 0, 0, "ng-template", 6);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r1.nzExpandIcon);
  }
}
function NzTdAddOnComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "nz-row-indent", 3);
    \u0275\u0275template(2, NzTdAddOnComponent_ng_container_0_ng_template_2_Template, 1, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(4, NzTdAddOnComponent_ng_container_0_ng_container_4_Template, 2, 1, "ng-container", 4);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const rowExpand_r3 = \u0275\u0275reference(3);
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("indentSize", ctx_r1.nzIndentSize);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngIf", ctx_r1.nzExpandIcon)("ngIfElse", rowExpand_r3);
  }
}
function NzTdAddOnComponent_label_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 7);
    \u0275\u0275listener("ngModelChange", function NzTdAddOnComponent_label_1_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onCheckedChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzDisabled", ctx_r1.nzDisabled)("ngModel", ctx_r1.nzChecked)("nzIndeterminate", ctx_r1.nzIndeterminate);
    \u0275\u0275attribute("aria-label", ctx_r1.nzLabel);
  }
}
var _c24 = ["nzColumnKey", ""];
var _c32 = [[["", "nz-th-extra", ""]], [["nz-filter-trigger"]], "*"];
var _c42 = ["[nz-th-extra]", "nz-filter-trigger", "*"];
function NzThAddOnComponent_nz_table_filter_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-table-filter", 5);
    \u0275\u0275listener("filterChange", function NzThAddOnComponent_nz_table_filter_0_Template_nz_table_filter_filterChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onFilterValueChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const notFilterTemplate_r3 = \u0275\u0275reference(2);
    const extraTemplate_r4 = \u0275\u0275reference(4);
    \u0275\u0275property("contentTemplate", notFilterTemplate_r3)("extraTemplate", extraTemplate_r4)("customFilter", ctx_r1.nzCustomFilter)("filterMultiple", ctx_r1.nzFilterMultiple)("listOfFilter", ctx_r1.nzFilters);
  }
}
function NzThAddOnComponent_ng_template_1_ng_template_0_Template(rf, ctx) {
}
function NzThAddOnComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzThAddOnComponent_ng_template_1_ng_template_0_Template, 0, 0, "ng-template", 6);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const sortTemplate_r5 = \u0275\u0275reference(6);
    const contentTemplate_r6 = \u0275\u0275reference(8);
    \u0275\u0275property("ngTemplateOutlet", ctx_r1.nzShowSort ? sortTemplate_r5 : contentTemplate_r6);
  }
}
function NzThAddOnComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
    \u0275\u0275projection(1, 1);
  }
}
function NzThAddOnComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-table-sorters", 7);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const contentTemplate_r6 = \u0275\u0275reference(8);
    \u0275\u0275property("sortOrder", ctx_r1.sortOrder)("sortDirections", ctx_r1.sortDirections)("contentTemplate", contentTemplate_r6);
  }
}
function NzThAddOnComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0, 2);
  }
}
var _c5 = ["nzSelections", ""];
var _c6 = ["nz-table-content", ""];
function NzTableContentComponent_col_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "col");
  }
  if (rf & 2) {
    const width_r1 = ctx.$implicit;
    \u0275\u0275styleProp("width", width_r1)("min-width", width_r1);
  }
}
function NzTableContentComponent_thead_1_ng_template_1_Template(rf, ctx) {
}
function NzTableContentComponent_thead_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "thead", 3);
    \u0275\u0275template(1, NzTableContentComponent_thead_1_ng_template_1_Template, 0, 0, "ng-template", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r1.theadTemplate);
  }
}
function NzTableContentComponent_ng_template_2_Template(rf, ctx) {
}
var _c7 = ["tdElement"];
var _c8 = ["nz-table-fixed-row", ""];
function NzTableFixedRowComponent_div_2_ng_template_2_Template(rf, ctx) {
}
function NzTableFixedRowComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 4);
    \u0275\u0275pipe(1, "async");
    \u0275\u0275template(2, NzTableFixedRowComponent_div_2_ng_template_2_Template, 0, 0, "ng-template", 5);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const contentTemplate_r2 = \u0275\u0275reference(5);
    \u0275\u0275styleProp("width", \u0275\u0275pipeBind1(1, 3, ctx_r0.hostWidth$), "px");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngTemplateOutlet", contentTemplate_r2);
  }
}
function NzTableFixedRowComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
var _c9 = ["nz-table-measure-row", ""];
function NzTrMeasureComponent_td_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "td", 2, 0);
  }
}
function NzTbodyComponent_ng_container_0_tr_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 3);
    \u0275\u0275listener("listOfAutoWidth", function NzTbodyComponent_ng_container_0_tr_1_Template_tr_listOfAutoWidth_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onListOfAutoWidthChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const listOfMeasureColumn_r3 = \u0275\u0275nextContext().ngIf;
    \u0275\u0275property("listOfMeasureColumn", listOfMeasureColumn_r3);
  }
}
function NzTbodyComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTbodyComponent_ng_container_0_tr_1_Template, 1, 1, "tr", 2);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const listOfMeasureColumn_r3 = ctx.ngIf;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r1.isInsideTable && listOfMeasureColumn_r3.length);
  }
}
function NzTbodyComponent_tr_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 4);
    \u0275\u0275element(1, "nz-embed-empty", 5);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("specificContent", \u0275\u0275pipeBind1(2, 1, ctx_r1.noResult$));
  }
}
var _c10 = ["tableHeaderElement"];
var _c11 = ["tableBodyElement"];
var _c122 = (a0, a1) => ({
  $implicit: a0,
  index: a1
});
function NzTableInnerScrollComponent_ng_container_0_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8, 1);
    \u0275\u0275element(2, "table", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngStyle", ctx_r0.bodyStyleMap);
    \u0275\u0275advance(2);
    \u0275\u0275property("scrollX", ctx_r0.scrollX)("listOfColWidth", ctx_r0.listOfColWidth)("contentTemplate", ctx_r0.contentTemplate);
  }
}
function NzTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_ng_template_1_Template(rf, ctx) {
}
function NzTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_ng_template_1_Template, 0, 0, "ng-template", 13);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.virtualTemplate)("ngTemplateOutletContext", \u0275\u0275pureFunction2(2, _c122, item_r2, i_r3));
  }
}
function NzTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "cdk-virtual-scroll-viewport", 10, 1)(2, "table", 11)(3, "tbody");
    \u0275\u0275template(4, NzTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_ng_container_4_Template, 2, 5, "ng-container", 12);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275styleProp("height", ctx_r0.data.length ? ctx_r0.scrollY : ctx_r0.noDateVirtualHeight);
    \u0275\u0275property("itemSize", ctx_r0.virtualItemSize)("maxBufferPx", ctx_r0.virtualMaxBufferPx)("minBufferPx", ctx_r0.virtualMinBufferPx);
    \u0275\u0275advance(2);
    \u0275\u0275property("scrollX", ctx_r0.scrollX)("listOfColWidth", ctx_r0.listOfColWidth);
    \u0275\u0275advance(2);
    \u0275\u0275property("cdkVirtualForOf", ctx_r0.data)("cdkVirtualForTrackBy", ctx_r0.virtualForTrackBy);
  }
}
function NzTableInnerScrollComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 4, 0);
    \u0275\u0275element(3, "table", 5);
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, NzTableInnerScrollComponent_ng_container_0_div_4_Template, 3, 4, "div", 6)(5, NzTableInnerScrollComponent_ng_container_0_cdk_virtual_scroll_viewport_5_Template, 5, 9, "cdk-virtual-scroll-viewport", 7);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngStyle", ctx_r0.headerStyleMap);
    \u0275\u0275advance(2);
    \u0275\u0275property("scrollX", ctx_r0.scrollX)("listOfColWidth", ctx_r0.listOfColWidth)("theadTemplate", ctx_r0.theadTemplate);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !ctx_r0.virtualTemplate);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.virtualTemplate);
  }
}
function NzTableInnerScrollComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 14, 1);
    \u0275\u0275element(2, "table", 15);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngStyle", ctx_r0.bodyStyleMap);
    \u0275\u0275advance(2);
    \u0275\u0275property("scrollX", ctx_r0.scrollX)("listOfColWidth", ctx_r0.listOfColWidth)("theadTemplate", ctx_r0.theadTemplate)("contentTemplate", ctx_r0.contentTemplate);
  }
}
function NzTableTitleFooterComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.title);
  }
}
function NzTableTitleFooterComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.footer);
  }
}
function NzTableComponent_ng_container_1_ng_template_1_Template(rf, ctx) {
}
function NzTableComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTableComponent_ng_container_1_ng_template_1_Template, 0, 0, "ng-template", 10);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const paginationTemplate_r1 = \u0275\u0275reference(11);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", paginationTemplate_r1);
  }
}
function NzTableComponent_nz_table_title_footer_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-table-title-footer", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("title", ctx_r1.nzTitle);
  }
}
function NzTableComponent_nz_table_inner_scroll_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-table-inner-scroll", 12);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const tableMainElement_r3 = \u0275\u0275reference(3);
    const contentTemplate_r4 = \u0275\u0275reference(13);
    \u0275\u0275property("data", ctx_r1.data)("scrollX", ctx_r1.scrollX)("scrollY", ctx_r1.scrollY)("contentTemplate", contentTemplate_r4)("listOfColWidth", ctx_r1.listOfAutoColWidth)("theadTemplate", ctx_r1.theadTemplate)("verticalScrollBarWidth", ctx_r1.verticalScrollBarWidth)("virtualTemplate", ctx_r1.nzVirtualScrollDirective ? ctx_r1.nzVirtualScrollDirective.templateRef : null)("virtualItemSize", ctx_r1.nzVirtualItemSize)("virtualMaxBufferPx", ctx_r1.nzVirtualMaxBufferPx)("virtualMinBufferPx", ctx_r1.nzVirtualMinBufferPx)("tableMainElement", tableMainElement_r3)("virtualForTrackBy", ctx_r1.nzVirtualForTrackBy);
  }
}
function NzTableComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-table-inner-default", 13);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    const contentTemplate_r4 = \u0275\u0275reference(13);
    \u0275\u0275property("tableLayout", ctx_r1.nzTableLayout)("listOfColWidth", ctx_r1.listOfManualColWidth)("theadTemplate", ctx_r1.theadTemplate)("contentTemplate", contentTemplate_r4);
  }
}
function NzTableComponent_nz_table_title_footer_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-table-title-footer", 14);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("footer", ctx_r1.nzFooter);
  }
}
function NzTableComponent_ng_container_9_ng_template_1_Template(rf, ctx) {
}
function NzTableComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTableComponent_ng_container_9_ng_template_1_Template, 0, 0, "ng-template", 10);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const paginationTemplate_r1 = \u0275\u0275reference(11);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", paginationTemplate_r1);
  }
}
function NzTableComponent_ng_template_10_nz_pagination_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-pagination", 16);
    \u0275\u0275listener("nzPageSizeChange", function NzTableComponent_ng_template_10_nz_pagination_0_Template_nz_pagination_nzPageSizeChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onPageSizeChange($event));
    })("nzPageIndexChange", function NzTableComponent_ng_template_10_nz_pagination_0_Template_nz_pagination_nzPageIndexChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r1.onPageIndexChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275property("hidden", !ctx_r1.showPagination)("nzShowSizeChanger", ctx_r1.nzShowSizeChanger)("nzPageSizeOptions", ctx_r1.nzPageSizeOptions)("nzItemRender", ctx_r1.nzItemRender)("nzShowQuickJumper", ctx_r1.nzShowQuickJumper)("nzHideOnSinglePage", ctx_r1.nzHideOnSinglePage)("nzShowTotal", ctx_r1.nzShowTotal)("nzSize", ctx_r1.nzPaginationType === "small" ? "small" : ctx_r1.nzSize === "default" ? "default" : "small")("nzPageSize", ctx_r1.nzPageSize)("nzTotal", ctx_r1.nzTotal)("nzSimple", ctx_r1.nzSimple)("nzPageIndex", ctx_r1.nzPageIndex);
  }
}
function NzTableComponent_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzTableComponent_ng_template_10_nz_pagination_0_Template, 1, 12, "nz-pagination", 15);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("ngIf", ctx_r1.nzShowPagination && ctx_r1.data.length);
  }
}
function NzTableComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
var _c132 = ["contentTemplate"];
function NzTheadComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function NzTheadComponent_ng_container_2_ng_template_1_Template(rf, ctx) {
}
function NzTheadComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTheadComponent_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 2);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const contentTemplate_r1 = \u0275\u0275reference(1);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", contentTemplate_r1);
  }
}
var NZ_CONFIG_MODULE_NAME$12 = "filterTrigger";
var _NzFilterTriggerComponent = class _NzFilterTriggerComponent {
  onVisibleChange(visible) {
    this.nzVisible = visible;
    this.nzVisibleChange.next(visible);
  }
  hide() {
    this.nzVisible = false;
    this.cdr.markForCheck();
  }
  show() {
    this.nzVisible = true;
    this.cdr.markForCheck();
  }
  constructor(nzConfigService, ngZone, cdr, destroy$) {
    this.nzConfigService = nzConfigService;
    this.ngZone = ngZone;
    this.cdr = cdr;
    this.destroy$ = destroy$;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME$12;
    this.nzActive = false;
    this.nzVisible = false;
    this.nzBackdrop = false;
    this.nzVisibleChange = new EventEmitter();
  }
  ngOnInit() {
    this.ngZone.runOutsideAngular(() => {
      fromEvent(this.nzDropdown.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe((event) => {
        event.stopPropagation();
      });
    });
  }
};
_NzFilterTriggerComponent.\u0275fac = function NzFilterTriggerComponent_Factory(t) {
  return new (t || _NzFilterTriggerComponent)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzDestroyService));
};
_NzFilterTriggerComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzFilterTriggerComponent,
  selectors: [["nz-filter-trigger"]],
  viewQuery: function NzFilterTriggerComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(NzDropDownDirective, 7, ElementRef);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzDropdown = _t.first);
    }
  },
  inputs: {
    nzActive: "nzActive",
    nzDropdownMenu: "nzDropdownMenu",
    nzVisible: "nzVisible",
    nzBackdrop: "nzBackdrop"
  },
  outputs: {
    nzVisibleChange: "nzVisibleChange"
  },
  exportAs: ["nzFilterTrigger"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c07,
  decls: 2,
  vars: 8,
  consts: [["nz-dropdown", "", "nzTrigger", "click", "nzPlacement", "bottomRight", 1, "ant-table-filter-trigger", 3, "nzVisibleChange", "nzBackdrop", "nzClickHide", "nzDropdownMenu", "nzVisible"]],
  template: function NzFilterTriggerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "span", 0);
      \u0275\u0275listener("nzVisibleChange", function NzFilterTriggerComponent_Template_span_nzVisibleChange_0_listener($event) {
        return ctx.onVisibleChange($event);
      });
      \u0275\u0275projection(1);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275classProp("active", ctx.nzActive)("ant-table-filter-open", ctx.nzVisible);
      \u0275\u0275property("nzBackdrop", ctx.nzBackdrop)("nzClickHide", false)("nzDropdownMenu", ctx.nzDropdownMenu)("nzVisible", ctx.nzVisible);
    }
  },
  dependencies: [NzDropDownModule, NzDropDownDirective],
  encapsulation: 2,
  changeDetection: 0
});
var NzFilterTriggerComponent = _NzFilterTriggerComponent;
__decorate([WithConfig(), InputBoolean()], NzFilterTriggerComponent.prototype, "nzBackdrop", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzFilterTriggerComponent, [{
    type: Component,
    args: [{
      selector: "nz-filter-trigger",
      exportAs: `nzFilterTrigger`,
      changeDetection: ChangeDetectionStrategy.OnPush,
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <span
      nz-dropdown
      class="ant-table-filter-trigger"
      nzTrigger="click"
      nzPlacement="bottomRight"
      [nzBackdrop]="nzBackdrop"
      [nzClickHide]="false"
      [nzDropdownMenu]="nzDropdownMenu"
      [class.active]="nzActive"
      [class.ant-table-filter-open]="nzVisible"
      [nzVisible]="nzVisible"
      (nzVisibleChange)="onVisibleChange($event)"
    >
      <ng-content></ng-content>
    </span>
  `,
      providers: [NzDestroyService],
      imports: [NzDropDownModule],
      standalone: true
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzDestroyService
  }], {
    nzActive: [{
      type: Input
    }],
    nzDropdownMenu: [{
      type: Input
    }],
    nzVisible: [{
      type: Input
    }],
    nzBackdrop: [{
      type: Input
    }],
    nzVisibleChange: [{
      type: Output
    }],
    nzDropdown: [{
      type: ViewChild,
      args: [NzDropDownDirective, {
        static: true,
        read: ElementRef
      }]
    }]
  });
})();
var _NzTableFilterComponent = class _NzTableFilterComponent {
  trackByValue(_, item) {
    return item.value;
  }
  check(filter2) {
    if (this.filterMultiple) {
      this.listOfParsedFilter = this.listOfParsedFilter.map((item) => {
        if (item === filter2) {
          return __spreadProps(__spreadValues({}, item), {
            checked: !filter2.checked
          });
        } else {
          return item;
        }
      });
      filter2.checked = !filter2.checked;
    } else {
      this.listOfParsedFilter = this.listOfParsedFilter.map((item) => __spreadProps(__spreadValues({}, item), {
        checked: item === filter2
      }));
    }
    this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
  }
  confirm() {
    this.isVisible = false;
    this.emitFilterData();
  }
  reset() {
    this.isVisible = false;
    this.listOfParsedFilter = this.parseListOfFilter(this.listOfFilter, true);
    this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
    this.emitFilterData();
  }
  onVisibleChange(value) {
    this.isVisible = value;
    if (!value) {
      this.emitFilterData();
    } else {
      this.listOfChecked = this.listOfParsedFilter.filter((item) => item.checked).map((item) => item.value);
    }
  }
  emitFilterData() {
    const listOfChecked = this.listOfParsedFilter.filter((item) => item.checked).map((item) => item.value);
    if (!arraysEqual(this.listOfChecked, listOfChecked)) {
      if (this.filterMultiple) {
        this.filterChange.emit(listOfChecked);
      } else {
        this.filterChange.emit(listOfChecked.length > 0 ? listOfChecked[0] : null);
      }
    }
  }
  parseListOfFilter(listOfFilter, reset) {
    return listOfFilter.map((item) => {
      const checked = reset ? false : !!item.byDefault;
      return {
        text: item.text,
        value: item.value,
        checked
      };
    });
  }
  getCheckedStatus(listOfParsedFilter) {
    return listOfParsedFilter.some((item) => item.checked);
  }
  constructor(cdr, i18n) {
    this.cdr = cdr;
    this.i18n = i18n;
    this.contentTemplate = null;
    this.customFilter = false;
    this.extraTemplate = null;
    this.filterMultiple = true;
    this.listOfFilter = [];
    this.filterChange = new EventEmitter();
    this.destroy$ = new Subject();
    this.isChecked = false;
    this.isVisible = false;
    this.listOfParsedFilter = [];
    this.listOfChecked = [];
  }
  ngOnInit() {
    this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.locale = this.i18n.getLocaleData("Table");
      this.cdr.markForCheck();
    });
  }
  ngOnChanges(changes) {
    const {
      listOfFilter
    } = changes;
    if (listOfFilter && this.listOfFilter && this.listOfFilter.length) {
      this.listOfParsedFilter = this.parseListOfFilter(this.listOfFilter);
      this.isChecked = this.getCheckedStatus(this.listOfParsedFilter);
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
};
_NzTableFilterComponent.\u0275fac = function NzTableFilterComponent_Factory(t) {
  return new (t || _NzTableFilterComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzI18nService));
};
_NzTableFilterComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableFilterComponent,
  selectors: [["nz-table-filter"]],
  hostAttrs: [1, "ant-table-filter-column"],
  inputs: {
    contentTemplate: "contentTemplate",
    customFilter: "customFilter",
    extraTemplate: "extraTemplate",
    filterMultiple: "filterMultiple",
    listOfFilter: "listOfFilter"
  },
  outputs: {
    filterChange: "filterChange"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 3,
  vars: 3,
  consts: [["filterMenu", "nzDropdownMenu"], [1, "ant-table-column-title"], [3, "ngTemplateOutlet"], [4, "ngIf", "ngIfElse"], [3, "nzVisibleChange", "nzVisible", "nzActive", "nzDropdownMenu"], ["nz-icon", "", "nzType", "filter", "nzTheme", "fill"], [1, "ant-table-filter-dropdown"], ["nz-menu", ""], ["nz-menu-item", "", 3, "nzSelected", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "ant-table-filter-dropdown-btns"], ["nz-button", "", "nzType", "link", "nzSize", "small", 3, "click", "disabled"], ["nz-button", "", "nzType", "primary", "nzSize", "small", 3, "click"], ["nz-menu-item", "", 3, "click", "nzSelected"], ["nz-radio", "", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["nz-checkbox", "", 3, "ngModel", "ngModelChange", 4, "ngIf"], ["nz-radio", "", 3, "ngModelChange", "ngModel"], ["nz-checkbox", "", 3, "ngModelChange", "ngModel"]],
  template: function NzTableFilterComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "span", 1);
      \u0275\u0275template(1, NzTableFilterComponent_ng_template_1_Template, 0, 0, "ng-template", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275template(2, NzTableFilterComponent_ng_container_2_Template, 13, 8, "ng-container", 3);
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("ngTemplateOutlet", ctx.contentTemplate);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.customFilter)("ngIfElse", ctx.extraTemplate);
    }
  },
  dependencies: [NgTemplateOutlet, NgIf, NzFilterTriggerComponent, NzIconModule, NzIconDirective, NzDropDownModule, NzMenuDirective, NzMenuItemComponent, NzDropdownMenuComponent, NgForOf, NzRadioComponent, NzCheckboxModule, NzCheckboxComponent, FormsModule, NgControlStatus, NgModel, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableFilterComponent = _NzTableFilterComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableFilterComponent, [{
    type: Component,
    args: [{
      selector: "nz-table-filter",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <span class="ant-table-column-title">
      <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    </span>
    <ng-container *ngIf="!customFilter; else extraTemplate">
      <nz-filter-trigger
        [nzVisible]="isVisible"
        [nzActive]="isChecked"
        [nzDropdownMenu]="filterMenu"
        (nzVisibleChange)="onVisibleChange($event)"
      >
        <span nz-icon nzType="filter" nzTheme="fill"></span>
      </nz-filter-trigger>
      <nz-dropdown-menu #filterMenu="nzDropdownMenu">
        <div class="ant-table-filter-dropdown">
          <ul nz-menu>
            <li
              nz-menu-item
              [nzSelected]="f.checked"
              *ngFor="let f of listOfParsedFilter; trackBy: trackByValue"
              (click)="check(f)"
            >
              <label nz-radio *ngIf="!filterMultiple" [ngModel]="f.checked" (ngModelChange)="check(f)"></label>
              <label nz-checkbox *ngIf="filterMultiple" [ngModel]="f.checked" (ngModelChange)="check(f)"></label>
              <span>{{ f.text }}</span>
            </li>
          </ul>
          <div class="ant-table-filter-dropdown-btns">
            <button nz-button nzType="link" nzSize="small" (click)="reset()" [disabled]="!isChecked">
              {{ locale.filterReset }}
            </button>
            <button nz-button nzType="primary" nzSize="small" (click)="confirm()">{{ locale.filterConfirm }}</button>
          </div>
        </div>
      </nz-dropdown-menu>
    </ng-container>
  `,
      host: {
        class: "ant-table-filter-column"
      },
      imports: [NgTemplateOutlet, NgIf, NzFilterTriggerComponent, NzIconModule, NzDropDownModule, NgForOf, NzRadioComponent, NzCheckboxModule, FormsModule, NzButtonModule],
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: NzI18nService
  }], {
    contentTemplate: [{
      type: Input
    }],
    customFilter: [{
      type: Input
    }],
    extraTemplate: [{
      type: Input
    }],
    filterMultiple: [{
      type: Input
    }],
    listOfFilter: [{
      type: Input
    }],
    filterChange: [{
      type: Output
    }]
  });
})();
var _NzRowExpandButtonDirective = class _NzRowExpandButtonDirective {
  constructor() {
    this.expand = false;
    this.spaceMode = false;
    this.expandChange = new EventEmitter();
  }
  onHostClick() {
    if (!this.spaceMode) {
      this.expand = !this.expand;
      this.expandChange.next(this.expand);
    }
  }
};
_NzRowExpandButtonDirective.\u0275fac = function NzRowExpandButtonDirective_Factory(t) {
  return new (t || _NzRowExpandButtonDirective)();
};
_NzRowExpandButtonDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzRowExpandButtonDirective,
  selectors: [["button", "nz-row-expand-button", ""]],
  hostAttrs: [1, "ant-table-row-expand-icon"],
  hostVars: 7,
  hostBindings: function NzRowExpandButtonDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function NzRowExpandButtonDirective_click_HostBindingHandler() {
        return ctx.onHostClick();
      });
    }
    if (rf & 2) {
      \u0275\u0275hostProperty("type", "button");
      \u0275\u0275classProp("ant-table-row-expand-icon-expanded", !ctx.spaceMode && ctx.expand === true)("ant-table-row-expand-icon-collapsed", !ctx.spaceMode && ctx.expand === false)("ant-table-row-expand-icon-spaced", ctx.spaceMode);
    }
  },
  inputs: {
    expand: "expand",
    spaceMode: "spaceMode"
  },
  outputs: {
    expandChange: "expandChange"
  },
  standalone: true
});
var NzRowExpandButtonDirective = _NzRowExpandButtonDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRowExpandButtonDirective, [{
    type: Directive,
    args: [{
      selector: "button[nz-row-expand-button]",
      host: {
        class: "ant-table-row-expand-icon",
        "[type]": `'button'`,
        "[class.ant-table-row-expand-icon-expanded]": `!spaceMode && expand === true`,
        "[class.ant-table-row-expand-icon-collapsed]": `!spaceMode && expand === false`,
        "[class.ant-table-row-expand-icon-spaced]": "spaceMode",
        "(click)": "onHostClick()"
      },
      standalone: true
    }]
  }], () => [], {
    expand: [{
      type: Input
    }],
    spaceMode: [{
      type: Input
    }],
    expandChange: [{
      type: Output
    }]
  });
})();
var _NzRowIndentDirective = class _NzRowIndentDirective {
  constructor() {
    this.indentSize = 0;
  }
};
_NzRowIndentDirective.\u0275fac = function NzRowIndentDirective_Factory(t) {
  return new (t || _NzRowIndentDirective)();
};
_NzRowIndentDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzRowIndentDirective,
  selectors: [["nz-row-indent"]],
  hostAttrs: [1, "ant-table-row-indent"],
  hostVars: 2,
  hostBindings: function NzRowIndentDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("padding-left", ctx.indentSize, "px");
    }
  },
  inputs: {
    indentSize: "indentSize"
  },
  standalone: true
});
var NzRowIndentDirective = _NzRowIndentDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRowIndentDirective, [{
    type: Directive,
    args: [{
      selector: "nz-row-indent",
      host: {
        class: "ant-table-row-indent",
        "[style.padding-left.px]": "indentSize"
      },
      standalone: true
    }]
  }], () => [], {
    indentSize: [{
      type: Input
    }]
  });
})();
var _NzTableSelectionComponent = class _NzTableSelectionComponent {
  constructor() {
    this.listOfSelections = [];
    this.checked = false;
    this.disabled = false;
    this.indeterminate = false;
    this.label = null;
    this.showCheckbox = false;
    this.showRowSelection = false;
    this.checkedChange = new EventEmitter();
  }
  onCheckedChange(checked) {
    this.checked = checked;
    this.checkedChange.emit(checked);
  }
};
_NzTableSelectionComponent.\u0275fac = function NzTableSelectionComponent_Factory(t) {
  return new (t || _NzTableSelectionComponent)();
};
_NzTableSelectionComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableSelectionComponent,
  selectors: [["nz-table-selection"]],
  hostAttrs: [1, "ant-table-selection"],
  inputs: {
    listOfSelections: "listOfSelections",
    checked: "checked",
    disabled: "disabled",
    indeterminate: "indeterminate",
    label: "label",
    showCheckbox: "showCheckbox",
    showRowSelection: "showRowSelection"
  },
  outputs: {
    checkedChange: "checkedChange"
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 2,
  consts: [["selectionMenu", "nzDropdownMenu"], ["nz-checkbox", "", 3, "ant-table-selection-select-all-custom", "ngModel", "nzDisabled", "nzIndeterminate", "ngModelChange", 4, "ngIf"], ["class", "ant-table-selection-extra", 4, "ngIf"], ["nz-checkbox", "", 3, "ngModelChange", "ngModel", "nzDisabled", "nzIndeterminate"], [1, "ant-table-selection-extra"], ["nz-dropdown", "", "nzPlacement", "bottomLeft", 1, "ant-table-selection-down", 3, "nzDropdownMenu"], ["nz-icon", "", "nzType", "down"], ["nz-menu", "", 1, "ant-table-selection-menu"], ["nz-menu-item", "", 3, "click", 4, "ngFor", "ngForOf"], ["nz-menu-item", "", 3, "click"]],
  template: function NzTableSelectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzTableSelectionComponent_label_0_Template, 1, 6, "label", 1)(1, NzTableSelectionComponent_div_1_Template, 7, 2, "div", 2);
    }
    if (rf & 2) {
      \u0275\u0275property("ngIf", ctx.showCheckbox);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.showRowSelection);
    }
  },
  dependencies: [NgIf, FormsModule, NgControlStatus, NgModel, NzCheckboxModule, NzCheckboxComponent, NzDropDownModule, NzMenuDirective, NzMenuItemComponent, NzDropDownDirective, NzDropdownMenuComponent, NzIconModule, NzIconDirective, NgForOf],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableSelectionComponent = _NzTableSelectionComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableSelectionComponent, [{
    type: Component,
    args: [{
      selector: "nz-table-selection",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <label
      *ngIf="showCheckbox"
      nz-checkbox
      [class.ant-table-selection-select-all-custom]="showRowSelection"
      [ngModel]="checked"
      [nzDisabled]="disabled"
      [nzIndeterminate]="indeterminate"
      [attr.aria-label]="label"
      (ngModelChange)="onCheckedChange($event)"
    ></label>
    <div class="ant-table-selection-extra" *ngIf="showRowSelection">
      <span nz-dropdown class="ant-table-selection-down" nzPlacement="bottomLeft" [nzDropdownMenu]="selectionMenu">
        <span nz-icon nzType="down"></span>
      </span>
      <nz-dropdown-menu #selectionMenu="nzDropdownMenu">
        <ul nz-menu class="ant-table-selection-menu">
          <li nz-menu-item *ngFor="let selection of listOfSelections" (click)="selection.onSelect()">
            {{ selection.text }}
          </li>
        </ul>
      </nz-dropdown-menu>
    </div>
  `,
      host: {
        class: "ant-table-selection"
      },
      imports: [NgIf, FormsModule, NzCheckboxModule, NzDropDownModule, NzIconModule, NgForOf],
      standalone: true
    }]
  }], () => [], {
    listOfSelections: [{
      type: Input
    }],
    checked: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    indeterminate: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    showCheckbox: [{
      type: Input
    }],
    showRowSelection: [{
      type: Input
    }],
    checkedChange: [{
      type: Output
    }]
  });
})();
var _NzTableSortersComponent = class _NzTableSortersComponent {
  constructor() {
    this.sortDirections = ["ascend", "descend", null];
    this.sortOrder = null;
    this.contentTemplate = null;
    this.isUp = false;
    this.isDown = false;
  }
  ngOnChanges(changes) {
    const {
      sortDirections
    } = changes;
    if (sortDirections) {
      this.isUp = this.sortDirections.indexOf("ascend") !== -1;
      this.isDown = this.sortDirections.indexOf("descend") !== -1;
    }
  }
};
_NzTableSortersComponent.\u0275fac = function NzTableSortersComponent_Factory(t) {
  return new (t || _NzTableSortersComponent)();
};
_NzTableSortersComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableSortersComponent,
  selectors: [["nz-table-sorters"]],
  hostAttrs: [1, "ant-table-column-sorters"],
  inputs: {
    sortDirections: "sortDirections",
    sortOrder: "sortOrder",
    contentTemplate: "contentTemplate"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 6,
  vars: 5,
  consts: [[1, "ant-table-column-title"], [3, "ngTemplateOutlet"], [1, "ant-table-column-sorter"], [1, "ant-table-column-sorter-inner"], ["nz-icon", "", "nzType", "caret-up", "class", "ant-table-column-sorter-up", 3, "active", 4, "ngIf"], ["nz-icon", "", "nzType", "caret-down", "class", "ant-table-column-sorter-down", 3, "active", 4, "ngIf"], ["nz-icon", "", "nzType", "caret-up", 1, "ant-table-column-sorter-up"], ["nz-icon", "", "nzType", "caret-down", 1, "ant-table-column-sorter-down"]],
  template: function NzTableSortersComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "span", 0);
      \u0275\u0275template(1, NzTableSortersComponent_ng_template_1_Template, 0, 0, "ng-template", 1);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(2, "span", 2)(3, "span", 3);
      \u0275\u0275template(4, NzTableSortersComponent_span_4_Template, 1, 2, "span", 4)(5, NzTableSortersComponent_span_5_Template, 1, 2, "span", 5);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("ngTemplateOutlet", ctx.contentTemplate);
      \u0275\u0275advance();
      \u0275\u0275classProp("ant-table-column-sorter-full", ctx.isDown && ctx.isUp);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", ctx.isUp);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.isDown);
    }
  },
  dependencies: [NzIconModule, NzIconDirective, NgTemplateOutlet, NgIf],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableSortersComponent = _NzTableSortersComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableSortersComponent, [{
    type: Component,
    args: [{
      selector: "nz-table-sorters",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <span class="ant-table-column-title"><ng-template [ngTemplateOutlet]="contentTemplate"></ng-template></span>
    <span class="ant-table-column-sorter" [class.ant-table-column-sorter-full]="isDown && isUp">
      <span class="ant-table-column-sorter-inner">
        <span
          nz-icon
          nzType="caret-up"
          *ngIf="isUp"
          class="ant-table-column-sorter-up"
          [class.active]="sortOrder === 'ascend'"
        ></span>
        <span
          nz-icon
          nzType="caret-down"
          *ngIf="isDown"
          class="ant-table-column-sorter-down"
          [class.active]="sortOrder === 'descend'"
        ></span>
      </span>
    </span>
  `,
      host: {
        class: "ant-table-column-sorters"
      },
      imports: [NzIconModule, NgTemplateOutlet, NgIf],
      standalone: true
    }]
  }], () => [], {
    sortDirections: [{
      type: Input
    }],
    sortOrder: [{
      type: Input
    }],
    contentTemplate: [{
      type: Input
    }]
  });
})();
var _NzCellFixedDirective = class _NzCellFixedDirective {
  setAutoLeftWidth(autoLeft) {
    this.renderer.setStyle(this.elementRef.nativeElement, "left", autoLeft);
  }
  setAutoRightWidth(autoRight) {
    this.renderer.setStyle(this.elementRef.nativeElement, "right", autoRight);
  }
  setIsFirstRight(isFirstRight) {
    this.setFixClass(isFirstRight, "ant-table-cell-fix-right-first");
  }
  setIsLastLeft(isLastLeft) {
    this.setFixClass(isLastLeft, "ant-table-cell-fix-left-last");
  }
  setFixClass(flag, className) {
    this.renderer.removeClass(this.elementRef.nativeElement, className);
    if (flag) {
      this.renderer.addClass(this.elementRef.nativeElement, className);
    }
  }
  constructor(renderer, elementRef) {
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.nzRight = false;
    this.nzLeft = false;
    this.colspan = null;
    this.colSpan = null;
    this.changes$ = new Subject();
    this.isAutoLeft = false;
    this.isAutoRight = false;
    this.isFixedLeft = false;
    this.isFixedRight = false;
    this.isFixed = false;
  }
  ngOnChanges() {
    this.setIsFirstRight(false);
    this.setIsLastLeft(false);
    this.isAutoLeft = this.nzLeft === "" || this.nzLeft === true;
    this.isAutoRight = this.nzRight === "" || this.nzRight === true;
    this.isFixedLeft = this.nzLeft !== false;
    this.isFixedRight = this.nzRight !== false;
    this.isFixed = this.isFixedLeft || this.isFixedRight;
    const validatePx = (value) => {
      if (typeof value === "string" && value !== "") {
        return value;
      } else {
        return null;
      }
    };
    this.setAutoLeftWidth(validatePx(this.nzLeft));
    this.setAutoRightWidth(validatePx(this.nzRight));
    this.changes$.next();
  }
};
_NzCellFixedDirective.\u0275fac = function NzCellFixedDirective_Factory(t) {
  return new (t || _NzCellFixedDirective)(\u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef));
};
_NzCellFixedDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzCellFixedDirective,
  selectors: [["td", "nzRight", ""], ["th", "nzRight", ""], ["td", "nzLeft", ""], ["th", "nzLeft", ""]],
  hostVars: 6,
  hostBindings: function NzCellFixedDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("position", ctx.isFixed ? "sticky" : null);
      \u0275\u0275classProp("ant-table-cell-fix-right", ctx.isFixedRight)("ant-table-cell-fix-left", ctx.isFixedLeft);
    }
  },
  inputs: {
    nzRight: "nzRight",
    nzLeft: "nzLeft",
    colspan: "colspan",
    colSpan: "colSpan"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NzCellFixedDirective = _NzCellFixedDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCellFixedDirective, [{
    type: Directive,
    args: [{
      selector: "td[nzRight],th[nzRight],td[nzLeft],th[nzLeft]",
      host: {
        "[class.ant-table-cell-fix-right]": `isFixedRight`,
        "[class.ant-table-cell-fix-left]": `isFixedLeft`,
        "[style.position]": `isFixed? 'sticky' : null`
      },
      standalone: true
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }], {
    nzRight: [{
      type: Input
    }],
    nzLeft: [{
      type: Input
    }],
    colspan: [{
      type: Input
    }],
    colSpan: [{
      type: Input
    }]
  });
})();
var _NzTableStyleService = class _NzTableStyleService {
  setTheadTemplate(template) {
    this.theadTemplate$.next(template);
  }
  setHasFixLeft(hasFixLeft) {
    this.hasFixLeft$.next(hasFixLeft);
  }
  setHasFixRight(hasFixRight) {
    this.hasFixRight$.next(hasFixRight);
  }
  setTableWidthConfig(widthConfig) {
    this.tableWidthConfigPx$.next(widthConfig);
  }
  setListOfTh(listOfTh) {
    let columnCount = 0;
    listOfTh.forEach((th) => {
      columnCount += th.colspan && +th.colspan || th.colSpan && +th.colSpan || 1;
    });
    const listOfThPx = listOfTh.map((item) => item.nzWidth);
    this.columnCount$.next(columnCount);
    this.listOfThWidthConfigPx$.next(listOfThPx);
  }
  setListOfMeasureColumn(listOfTh) {
    const listOfKeys = [];
    listOfTh.forEach((th) => {
      const length = th.colspan && +th.colspan || th.colSpan && +th.colSpan || 1;
      for (let i = 0; i < length; i++) {
        listOfKeys.push(`measure_key_${i}`);
      }
    });
    this.listOfMeasureColumn$.next(listOfKeys);
  }
  setListOfAutoWidth(listOfAutoWidth) {
    this.listOfAutoWidthPx$.next(listOfAutoWidth.map((width) => `${width}px`));
  }
  setShowEmpty(showEmpty) {
    this.showEmpty$.next(showEmpty);
  }
  setNoResult(noResult) {
    this.noResult$.next(noResult);
  }
  setScroll(scrollX, scrollY) {
    const enableAutoMeasure = !!(scrollX || scrollY);
    if (!enableAutoMeasure) {
      this.setListOfAutoWidth([]);
    }
    this.enableAutoMeasure$.next(enableAutoMeasure);
  }
  constructor() {
    this.theadTemplate$ = new ReplaySubject(1);
    this.hasFixLeft$ = new ReplaySubject(1);
    this.hasFixRight$ = new ReplaySubject(1);
    this.hostWidth$ = new ReplaySubject(1);
    this.columnCount$ = new ReplaySubject(1);
    this.showEmpty$ = new ReplaySubject(1);
    this.noResult$ = new ReplaySubject(1);
    this.listOfThWidthConfigPx$ = new BehaviorSubject([]);
    this.tableWidthConfigPx$ = new BehaviorSubject([]);
    this.manualWidthConfigPx$ = combineLatest([this.tableWidthConfigPx$, this.listOfThWidthConfigPx$]).pipe(map(([widthConfig, listOfWidth]) => widthConfig.length ? widthConfig : listOfWidth));
    this.listOfAutoWidthPx$ = new ReplaySubject(1);
    this.listOfListOfThWidthPx$ = merge(
      /** init with manual width **/
      this.manualWidthConfigPx$,
      combineLatest([this.listOfAutoWidthPx$, this.manualWidthConfigPx$]).pipe(map(([autoWidth, manualWidth]) => {
        if (autoWidth.length === manualWidth.length) {
          return autoWidth.map((width, index) => {
            if (width === "0px") {
              return manualWidth[index] || null;
            } else {
              return manualWidth[index] || width;
            }
          });
        } else {
          return manualWidth;
        }
      }))
    );
    this.listOfMeasureColumn$ = new ReplaySubject(1);
    this.listOfListOfThWidth$ = this.listOfAutoWidthPx$.pipe(map((list) => list.map((width) => parseInt(width, 10))));
    this.enableAutoMeasure$ = new ReplaySubject(1);
  }
};
_NzTableStyleService.\u0275fac = function NzTableStyleService_Factory(t) {
  return new (t || _NzTableStyleService)();
};
_NzTableStyleService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NzTableStyleService,
  factory: _NzTableStyleService.\u0275fac
});
var NzTableStyleService = _NzTableStyleService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableStyleService, [{
    type: Injectable
  }], () => [], null);
})();
var _NzTableCellDirective = class _NzTableCellDirective {
  constructor(nzTableStyleService) {
    this.isInsideTable = false;
    this.isInsideTable = !!nzTableStyleService;
  }
};
_NzTableCellDirective.\u0275fac = function NzTableCellDirective_Factory(t) {
  return new (t || _NzTableCellDirective)(\u0275\u0275directiveInject(NzTableStyleService, 8));
};
_NzTableCellDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzTableCellDirective,
  selectors: [["th", 9, "nz-disable-th", 3, "mat-cell", ""], ["td", 9, "nz-disable-td", 3, "mat-cell", ""]],
  hostVars: 2,
  hostBindings: function NzTableCellDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-cell", ctx.isInsideTable);
    }
  },
  standalone: true
});
var NzTableCellDirective = _NzTableCellDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableCellDirective, [{
    type: Directive,
    args: [{
      selector: "th:not(.nz-disable-th):not([mat-cell]), td:not(.nz-disable-td):not([mat-cell])",
      host: {
        "[class.ant-table-cell]": "isInsideTable"
      },
      standalone: true
    }]
  }], () => [{
    type: NzTableStyleService,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _NzTableDataService = class _NzTableDataService {
  updatePageSize(size) {
    this.pageSize$.next(size);
  }
  updateFrontPagination(pagination) {
    this.frontPagination$.next(pagination);
  }
  updatePageIndex(index) {
    this.pageIndex$.next(index);
  }
  updateListOfData(list) {
    this.listOfData$.next(list);
  }
  updateListOfCustomColumn(list) {
    this.listOfCustomColumn$.next(list);
  }
  constructor() {
    this.destroy$ = new Subject();
    this.pageIndex$ = new BehaviorSubject(1);
    this.frontPagination$ = new BehaviorSubject(true);
    this.pageSize$ = new BehaviorSubject(10);
    this.listOfData$ = new BehaviorSubject([]);
    this.listOfCustomColumn$ = new BehaviorSubject([]);
    this.pageIndexDistinct$ = this.pageIndex$.pipe(distinctUntilChanged());
    this.pageSizeDistinct$ = this.pageSize$.pipe(distinctUntilChanged());
    this.listOfCalcOperator$ = new BehaviorSubject([]);
    this.queryParams$ = combineLatest([this.pageIndexDistinct$, this.pageSizeDistinct$, this.listOfCalcOperator$]).pipe(debounceTime(0), skip(1), map(([pageIndex, pageSize, listOfCalc]) => ({
      pageIndex,
      pageSize,
      sort: listOfCalc.filter((item) => item.sortFn).map((item) => ({
        key: item.key,
        value: item.sortOrder
      })),
      filter: listOfCalc.filter((item) => item.filterFn).map((item) => ({
        key: item.key,
        value: item.filterValue
      }))
    })));
    this.listOfDataAfterCalc$ = combineLatest([this.listOfData$, this.listOfCalcOperator$]).pipe(map(([listOfData, listOfCalcOperator]) => {
      let listOfDataAfterCalc = [...listOfData];
      const listOfFilterOperator = listOfCalcOperator.filter((item) => {
        const {
          filterValue,
          filterFn
        } = item;
        const isReset = filterValue === null || filterValue === void 0 || Array.isArray(filterValue) && filterValue.length === 0;
        return !isReset && typeof filterFn === "function";
      });
      for (const item of listOfFilterOperator) {
        const {
          filterFn,
          filterValue
        } = item;
        listOfDataAfterCalc = listOfDataAfterCalc.filter((data) => filterFn(filterValue, data));
      }
      const listOfSortOperator = listOfCalcOperator.filter((item) => item.sortOrder !== null && typeof item.sortFn === "function").sort((a, b) => +b.sortPriority - +a.sortPriority);
      if (listOfCalcOperator.length) {
        listOfDataAfterCalc.sort((record1, record2) => {
          for (const item of listOfSortOperator) {
            const {
              sortFn,
              sortOrder
            } = item;
            if (sortFn && sortOrder) {
              const compareResult = sortFn(record1, record2, sortOrder);
              if (compareResult !== 0) {
                return sortOrder === "ascend" ? compareResult : -compareResult;
              }
            }
          }
          return 0;
        });
      }
      return listOfDataAfterCalc;
    }));
    this.listOfFrontEndCurrentPageData$ = combineLatest([this.pageIndexDistinct$, this.pageSizeDistinct$, this.listOfDataAfterCalc$]).pipe(takeUntil(this.destroy$), filter((value) => {
      const [pageIndex, pageSize, listOfData] = value;
      const maxPageIndex = Math.ceil(listOfData.length / pageSize) || 1;
      return pageIndex <= maxPageIndex;
    }), map(([pageIndex, pageSize, listOfData]) => listOfData.slice((pageIndex - 1) * pageSize, pageIndex * pageSize)));
    this.listOfCurrentPageData$ = this.frontPagination$.pipe(switchMap((pagination) => pagination ? this.listOfFrontEndCurrentPageData$ : this.listOfDataAfterCalc$));
    this.total$ = this.frontPagination$.pipe(switchMap((pagination) => pagination ? this.listOfDataAfterCalc$ : this.listOfData$), map((list) => list.length), distinctUntilChanged());
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
};
_NzTableDataService.\u0275fac = function NzTableDataService_Factory(t) {
  return new (t || _NzTableDataService)();
};
_NzTableDataService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NzTableDataService,
  factory: _NzTableDataService.\u0275fac
});
var NzTableDataService = _NzTableDataService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableDataService, [{
    type: Injectable
  }], () => [], null);
})();
var _NzCustomColumnDirective = class _NzCustomColumnDirective {
  constructor(el, renderer, nzTableDataService) {
    this.el = el;
    this.renderer = renderer;
    this.nzTableDataService = nzTableDataService;
    this.nzCellControl = null;
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    this.nzTableDataService.listOfCustomColumn$.pipe(takeUntil(this.destroy$)).subscribe((item) => {
      if (item.length) {
        item.forEach((v, i) => {
          if (v.value === this.nzCellControl) {
            if (!v.default) {
              this.renderer.setStyle(this.el.nativeElement, "display", "none");
            } else {
              this.renderer.setStyle(this.el.nativeElement, "display", "block");
            }
            this.renderer.setStyle(this.el.nativeElement, "order", i);
            if (!v?.fixWidth) {
              this.renderer.setStyle(this.el.nativeElement, "flex", `1 1 ${v.width}px`);
            } else {
              this.renderer.setStyle(this.el.nativeElement, "flex", `1 0 ${v.width}px`);
            }
          }
        });
      }
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzCustomColumnDirective.\u0275fac = function NzCustomColumnDirective_Factory(t) {
  return new (t || _NzCustomColumnDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NzTableDataService));
};
_NzCustomColumnDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzCustomColumnDirective,
  selectors: [["td", "nzCellControl", ""], ["th", "nzCellControl", ""]],
  inputs: {
    nzCellControl: "nzCellControl"
  },
  standalone: true
});
var NzCustomColumnDirective = _NzCustomColumnDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCustomColumnDirective, [{
    type: Directive,
    args: [{
      selector: "td[nzCellControl],th[nzCellControl]",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: NzTableDataService
  }], {
    nzCellControl: [{
      type: Input
    }]
  });
})();
var _NzTdAddOnComponent = class _NzTdAddOnComponent {
  constructor() {
    this.nzChecked = false;
    this.nzDisabled = false;
    this.nzIndeterminate = false;
    this.nzLabel = null;
    this.nzIndentSize = 0;
    this.nzShowExpand = false;
    this.nzShowCheckbox = false;
    this.nzExpand = false;
    this.nzExpandIcon = null;
    this.nzCheckedChange = new EventEmitter();
    this.nzExpandChange = new EventEmitter();
    this.isNzShowExpandChanged = false;
    this.isNzShowCheckboxChanged = false;
  }
  onCheckedChange(checked) {
    this.nzChecked = checked;
    this.nzCheckedChange.emit(checked);
  }
  onExpandChange(expand) {
    this.nzExpand = expand;
    this.nzExpandChange.emit(expand);
  }
  ngOnChanges(changes) {
    const isFirstChange = (value) => value && value.firstChange && value.currentValue !== void 0;
    const {
      nzExpand,
      nzChecked,
      nzShowExpand,
      nzShowCheckbox
    } = changes;
    if (nzShowExpand) {
      this.isNzShowExpandChanged = true;
    }
    if (nzShowCheckbox) {
      this.isNzShowCheckboxChanged = true;
    }
    if (isFirstChange(nzExpand) && !this.isNzShowExpandChanged) {
      this.nzShowExpand = true;
    }
    if (isFirstChange(nzChecked) && !this.isNzShowCheckboxChanged) {
      this.nzShowCheckbox = true;
    }
  }
};
_NzTdAddOnComponent.\u0275fac = function NzTdAddOnComponent_Factory(t) {
  return new (t || _NzTdAddOnComponent)();
};
_NzTdAddOnComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTdAddOnComponent,
  selectors: [["td", "nzChecked", ""], ["td", "nzDisabled", ""], ["td", "nzIndeterminate", ""], ["td", "nzIndentSize", ""], ["td", "nzExpand", ""], ["td", "nzShowExpand", ""], ["td", "nzShowCheckbox", ""]],
  hostVars: 4,
  hostBindings: function NzTdAddOnComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-cell-with-append", ctx.nzShowExpand || ctx.nzIndentSize > 0)("ant-table-selection-column", ctx.nzShowCheckbox);
    }
  },
  inputs: {
    nzChecked: "nzChecked",
    nzDisabled: "nzDisabled",
    nzIndeterminate: "nzIndeterminate",
    nzLabel: "nzLabel",
    nzIndentSize: "nzIndentSize",
    nzShowExpand: "nzShowExpand",
    nzShowCheckbox: "nzShowCheckbox",
    nzExpand: "nzExpand",
    nzExpandIcon: "nzExpandIcon"
  },
  outputs: {
    nzCheckedChange: "nzCheckedChange",
    nzExpandChange: "nzExpandChange"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  attrs: _c14,
  ngContentSelectors: _c07,
  decls: 3,
  vars: 2,
  consts: [["rowExpand", ""], [4, "ngIf"], ["nz-checkbox", "", 3, "nzDisabled", "ngModel", "nzIndeterminate", "ngModelChange", 4, "ngIf"], [3, "indentSize"], [4, "ngIf", "ngIfElse"], ["nz-row-expand-button", "", 3, "expandChange", "expand", "spaceMode"], [3, "ngTemplateOutlet"], ["nz-checkbox", "", 3, "ngModelChange", "nzDisabled", "ngModel", "nzIndeterminate"]],
  template: function NzTdAddOnComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzTdAddOnComponent_ng_container_0_Template, 5, 3, "ng-container", 1)(1, NzTdAddOnComponent_label_1_Template, 1, 4, "label", 2);
      \u0275\u0275projection(2);
    }
    if (rf & 2) {
      \u0275\u0275property("ngIf", ctx.nzShowExpand || ctx.nzIndentSize > 0);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.nzShowCheckbox);
    }
  },
  dependencies: [NzRowIndentDirective, NzRowExpandButtonDirective, NgIf, NgTemplateOutlet, NzCheckboxModule, NzCheckboxComponent, FormsModule, NgControlStatus, NgModel],
  encapsulation: 2,
  changeDetection: 0
});
var NzTdAddOnComponent = _NzTdAddOnComponent;
__decorate([InputBoolean()], NzTdAddOnComponent.prototype, "nzShowExpand", void 0);
__decorate([InputBoolean()], NzTdAddOnComponent.prototype, "nzShowCheckbox", void 0);
__decorate([InputBoolean()], NzTdAddOnComponent.prototype, "nzExpand", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTdAddOnComponent, [{
    type: Component,
    args: [{
      selector: "td[nzChecked], td[nzDisabled], td[nzIndeterminate], td[nzIndentSize], td[nzExpand], td[nzShowExpand], td[nzShowCheckbox]",
      changeDetection: ChangeDetectionStrategy.OnPush,
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <ng-container *ngIf="nzShowExpand || nzIndentSize > 0">
      <nz-row-indent [indentSize]="nzIndentSize"></nz-row-indent>
      <ng-template #rowExpand>
        <button
          nz-row-expand-button
          [expand]="nzExpand"
          (expandChange)="onExpandChange($event)"
          [spaceMode]="!nzShowExpand"
        ></button>
      </ng-template>
      <ng-container *ngIf="nzExpandIcon; else rowExpand">
        <ng-template [ngTemplateOutlet]="nzExpandIcon"></ng-template>
      </ng-container>
    </ng-container>
    <label
      nz-checkbox
      *ngIf="nzShowCheckbox"
      [nzDisabled]="nzDisabled"
      [ngModel]="nzChecked"
      [nzIndeterminate]="nzIndeterminate"
      [attr.aria-label]="nzLabel"
      (ngModelChange)="onCheckedChange($event)"
    ></label>
    <ng-content></ng-content>
  `,
      host: {
        "[class.ant-table-cell-with-append]": `nzShowExpand || nzIndentSize > 0`,
        "[class.ant-table-selection-column]": `nzShowCheckbox`
      },
      imports: [NzRowIndentDirective, NzRowExpandButtonDirective, NgIf, NgTemplateOutlet, NzCheckboxModule, FormsModule],
      standalone: true
    }]
  }], null, {
    nzChecked: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzIndeterminate: [{
      type: Input
    }],
    nzLabel: [{
      type: Input
    }],
    nzIndentSize: [{
      type: Input
    }],
    nzShowExpand: [{
      type: Input
    }],
    nzShowCheckbox: [{
      type: Input
    }],
    nzExpand: [{
      type: Input
    }],
    nzExpandIcon: [{
      type: Input
    }],
    nzCheckedChange: [{
      type: Output
    }],
    nzExpandChange: [{
      type: Output
    }]
  });
})();
var _NzThAddOnComponent = class _NzThAddOnComponent {
  getNextSortDirection(sortDirections, current) {
    const index = sortDirections.indexOf(current);
    if (index === sortDirections.length - 1) {
      return sortDirections[0];
    } else {
      return sortDirections[index + 1];
    }
  }
  setSortOrder(order) {
    this.sortOrderChange$.next(order);
  }
  clearSortOrder() {
    if (this.sortOrder !== null) {
      this.setSortOrder(null);
    }
  }
  onFilterValueChange(value) {
    this.nzFilterChange.emit(value);
    this.nzFilterValue = value;
    this.updateCalcOperator();
  }
  updateCalcOperator() {
    this.calcOperatorChange$.next();
  }
  constructor(host, cdr, ngZone, destroy$) {
    this.host = host;
    this.cdr = cdr;
    this.ngZone = ngZone;
    this.destroy$ = destroy$;
    this.manualClickOrder$ = new Subject();
    this.calcOperatorChange$ = new Subject();
    this.nzFilterValue = null;
    this.sortOrder = null;
    this.sortDirections = ["ascend", "descend", null];
    this.sortOrderChange$ = new Subject();
    this.isNzShowSortChanged = false;
    this.isNzShowFilterChanged = false;
    this.nzFilterMultiple = true;
    this.nzSortOrder = null;
    this.nzSortPriority = false;
    this.nzSortDirections = ["ascend", "descend", null];
    this.nzFilters = [];
    this.nzSortFn = null;
    this.nzFilterFn = null;
    this.nzShowSort = false;
    this.nzShowFilter = false;
    this.nzCustomFilter = false;
    this.nzCheckedChange = new EventEmitter();
    this.nzSortOrderChange = new EventEmitter();
    this.nzFilterChange = new EventEmitter();
  }
  ngOnInit() {
    this.ngZone.runOutsideAngular(() => fromEvent(this.host.nativeElement, "click").pipe(filter(() => this.nzShowSort), takeUntil(this.destroy$)).subscribe(() => {
      const nextOrder = this.getNextSortDirection(this.sortDirections, this.sortOrder);
      this.ngZone.run(() => {
        this.setSortOrder(nextOrder);
        this.manualClickOrder$.next(this);
      });
    }));
    this.sortOrderChange$.pipe(takeUntil(this.destroy$)).subscribe((order) => {
      if (this.sortOrder !== order) {
        this.sortOrder = order;
        this.nzSortOrderChange.emit(order);
      }
      this.updateCalcOperator();
      this.cdr.markForCheck();
    });
  }
  ngOnChanges(changes) {
    const {
      nzSortDirections,
      nzFilters,
      nzSortOrder,
      nzSortFn,
      nzFilterFn,
      nzSortPriority,
      nzFilterMultiple,
      nzShowSort,
      nzShowFilter
    } = changes;
    if (nzSortDirections) {
      if (this.nzSortDirections && this.nzSortDirections.length) {
        this.sortDirections = this.nzSortDirections;
      }
    }
    if (nzSortOrder) {
      this.sortOrder = this.nzSortOrder;
      this.setSortOrder(this.nzSortOrder);
    }
    if (nzShowSort) {
      this.isNzShowSortChanged = true;
    }
    if (nzShowFilter) {
      this.isNzShowFilterChanged = true;
    }
    const isFirstChange = (value) => value && value.firstChange && value.currentValue !== void 0;
    if ((isFirstChange(nzSortOrder) || isFirstChange(nzSortFn)) && !this.isNzShowSortChanged) {
      this.nzShowSort = true;
    }
    if (isFirstChange(nzFilters) && !this.isNzShowFilterChanged) {
      this.nzShowFilter = true;
    }
    if ((nzFilters || nzFilterMultiple) && this.nzShowFilter) {
      const listOfValue = this.nzFilters.filter((item) => item.byDefault).map((item) => item.value);
      this.nzFilterValue = this.nzFilterMultiple ? listOfValue : listOfValue[0] || null;
    }
    if (nzSortFn || nzFilterFn || nzSortPriority || nzFilters) {
      this.updateCalcOperator();
    }
  }
};
_NzThAddOnComponent.\u0275fac = function NzThAddOnComponent_Factory(t) {
  return new (t || _NzThAddOnComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(NzDestroyService));
};
_NzThAddOnComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzThAddOnComponent,
  selectors: [["th", "nzColumnKey", ""], ["th", "nzSortFn", ""], ["th", "nzSortOrder", ""], ["th", "nzFilters", ""], ["th", "nzShowSort", ""], ["th", "nzShowFilter", ""], ["th", "nzCustomFilter", ""]],
  hostVars: 4,
  hostBindings: function NzThAddOnComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-column-has-sorters", ctx.nzShowSort)("ant-table-column-sort", ctx.sortOrder === "descend" || ctx.sortOrder === "ascend");
    }
  },
  inputs: {
    nzColumnKey: "nzColumnKey",
    nzFilterMultiple: "nzFilterMultiple",
    nzSortOrder: "nzSortOrder",
    nzSortPriority: "nzSortPriority",
    nzSortDirections: "nzSortDirections",
    nzFilters: "nzFilters",
    nzSortFn: "nzSortFn",
    nzFilterFn: "nzFilterFn",
    nzShowSort: "nzShowSort",
    nzShowFilter: "nzShowFilter",
    nzCustomFilter: "nzCustomFilter"
  },
  outputs: {
    nzCheckedChange: "nzCheckedChange",
    nzSortOrderChange: "nzSortOrderChange",
    nzFilterChange: "nzFilterChange"
  },
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  attrs: _c24,
  ngContentSelectors: _c42,
  decls: 9,
  vars: 2,
  consts: [["notFilterTemplate", ""], ["extraTemplate", ""], ["sortTemplate", ""], ["contentTemplate", ""], [3, "contentTemplate", "extraTemplate", "customFilter", "filterMultiple", "listOfFilter", "filterChange", 4, "ngIf", "ngIfElse"], [3, "filterChange", "contentTemplate", "extraTemplate", "customFilter", "filterMultiple", "listOfFilter"], [3, "ngTemplateOutlet"], [3, "sortOrder", "sortDirections", "contentTemplate"]],
  template: function NzThAddOnComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef(_c32);
      \u0275\u0275template(0, NzThAddOnComponent_nz_table_filter_0_Template, 1, 5, "nz-table-filter", 4)(1, NzThAddOnComponent_ng_template_1_Template, 1, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(3, NzThAddOnComponent_ng_template_3_Template, 2, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(5, NzThAddOnComponent_ng_template_5_Template, 1, 3, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(7, NzThAddOnComponent_ng_template_7_Template, 1, 0, "ng-template", null, 3, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      const notFilterTemplate_r3 = \u0275\u0275reference(2);
      \u0275\u0275property("ngIf", ctx.nzShowFilter || ctx.nzCustomFilter)("ngIfElse", notFilterTemplate_r3);
    }
  },
  dependencies: [NzTableFilterComponent, NgIf, NgTemplateOutlet, NzTableSortersComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzThAddOnComponent = _NzThAddOnComponent;
__decorate([InputBoolean()], NzThAddOnComponent.prototype, "nzShowSort", void 0);
__decorate([InputBoolean()], NzThAddOnComponent.prototype, "nzShowFilter", void 0);
__decorate([InputBoolean()], NzThAddOnComponent.prototype, "nzCustomFilter", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzThAddOnComponent, [{
    type: Component,
    args: [{
      selector: "th[nzColumnKey], th[nzSortFn], th[nzSortOrder], th[nzFilters], th[nzShowSort], th[nzShowFilter], th[nzCustomFilter]",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <nz-table-filter
      *ngIf="nzShowFilter || nzCustomFilter; else notFilterTemplate"
      [contentTemplate]="notFilterTemplate"
      [extraTemplate]="extraTemplate"
      [customFilter]="nzCustomFilter"
      [filterMultiple]="nzFilterMultiple"
      [listOfFilter]="nzFilters"
      (filterChange)="onFilterValueChange($event)"
    ></nz-table-filter>
    <ng-template #notFilterTemplate>
      <ng-template [ngTemplateOutlet]="nzShowSort ? sortTemplate : contentTemplate"></ng-template>
    </ng-template>
    <ng-template #extraTemplate>
      <ng-content select="[nz-th-extra]"></ng-content>
      <ng-content select="nz-filter-trigger"></ng-content>
    </ng-template>
    <ng-template #sortTemplate>
      <nz-table-sorters
        [sortOrder]="sortOrder"
        [sortDirections]="sortDirections"
        [contentTemplate]="contentTemplate"
      ></nz-table-sorters>
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
  `,
      host: {
        "[class.ant-table-column-has-sorters]": "nzShowSort",
        "[class.ant-table-column-sort]": `sortOrder === 'descend' || sortOrder === 'ascend'`
      },
      providers: [NzDestroyService],
      imports: [NzTableFilterComponent, NgIf, NgTemplateOutlet, NzTableSortersComponent],
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: NgZone
  }, {
    type: NzDestroyService
  }], {
    nzColumnKey: [{
      type: Input
    }],
    nzFilterMultiple: [{
      type: Input
    }],
    nzSortOrder: [{
      type: Input
    }],
    nzSortPriority: [{
      type: Input
    }],
    nzSortDirections: [{
      type: Input
    }],
    nzFilters: [{
      type: Input
    }],
    nzSortFn: [{
      type: Input
    }],
    nzFilterFn: [{
      type: Input
    }],
    nzShowSort: [{
      type: Input
    }],
    nzShowFilter: [{
      type: Input
    }],
    nzCustomFilter: [{
      type: Input
    }],
    nzCheckedChange: [{
      type: Output
    }],
    nzSortOrderChange: [{
      type: Output
    }],
    nzFilterChange: [{
      type: Output
    }]
  });
})();
var _NzThMeasureDirective = class _NzThMeasureDirective {
  constructor(renderer, elementRef) {
    this.renderer = renderer;
    this.elementRef = elementRef;
    this.changes$ = new Subject();
    this.nzWidth = null;
    this.colspan = null;
    this.colSpan = null;
    this.rowspan = null;
    this.rowSpan = null;
  }
  ngOnChanges(changes) {
    const {
      nzWidth,
      colspan,
      rowspan,
      colSpan,
      rowSpan
    } = changes;
    if (colspan || colSpan) {
      const col = this.colspan || this.colSpan;
      if (!isNil(col)) {
        this.renderer.setAttribute(this.elementRef.nativeElement, "colspan", `${col}`);
      } else {
        this.renderer.removeAttribute(this.elementRef.nativeElement, "colspan");
      }
    }
    if (rowspan || rowSpan) {
      const row = this.rowspan || this.rowSpan;
      if (!isNil(row)) {
        this.renderer.setAttribute(this.elementRef.nativeElement, "rowspan", `${row}`);
      } else {
        this.renderer.removeAttribute(this.elementRef.nativeElement, "rowspan");
      }
    }
    if (nzWidth || colspan) {
      this.changes$.next();
    }
  }
};
_NzThMeasureDirective.\u0275fac = function NzThMeasureDirective_Factory(t) {
  return new (t || _NzThMeasureDirective)(\u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef));
};
_NzThMeasureDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzThMeasureDirective,
  selectors: [["th"]],
  inputs: {
    nzWidth: "nzWidth",
    colspan: "colspan",
    colSpan: "colSpan",
    rowspan: "rowspan",
    rowSpan: "rowSpan"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NzThMeasureDirective = _NzThMeasureDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzThMeasureDirective, [{
    type: Directive,
    args: [{
      selector: "th",
      standalone: true
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }], {
    nzWidth: [{
      type: Input
    }],
    colspan: [{
      type: Input
    }],
    colSpan: [{
      type: Input
    }],
    rowspan: [{
      type: Input
    }],
    rowSpan: [{
      type: Input
    }]
  });
})();
var _NzThSelectionComponent = class _NzThSelectionComponent {
  constructor() {
    this.nzSelections = [];
    this.nzChecked = false;
    this.nzDisabled = false;
    this.nzIndeterminate = false;
    this.nzLabel = null;
    this.nzShowCheckbox = false;
    this.nzShowRowSelection = false;
    this.nzCheckedChange = new EventEmitter();
    this.isNzShowExpandChanged = false;
    this.isNzShowCheckboxChanged = false;
  }
  onCheckedChange(checked) {
    this.nzChecked = checked;
    this.nzCheckedChange.emit(checked);
  }
  ngOnChanges(changes) {
    const isFirstChange = (value) => value && value.firstChange && value.currentValue !== void 0;
    const {
      nzChecked,
      nzSelections,
      nzShowExpand,
      nzShowCheckbox
    } = changes;
    if (nzShowExpand) {
      this.isNzShowExpandChanged = true;
    }
    if (nzShowCheckbox) {
      this.isNzShowCheckboxChanged = true;
    }
    if (isFirstChange(nzSelections) && !this.isNzShowExpandChanged) {
      this.nzShowRowSelection = true;
    }
    if (isFirstChange(nzChecked) && !this.isNzShowCheckboxChanged) {
      this.nzShowCheckbox = true;
    }
  }
};
_NzThSelectionComponent.\u0275fac = function NzThSelectionComponent_Factory(t) {
  return new (t || _NzThSelectionComponent)();
};
_NzThSelectionComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzThSelectionComponent,
  selectors: [["th", "nzSelections", ""], ["th", "nzChecked", ""], ["th", "nzShowCheckbox", ""], ["th", "nzShowRowSelection", ""]],
  hostAttrs: [1, "ant-table-selection-column"],
  inputs: {
    nzSelections: "nzSelections",
    nzChecked: "nzChecked",
    nzDisabled: "nzDisabled",
    nzIndeterminate: "nzIndeterminate",
    nzLabel: "nzLabel",
    nzShowCheckbox: "nzShowCheckbox",
    nzShowRowSelection: "nzShowRowSelection"
  },
  outputs: {
    nzCheckedChange: "nzCheckedChange"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  attrs: _c5,
  ngContentSelectors: _c07,
  decls: 2,
  vars: 7,
  consts: [[3, "checkedChange", "checked", "disabled", "indeterminate", "label", "listOfSelections", "showCheckbox", "showRowSelection"]],
  template: function NzThSelectionComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "nz-table-selection", 0);
      \u0275\u0275listener("checkedChange", function NzThSelectionComponent_Template_nz_table_selection_checkedChange_0_listener($event) {
        return ctx.onCheckedChange($event);
      });
      \u0275\u0275elementEnd();
      \u0275\u0275projection(1);
    }
    if (rf & 2) {
      \u0275\u0275property("checked", ctx.nzChecked)("disabled", ctx.nzDisabled)("indeterminate", ctx.nzIndeterminate)("label", ctx.nzLabel)("listOfSelections", ctx.nzSelections)("showCheckbox", ctx.nzShowCheckbox)("showRowSelection", ctx.nzShowRowSelection);
    }
  },
  dependencies: [NzTableSelectionComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzThSelectionComponent = _NzThSelectionComponent;
__decorate([InputBoolean()], NzThSelectionComponent.prototype, "nzShowCheckbox", void 0);
__decorate([InputBoolean()], NzThSelectionComponent.prototype, "nzShowRowSelection", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzThSelectionComponent, [{
    type: Component,
    args: [{
      selector: "th[nzSelections],th[nzChecked],th[nzShowCheckbox],th[nzShowRowSelection]",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <nz-table-selection
      [checked]="nzChecked"
      [disabled]="nzDisabled"
      [indeterminate]="nzIndeterminate"
      [label]="nzLabel"
      [listOfSelections]="nzSelections"
      [showCheckbox]="nzShowCheckbox"
      [showRowSelection]="nzShowRowSelection"
      (checkedChange)="onCheckedChange($event)"
    ></nz-table-selection>
    <ng-content></ng-content>
  `,
      host: {
        class: "ant-table-selection-column"
      },
      imports: [NzTableSelectionComponent],
      standalone: true
    }]
  }], () => [], {
    nzSelections: [{
      type: Input
    }],
    nzChecked: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzIndeterminate: [{
      type: Input
    }],
    nzLabel: [{
      type: Input
    }],
    nzShowCheckbox: [{
      type: Input
    }],
    nzShowRowSelection: [{
      type: Input
    }],
    nzCheckedChange: [{
      type: Output
    }]
  });
})();
var _NzCellAlignDirective = class _NzCellAlignDirective {
  constructor() {
    this.nzAlign = null;
  }
};
_NzCellAlignDirective.\u0275fac = function NzCellAlignDirective_Factory(t) {
  return new (t || _NzCellAlignDirective)();
};
_NzCellAlignDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzCellAlignDirective,
  selectors: [["th", "nzAlign", ""], ["td", "nzAlign", ""]],
  hostVars: 2,
  hostBindings: function NzCellAlignDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("text-align", ctx.nzAlign);
    }
  },
  inputs: {
    nzAlign: "nzAlign"
  },
  standalone: true
});
var NzCellAlignDirective = _NzCellAlignDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCellAlignDirective, [{
    type: Directive,
    args: [{
      selector: "th[nzAlign],td[nzAlign]",
      host: {
        "[style.text-align]": "nzAlign"
      },
      standalone: true
    }]
  }], null, {
    nzAlign: [{
      type: Input
    }]
  });
})();
var _NzCellEllipsisDirective = class _NzCellEllipsisDirective {
  constructor() {
    this.nzEllipsis = true;
  }
};
_NzCellEllipsisDirective.\u0275fac = function NzCellEllipsisDirective_Factory(t) {
  return new (t || _NzCellEllipsisDirective)();
};
_NzCellEllipsisDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzCellEllipsisDirective,
  selectors: [["th", "nzEllipsis", ""], ["td", "nzEllipsis", ""]],
  hostVars: 2,
  hostBindings: function NzCellEllipsisDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-cell-ellipsis", ctx.nzEllipsis);
    }
  },
  inputs: {
    nzEllipsis: "nzEllipsis"
  },
  standalone: true
});
var NzCellEllipsisDirective = _NzCellEllipsisDirective;
__decorate([InputBoolean()], NzCellEllipsisDirective.prototype, "nzEllipsis", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCellEllipsisDirective, [{
    type: Directive,
    args: [{
      selector: "th[nzEllipsis],td[nzEllipsis]",
      host: {
        "[class.ant-table-cell-ellipsis]": "nzEllipsis"
      },
      standalone: true
    }]
  }], null, {
    nzEllipsis: [{
      type: Input
    }]
  });
})();
var _NzCellBreakWordDirective = class _NzCellBreakWordDirective {
  constructor() {
    this.nzBreakWord = true;
  }
};
_NzCellBreakWordDirective.\u0275fac = function NzCellBreakWordDirective_Factory(t) {
  return new (t || _NzCellBreakWordDirective)();
};
_NzCellBreakWordDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzCellBreakWordDirective,
  selectors: [["th", "nzBreakWord", ""], ["td", "nzBreakWord", ""]],
  hostVars: 2,
  hostBindings: function NzCellBreakWordDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("word-break", ctx.nzBreakWord ? "break-all" : "");
    }
  },
  inputs: {
    nzBreakWord: "nzBreakWord"
  },
  standalone: true
});
var NzCellBreakWordDirective = _NzCellBreakWordDirective;
__decorate([InputBoolean()], NzCellBreakWordDirective.prototype, "nzBreakWord", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzCellBreakWordDirective, [{
    type: Directive,
    args: [{
      selector: "th[nzBreakWord],td[nzBreakWord]",
      host: {
        "[style.word-break]": `nzBreakWord ? 'break-all' : ''`
      },
      standalone: true
    }]
  }], null, {
    nzBreakWord: [{
      type: Input
    }]
  });
})();
var _NzTableContentComponent = class _NzTableContentComponent {
  constructor() {
    this.tableLayout = "auto";
    this.theadTemplate = null;
    this.contentTemplate = null;
    this.listOfColWidth = [];
    this.scrollX = null;
  }
};
_NzTableContentComponent.\u0275fac = function NzTableContentComponent_Factory(t) {
  return new (t || _NzTableContentComponent)();
};
_NzTableContentComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableContentComponent,
  selectors: [["table", "nz-table-content", ""]],
  hostVars: 8,
  hostBindings: function NzTableContentComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("table-layout", ctx.tableLayout)("width", ctx.scrollX)("min-width", ctx.scrollX ? "100%" : null);
      \u0275\u0275classProp("ant-table-fixed", ctx.scrollX);
    }
  },
  inputs: {
    tableLayout: "tableLayout",
    theadTemplate: "theadTemplate",
    contentTemplate: "contentTemplate",
    listOfColWidth: "listOfColWidth",
    scrollX: "scrollX"
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  attrs: _c6,
  ngContentSelectors: _c07,
  decls: 4,
  vars: 3,
  consts: [[3, "width", "minWidth", 4, "ngFor", "ngForOf"], ["class", "ant-table-thead", 4, "ngIf"], [3, "ngTemplateOutlet"], [1, "ant-table-thead"]],
  template: function NzTableContentComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzTableContentComponent_col_0_Template, 1, 4, "col", 0)(1, NzTableContentComponent_thead_1_Template, 2, 1, "thead", 1)(2, NzTableContentComponent_ng_template_2_Template, 0, 0, "ng-template", 2);
      \u0275\u0275projection(3);
    }
    if (rf & 2) {
      \u0275\u0275property("ngForOf", ctx.listOfColWidth);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.theadTemplate);
      \u0275\u0275advance();
      \u0275\u0275property("ngTemplateOutlet", ctx.contentTemplate);
    }
  },
  dependencies: [NgTemplateOutlet, NgIf, NgForOf],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableContentComponent = _NzTableContentComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableContentComponent, [{
    type: Component,
    args: [{
      selector: "table[nz-table-content]",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <col [style.width]="width" [style.minWidth]="width" *ngFor="let width of listOfColWidth" />
    <thead class="ant-table-thead" *ngIf="theadTemplate">
      <ng-template [ngTemplateOutlet]="theadTemplate"></ng-template>
    </thead>
    <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    <ng-content></ng-content>
  `,
      host: {
        "[style.table-layout]": "tableLayout",
        "[class.ant-table-fixed]": "scrollX",
        "[style.width]": "scrollX",
        "[style.min-width]": `scrollX ? '100%' : null`
      },
      imports: [NgTemplateOutlet, NgIf, NgForOf],
      standalone: true
    }]
  }], null, {
    tableLayout: [{
      type: Input
    }],
    theadTemplate: [{
      type: Input
    }],
    contentTemplate: [{
      type: Input
    }],
    listOfColWidth: [{
      type: Input
    }],
    scrollX: [{
      type: Input
    }]
  });
})();
var _NzTableFixedRowComponent = class _NzTableFixedRowComponent {
  constructor(nzTableStyleService, renderer) {
    this.nzTableStyleService = nzTableStyleService;
    this.renderer = renderer;
    this.hostWidth$ = new BehaviorSubject(null);
    this.enableAutoMeasure$ = new BehaviorSubject(false);
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    if (this.nzTableStyleService) {
      const {
        enableAutoMeasure$,
        hostWidth$
      } = this.nzTableStyleService;
      enableAutoMeasure$.pipe(takeUntil(this.destroy$)).subscribe(this.enableAutoMeasure$);
      hostWidth$.pipe(takeUntil(this.destroy$)).subscribe(this.hostWidth$);
    }
  }
  ngAfterViewInit() {
    this.nzTableStyleService.columnCount$.pipe(takeUntil(this.destroy$)).subscribe((count) => {
      this.renderer.setAttribute(this.tdElement.nativeElement, "colspan", `${count}`);
    });
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
};
_NzTableFixedRowComponent.\u0275fac = function NzTableFixedRowComponent_Factory(t) {
  return new (t || _NzTableFixedRowComponent)(\u0275\u0275directiveInject(NzTableStyleService), \u0275\u0275directiveInject(Renderer2));
};
_NzTableFixedRowComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableFixedRowComponent,
  selectors: [["tr", "nz-table-fixed-row", ""], ["tr", "nzExpand", ""]],
  viewQuery: function NzTableFixedRowComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c7, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.tdElement = _t.first);
    }
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  attrs: _c8,
  ngContentSelectors: _c07,
  decls: 6,
  vars: 4,
  consts: [["tdElement", ""], ["contentTemplate", ""], [1, "nz-disable-td", "ant-table-cell"], ["class", "ant-table-expanded-row-fixed", "style", "position: sticky; left: 0px; overflow: hidden;", 3, "width", 4, "ngIf", "ngIfElse"], [1, "ant-table-expanded-row-fixed", 2, "position", "sticky", "left", "0px", "overflow", "hidden"], [3, "ngTemplateOutlet"]],
  template: function NzTableFixedRowComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "td", 2, 0);
      \u0275\u0275template(2, NzTableFixedRowComponent_div_2_Template, 3, 5, "div", 3);
      \u0275\u0275pipe(3, "async");
      \u0275\u0275elementEnd();
      \u0275\u0275template(4, NzTableFixedRowComponent_ng_template_4_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      const contentTemplate_r2 = \u0275\u0275reference(5);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(3, 2, ctx.enableAutoMeasure$))("ngIfElse", contentTemplate_r2);
    }
  },
  dependencies: [NgIf, AsyncPipe, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableFixedRowComponent = _NzTableFixedRowComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableFixedRowComponent, [{
    type: Component,
    args: [{
      selector: "tr[nz-table-fixed-row], tr[nzExpand]",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <td class="nz-disable-td ant-table-cell" #tdElement>
      <div
        class="ant-table-expanded-row-fixed"
        *ngIf="enableAutoMeasure$ | async; else contentTemplate"
        style="position: sticky; left: 0px; overflow: hidden;"
        [style.width.px]="hostWidth$ | async"
      >
        <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
      </div>
    </td>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
  `,
      imports: [NgIf, AsyncPipe, NgTemplateOutlet],
      standalone: true
    }]
  }], () => [{
    type: NzTableStyleService
  }, {
    type: Renderer2
  }], {
    tdElement: [{
      type: ViewChild,
      args: ["tdElement", {
        static: true
      }]
    }]
  });
})();
var _NzTableInnerDefaultComponent = class _NzTableInnerDefaultComponent {
  constructor() {
    this.tableLayout = "auto";
    this.listOfColWidth = [];
    this.theadTemplate = null;
    this.contentTemplate = null;
  }
};
_NzTableInnerDefaultComponent.\u0275fac = function NzTableInnerDefaultComponent_Factory(t) {
  return new (t || _NzTableInnerDefaultComponent)();
};
_NzTableInnerDefaultComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableInnerDefaultComponent,
  selectors: [["nz-table-inner-default"]],
  hostAttrs: [1, "ant-table-container"],
  inputs: {
    tableLayout: "tableLayout",
    listOfColWidth: "listOfColWidth",
    theadTemplate: "theadTemplate",
    contentTemplate: "contentTemplate"
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 4,
  consts: [[1, "ant-table-content"], ["nz-table-content", "", 3, "contentTemplate", "tableLayout", "listOfColWidth", "theadTemplate"]],
  template: function NzTableInnerDefaultComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0);
      \u0275\u0275element(1, "table", 1);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("contentTemplate", ctx.contentTemplate)("tableLayout", ctx.tableLayout)("listOfColWidth", ctx.listOfColWidth)("theadTemplate", ctx.theadTemplate);
    }
  },
  dependencies: [NzTableContentComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableInnerDefaultComponent = _NzTableInnerDefaultComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableInnerDefaultComponent, [{
    type: Component,
    args: [{
      selector: "nz-table-inner-default",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <div class="ant-table-content">
      <table
        nz-table-content
        [contentTemplate]="contentTemplate"
        [tableLayout]="tableLayout"
        [listOfColWidth]="listOfColWidth"
        [theadTemplate]="theadTemplate"
      ></table>
    </div>
  `,
      host: {
        class: "ant-table-container"
      },
      imports: [NzTableContentComponent],
      standalone: true
    }]
  }], () => [], {
    tableLayout: [{
      type: Input
    }],
    listOfColWidth: [{
      type: Input
    }],
    theadTemplate: [{
      type: Input
    }],
    contentTemplate: [{
      type: Input
    }]
  });
})();
var _NzTrMeasureComponent = class _NzTrMeasureComponent {
  constructor(nzResizeObserver, ngZone) {
    this.nzResizeObserver = nzResizeObserver;
    this.ngZone = ngZone;
    this.listOfMeasureColumn = [];
    this.listOfAutoWidth = new EventEmitter();
    this.destroy$ = new Subject();
  }
  trackByFunc(_, key) {
    return key;
  }
  ngAfterViewInit() {
    this.listOfTdElement.changes.pipe(startWith(this.listOfTdElement)).pipe(switchMap((list) => combineLatest(list.toArray().map((item) => this.nzResizeObserver.observe(item).pipe(map(([entry]) => {
      const {
        width
      } = entry.target.getBoundingClientRect();
      return Math.floor(width);
    }))))), debounceTime(16), takeUntil(this.destroy$)).subscribe((data) => {
      if (this.ngZone instanceof NgZone && NgZone.isInAngularZone()) {
        this.listOfAutoWidth.next(data);
      } else {
        this.ngZone.run(() => this.listOfAutoWidth.next(data));
      }
    });
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
};
_NzTrMeasureComponent.\u0275fac = function NzTrMeasureComponent_Factory(t) {
  return new (t || _NzTrMeasureComponent)(\u0275\u0275directiveInject(NzResizeObserver), \u0275\u0275directiveInject(NgZone));
};
_NzTrMeasureComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTrMeasureComponent,
  selectors: [["tr", "nz-table-measure-row", ""]],
  viewQuery: function NzTrMeasureComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c7, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfTdElement = _t);
    }
  },
  hostAttrs: [1, "ant-table-measure-now"],
  inputs: {
    listOfMeasureColumn: "listOfMeasureColumn"
  },
  outputs: {
    listOfAutoWidth: "listOfAutoWidth"
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  attrs: _c9,
  decls: 1,
  vars: 2,
  consts: [["tdElement", ""], ["class", "nz-disable-td", "style", "padding: 0px; border: 0px; height: 0px;", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "nz-disable-td", 2, "padding", "0px", "border", "0px", "height", "0px"]],
  template: function NzTrMeasureComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzTrMeasureComponent_td_0_Template, 2, 0, "td", 1);
    }
    if (rf & 2) {
      \u0275\u0275property("ngForOf", ctx.listOfMeasureColumn)("ngForTrackBy", ctx.trackByFunc);
    }
  },
  dependencies: [NgForOf],
  encapsulation: 2,
  changeDetection: 0
});
var NzTrMeasureComponent = _NzTrMeasureComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTrMeasureComponent, [{
    type: Component,
    args: [{
      selector: "tr[nz-table-measure-row]",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <td
      #tdElement
      class="nz-disable-td"
      style="padding: 0px; border: 0px; height: 0px;"
      *ngFor="let th of listOfMeasureColumn; trackBy: trackByFunc"
    ></td>
  `,
      host: {
        class: "ant-table-measure-now"
      },
      imports: [NgForOf],
      standalone: true
    }]
  }], () => [{
    type: NzResizeObserver
  }, {
    type: NgZone
  }], {
    listOfMeasureColumn: [{
      type: Input
    }],
    listOfAutoWidth: [{
      type: Output
    }],
    listOfTdElement: [{
      type: ViewChildren,
      args: ["tdElement"]
    }]
  });
})();
var _NzTbodyComponent = class _NzTbodyComponent {
  constructor(nzTableStyleService) {
    this.nzTableStyleService = nzTableStyleService;
    this.isInsideTable = false;
    this.showEmpty$ = new BehaviorSubject(false);
    this.noResult$ = new BehaviorSubject(void 0);
    this.listOfMeasureColumn$ = new BehaviorSubject([]);
    this.destroy$ = new Subject();
    this.isInsideTable = !!this.nzTableStyleService;
    if (this.nzTableStyleService) {
      const {
        showEmpty$,
        noResult$,
        listOfMeasureColumn$
      } = this.nzTableStyleService;
      noResult$.pipe(takeUntil(this.destroy$)).subscribe(this.noResult$);
      listOfMeasureColumn$.pipe(takeUntil(this.destroy$)).subscribe(this.listOfMeasureColumn$);
      showEmpty$.pipe(takeUntil(this.destroy$)).subscribe(this.showEmpty$);
    }
  }
  onListOfAutoWidthChange(listOfAutoWidth) {
    this.nzTableStyleService.setListOfAutoWidth(listOfAutoWidth);
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzTbodyComponent.\u0275fac = function NzTbodyComponent_Factory(t) {
  return new (t || _NzTbodyComponent)(\u0275\u0275directiveInject(NzTableStyleService, 8));
};
_NzTbodyComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTbodyComponent,
  selectors: [["tbody"]],
  hostVars: 2,
  hostBindings: function NzTbodyComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-tbody", ctx.isInsideTable);
    }
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c07,
  decls: 5,
  vars: 6,
  consts: [[4, "ngIf"], ["class", "ant-table-placeholder", "nz-table-fixed-row", "", 4, "ngIf"], ["nz-table-measure-row", "", 3, "listOfMeasureColumn", "listOfAutoWidth", 4, "ngIf"], ["nz-table-measure-row", "", 3, "listOfAutoWidth", "listOfMeasureColumn"], ["nz-table-fixed-row", "", 1, "ant-table-placeholder"], ["nzComponentName", "table", 3, "specificContent"]],
  template: function NzTbodyComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzTbodyComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
      \u0275\u0275pipe(1, "async");
      \u0275\u0275projection(2);
      \u0275\u0275template(3, NzTbodyComponent_tr_3_Template, 3, 3, "tr", 1);
      \u0275\u0275pipe(4, "async");
    }
    if (rf & 2) {
      \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(1, 2, ctx.listOfMeasureColumn$));
      \u0275\u0275advance(3);
      \u0275\u0275property("ngIf", \u0275\u0275pipeBind1(4, 4, ctx.showEmpty$));
    }
  },
  dependencies: [NgIf, AsyncPipe, NzTrMeasureComponent, NzTableFixedRowComponent, NzEmptyModule, NzEmbedEmptyComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzTbodyComponent = _NzTbodyComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTbodyComponent, [{
    type: Component,
    args: [{
      selector: "tbody",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <ng-container *ngIf="listOfMeasureColumn$ | async as listOfMeasureColumn">
      <tr
        nz-table-measure-row
        *ngIf="isInsideTable && listOfMeasureColumn.length"
        [listOfMeasureColumn]="listOfMeasureColumn"
        (listOfAutoWidth)="onListOfAutoWidthChange($event)"
      ></tr>
    </ng-container>
    <ng-content></ng-content>
    <tr class="ant-table-placeholder" nz-table-fixed-row *ngIf="showEmpty$ | async">
      <nz-embed-empty nzComponentName="table" [specificContent]="(noResult$ | async)!"></nz-embed-empty>
    </tr>
  `,
      host: {
        "[class.ant-table-tbody]": "isInsideTable"
      },
      imports: [NgIf, AsyncPipe, NzTrMeasureComponent, NzTableFixedRowComponent, NzEmptyModule],
      standalone: true
    }]
  }], () => [{
    type: NzTableStyleService,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _NzTableInnerScrollComponent = class _NzTableInnerScrollComponent {
  setScrollPositionClassName(clear = false) {
    const {
      scrollWidth,
      scrollLeft,
      clientWidth
    } = this.tableBodyElement.nativeElement;
    const leftClassName = "ant-table-ping-left";
    const rightClassName = "ant-table-ping-right";
    if (scrollWidth === clientWidth && scrollWidth !== 0 || clear) {
      this.renderer.removeClass(this.tableMainElement, leftClassName);
      this.renderer.removeClass(this.tableMainElement, rightClassName);
    } else if (scrollLeft === 0) {
      this.renderer.removeClass(this.tableMainElement, leftClassName);
      this.renderer.addClass(this.tableMainElement, rightClassName);
    } else if (scrollWidth === scrollLeft + clientWidth) {
      this.renderer.removeClass(this.tableMainElement, rightClassName);
      this.renderer.addClass(this.tableMainElement, leftClassName);
    } else {
      this.renderer.addClass(this.tableMainElement, leftClassName);
      this.renderer.addClass(this.tableMainElement, rightClassName);
    }
  }
  constructor(renderer, ngZone, platform, resizeService) {
    this.renderer = renderer;
    this.ngZone = ngZone;
    this.platform = platform;
    this.resizeService = resizeService;
    this.data = [];
    this.scrollX = null;
    this.scrollY = null;
    this.contentTemplate = null;
    this.widthConfig = [];
    this.listOfColWidth = [];
    this.theadTemplate = null;
    this.virtualTemplate = null;
    this.virtualItemSize = 0;
    this.virtualMaxBufferPx = 200;
    this.virtualMinBufferPx = 100;
    this.virtualForTrackBy = (index) => index;
    this.headerStyleMap = {};
    this.bodyStyleMap = {};
    this.verticalScrollBarWidth = 0;
    this.noDateVirtualHeight = "182px";
    this.data$ = new Subject();
    this.scroll$ = new Subject();
    this.destroy$ = new Subject();
  }
  ngOnChanges(changes) {
    const {
      scrollX,
      scrollY,
      data
    } = changes;
    if (scrollX || scrollY) {
      const hasVerticalScrollBar = this.verticalScrollBarWidth !== 0;
      this.headerStyleMap = {
        overflowX: "hidden",
        overflowY: this.scrollY && hasVerticalScrollBar ? "scroll" : "hidden"
      };
      this.bodyStyleMap = {
        overflowY: this.scrollY ? "scroll" : "hidden",
        overflowX: this.scrollX ? "auto" : null,
        maxHeight: this.scrollY
      };
      this.ngZone.runOutsideAngular(() => this.scroll$.next());
    }
    if (data) {
      this.ngZone.runOutsideAngular(() => this.data$.next());
    }
  }
  ngAfterViewInit() {
    if (this.platform.isBrowser) {
      this.ngZone.runOutsideAngular(() => {
        const scrollEvent$ = this.scroll$.pipe(startWith(null), delay(0), switchMap(() => fromEvent(this.tableBodyElement.nativeElement, "scroll").pipe(startWith(true))), takeUntil(this.destroy$));
        const resize$ = this.resizeService.subscribe().pipe(takeUntil(this.destroy$));
        const data$ = this.data$.pipe(takeUntil(this.destroy$));
        const setClassName$ = merge(scrollEvent$, resize$, data$, this.scroll$).pipe(startWith(true), delay(0), takeUntil(this.destroy$));
        setClassName$.subscribe(() => this.setScrollPositionClassName());
        scrollEvent$.pipe(filter(() => !!this.scrollY)).subscribe(() => this.tableHeaderElement.nativeElement.scrollLeft = this.tableBodyElement.nativeElement.scrollLeft);
      });
    }
  }
  ngOnDestroy() {
    this.setScrollPositionClassName(true);
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzTableInnerScrollComponent.\u0275fac = function NzTableInnerScrollComponent_Factory(t) {
  return new (t || _NzTableInnerScrollComponent)(\u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(NzResizeService));
};
_NzTableInnerScrollComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableInnerScrollComponent,
  selectors: [["nz-table-inner-scroll"]],
  viewQuery: function NzTableInnerScrollComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c10, 5, ElementRef);
      \u0275\u0275viewQuery(_c11, 5, ElementRef);
      \u0275\u0275viewQuery(CdkVirtualScrollViewport, 5, CdkVirtualScrollViewport);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.tableHeaderElement = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.tableBodyElement = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cdkVirtualScrollViewport = _t.first);
    }
  },
  hostAttrs: [1, "ant-table-container"],
  inputs: {
    data: "data",
    scrollX: "scrollX",
    scrollY: "scrollY",
    contentTemplate: "contentTemplate",
    widthConfig: "widthConfig",
    listOfColWidth: "listOfColWidth",
    theadTemplate: "theadTemplate",
    virtualTemplate: "virtualTemplate",
    virtualItemSize: "virtualItemSize",
    virtualMaxBufferPx: "virtualMaxBufferPx",
    virtualMinBufferPx: "virtualMinBufferPx",
    tableMainElement: "tableMainElement",
    virtualForTrackBy: "virtualForTrackBy",
    verticalScrollBarWidth: "verticalScrollBarWidth"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 2,
  consts: [["tableHeaderElement", ""], ["tableBodyElement", ""], [4, "ngIf"], ["class", "ant-table-content", 3, "ngStyle", 4, "ngIf"], [1, "ant-table-header", "nz-table-hide-scrollbar", 3, "ngStyle"], ["nz-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth", "theadTemplate"], ["class", "ant-table-body", 3, "ngStyle", 4, "ngIf"], [3, "itemSize", "maxBufferPx", "minBufferPx", "height", 4, "ngIf"], [1, "ant-table-body", 3, "ngStyle"], ["nz-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth", "contentTemplate"], [3, "itemSize", "maxBufferPx", "minBufferPx"], ["nz-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth"], [4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ant-table-content", 3, "ngStyle"], ["nz-table-content", "", "tableLayout", "fixed", 3, "scrollX", "listOfColWidth", "theadTemplate", "contentTemplate"]],
  template: function NzTableInnerScrollComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzTableInnerScrollComponent_ng_container_0_Template, 6, 6, "ng-container", 2)(1, NzTableInnerScrollComponent_div_1_Template, 3, 5, "div", 3);
    }
    if (rf & 2) {
      \u0275\u0275property("ngIf", ctx.scrollY);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.scrollY);
    }
  },
  dependencies: [NzTableContentComponent, NgIf, NgStyle, ScrollingModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, NgTemplateOutlet, NzTbodyComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableInnerScrollComponent = _NzTableInnerScrollComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableInnerScrollComponent, [{
    type: Component,
    args: [{
      selector: "nz-table-inner-scroll",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <ng-container *ngIf="scrollY">
      <div #tableHeaderElement [ngStyle]="headerStyleMap" class="ant-table-header nz-table-hide-scrollbar">
        <table
          nz-table-content
          tableLayout="fixed"
          [scrollX]="scrollX"
          [listOfColWidth]="listOfColWidth"
          [theadTemplate]="theadTemplate"
        ></table>
      </div>
      <div #tableBodyElement *ngIf="!virtualTemplate" class="ant-table-body" [ngStyle]="bodyStyleMap">
        <table
          nz-table-content
          tableLayout="fixed"
          [scrollX]="scrollX"
          [listOfColWidth]="listOfColWidth"
          [contentTemplate]="contentTemplate"
        ></table>
      </div>
      <cdk-virtual-scroll-viewport
        #tableBodyElement
        *ngIf="virtualTemplate"
        [itemSize]="virtualItemSize"
        [maxBufferPx]="virtualMaxBufferPx"
        [minBufferPx]="virtualMinBufferPx"
        [style.height]="data.length ? scrollY : noDateVirtualHeight"
      >
        <table nz-table-content tableLayout="fixed" [scrollX]="scrollX" [listOfColWidth]="listOfColWidth">
          <tbody>
            <ng-container *cdkVirtualFor="let item of data; let i = index; trackBy: virtualForTrackBy">
              <ng-template
                [ngTemplateOutlet]="virtualTemplate"
                [ngTemplateOutletContext]="{ $implicit: item, index: i }"
              ></ng-template>
            </ng-container>
          </tbody>
        </table>
      </cdk-virtual-scroll-viewport>
    </ng-container>
    <div class="ant-table-content" #tableBodyElement *ngIf="!scrollY" [ngStyle]="bodyStyleMap">
      <table
        nz-table-content
        tableLayout="fixed"
        [scrollX]="scrollX"
        [listOfColWidth]="listOfColWidth"
        [theadTemplate]="theadTemplate"
        [contentTemplate]="contentTemplate"
      ></table>
    </div>
  `,
      host: {
        class: "ant-table-container"
      },
      imports: [NzTableContentComponent, NgIf, NgStyle, ScrollingModule, NgTemplateOutlet, NzTbodyComponent],
      standalone: true
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: NzResizeService
  }], {
    data: [{
      type: Input
    }],
    scrollX: [{
      type: Input
    }],
    scrollY: [{
      type: Input
    }],
    contentTemplate: [{
      type: Input
    }],
    widthConfig: [{
      type: Input
    }],
    listOfColWidth: [{
      type: Input
    }],
    theadTemplate: [{
      type: Input
    }],
    virtualTemplate: [{
      type: Input
    }],
    virtualItemSize: [{
      type: Input
    }],
    virtualMaxBufferPx: [{
      type: Input
    }],
    virtualMinBufferPx: [{
      type: Input
    }],
    tableMainElement: [{
      type: Input
    }],
    virtualForTrackBy: [{
      type: Input
    }],
    tableHeaderElement: [{
      type: ViewChild,
      args: ["tableHeaderElement", {
        read: ElementRef
      }]
    }],
    tableBodyElement: [{
      type: ViewChild,
      args: ["tableBodyElement", {
        read: ElementRef
      }]
    }],
    cdkVirtualScrollViewport: [{
      type: ViewChild,
      args: [CdkVirtualScrollViewport, {
        read: CdkVirtualScrollViewport
      }]
    }],
    verticalScrollBarWidth: [{
      type: Input
    }]
  });
})();
var _NzTableVirtualScrollDirective = class _NzTableVirtualScrollDirective {
  constructor(templateRef) {
    this.templateRef = templateRef;
  }
  static ngTemplateContextGuard(_dir, _ctx) {
    return true;
  }
};
_NzTableVirtualScrollDirective.\u0275fac = function NzTableVirtualScrollDirective_Factory(t) {
  return new (t || _NzTableVirtualScrollDirective)(\u0275\u0275directiveInject(TemplateRef));
};
_NzTableVirtualScrollDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzTableVirtualScrollDirective,
  selectors: [["", "nz-virtual-scroll", ""]],
  exportAs: ["nzVirtualScroll"],
  standalone: true
});
var NzTableVirtualScrollDirective = _NzTableVirtualScrollDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableVirtualScrollDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-virtual-scroll]",
      exportAs: "nzVirtualScroll",
      standalone: true
    }]
  }], () => [{
    type: TemplateRef
  }], null);
})();
var _NzTableTitleFooterComponent = class _NzTableTitleFooterComponent {
  constructor() {
    this.title = null;
    this.footer = null;
  }
};
_NzTableTitleFooterComponent.\u0275fac = function NzTableTitleFooterComponent_Factory(t) {
  return new (t || _NzTableTitleFooterComponent)();
};
_NzTableTitleFooterComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableTitleFooterComponent,
  selectors: [["nz-table-title-footer"]],
  hostVars: 4,
  hostBindings: function NzTableTitleFooterComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-title", ctx.title !== null)("ant-table-footer", ctx.footer !== null);
    }
  },
  inputs: {
    title: "title",
    footer: "footer"
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 2,
  consts: [[4, "nzStringTemplateOutlet"]],
  template: function NzTableTitleFooterComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzTableTitleFooterComponent_ng_container_0_Template, 2, 1, "ng-container", 0)(1, NzTableTitleFooterComponent_ng_container_1_Template, 2, 1, "ng-container", 0);
    }
    if (rf & 2) {
      \u0275\u0275property("nzStringTemplateOutlet", ctx.title);
      \u0275\u0275advance();
      \u0275\u0275property("nzStringTemplateOutlet", ctx.footer);
    }
  },
  dependencies: [NzOutletModule, NzStringTemplateOutletDirective],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableTitleFooterComponent = _NzTableTitleFooterComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableTitleFooterComponent, [{
    type: Component,
    args: [{
      selector: "nz-table-title-footer",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <ng-container *nzStringTemplateOutlet="title">{{ title }}</ng-container>
    <ng-container *nzStringTemplateOutlet="footer">{{ footer }}</ng-container>
  `,
      host: {
        "[class.ant-table-title]": `title !== null`,
        "[class.ant-table-footer]": `footer !== null`
      },
      imports: [NzOutletModule],
      standalone: true
    }]
  }], null, {
    title: [{
      type: Input
    }],
    footer: [{
      type: Input
    }]
  });
})();
var NZ_CONFIG_MODULE_NAME5 = "table";
var _NzTableComponent = class _NzTableComponent {
  onPageSizeChange(size) {
    this.nzTableDataService.updatePageSize(size);
  }
  onPageIndexChange(index) {
    this.nzTableDataService.updatePageIndex(index);
  }
  constructor(elementRef, nzResizeObserver, nzConfigService, cdr, nzTableStyleService, nzTableDataService, directionality) {
    this.elementRef = elementRef;
    this.nzResizeObserver = nzResizeObserver;
    this.nzConfigService = nzConfigService;
    this.cdr = cdr;
    this.nzTableStyleService = nzTableStyleService;
    this.nzTableDataService = nzTableDataService;
    this.directionality = directionality;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME5;
    this.nzTableLayout = "auto";
    this.nzShowTotal = null;
    this.nzItemRender = null;
    this.nzTitle = null;
    this.nzFooter = null;
    this.nzNoResult = void 0;
    this.nzPageSizeOptions = [10, 20, 30, 40, 50];
    this.nzVirtualItemSize = 0;
    this.nzVirtualMaxBufferPx = 200;
    this.nzVirtualMinBufferPx = 100;
    this.nzVirtualForTrackBy = (index) => index;
    this.nzLoadingDelay = 0;
    this.nzPageIndex = 1;
    this.nzPageSize = 10;
    this.nzTotal = 0;
    this.nzWidthConfig = [];
    this.nzData = [];
    this.nzCustomColumn = [];
    this.nzPaginationPosition = "bottom";
    this.nzScroll = {
      x: null,
      y: null
    };
    this.nzPaginationType = "default";
    this.nzFrontPagination = true;
    this.nzTemplateMode = false;
    this.nzShowPagination = true;
    this.nzLoading = false;
    this.nzOuterBordered = false;
    this.nzLoadingIndicator = null;
    this.nzBordered = false;
    this.nzSize = "default";
    this.nzShowSizeChanger = false;
    this.nzHideOnSinglePage = false;
    this.nzShowQuickJumper = false;
    this.nzSimple = false;
    this.nzPageSizeChange = new EventEmitter();
    this.nzPageIndexChange = new EventEmitter();
    this.nzQueryParams = new EventEmitter();
    this.nzCurrentPageDataChange = new EventEmitter();
    this.nzCustomColumnChange = new EventEmitter();
    this.data = [];
    this.scrollX = null;
    this.scrollY = null;
    this.theadTemplate = null;
    this.listOfAutoColWidth = [];
    this.listOfManualColWidth = [];
    this.hasFixLeft = false;
    this.hasFixRight = false;
    this.showPagination = true;
    this.destroy$ = new Subject();
    this.templateMode$ = new BehaviorSubject(false);
    this.dir = "ltr";
    this.verticalScrollBarWidth = 0;
    this.nzConfigService.getConfigChangeEventForComponent(NZ_CONFIG_MODULE_NAME5).pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.cdr.markForCheck();
    });
  }
  ngOnInit() {
    const {
      pageIndexDistinct$,
      pageSizeDistinct$,
      listOfCurrentPageData$,
      total$,
      queryParams$,
      listOfCustomColumn$
    } = this.nzTableDataService;
    const {
      theadTemplate$,
      hasFixLeft$,
      hasFixRight$
    } = this.nzTableStyleService;
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    queryParams$.pipe(takeUntil(this.destroy$)).subscribe(this.nzQueryParams);
    pageIndexDistinct$.pipe(takeUntil(this.destroy$)).subscribe((pageIndex) => {
      if (pageIndex !== this.nzPageIndex) {
        this.nzPageIndex = pageIndex;
        this.nzPageIndexChange.next(pageIndex);
      }
    });
    pageSizeDistinct$.pipe(takeUntil(this.destroy$)).subscribe((pageSize) => {
      if (pageSize !== this.nzPageSize) {
        this.nzPageSize = pageSize;
        this.nzPageSizeChange.next(pageSize);
      }
    });
    total$.pipe(takeUntil(this.destroy$), filter(() => this.nzFrontPagination)).subscribe((total) => {
      if (total !== this.nzTotal) {
        this.nzTotal = total;
        this.cdr.markForCheck();
      }
    });
    listOfCurrentPageData$.pipe(takeUntil(this.destroy$)).subscribe((data) => {
      this.data = data;
      this.nzCurrentPageDataChange.next(data);
      this.cdr.markForCheck();
    });
    listOfCustomColumn$.pipe(takeUntil(this.destroy$)).subscribe((data) => {
      this.nzCustomColumn = data;
      this.nzCustomColumnChange.next(data);
      this.cdr.markForCheck();
    });
    theadTemplate$.pipe(takeUntil(this.destroy$)).subscribe((theadTemplate) => {
      this.theadTemplate = theadTemplate;
      this.cdr.markForCheck();
    });
    hasFixLeft$.pipe(takeUntil(this.destroy$)).subscribe((hasFixLeft) => {
      this.hasFixLeft = hasFixLeft;
      this.cdr.markForCheck();
    });
    hasFixRight$.pipe(takeUntil(this.destroy$)).subscribe((hasFixRight) => {
      this.hasFixRight = hasFixRight;
      this.cdr.markForCheck();
    });
    combineLatest([total$, this.templateMode$]).pipe(map(([total, templateMode]) => total === 0 && !templateMode), takeUntil(this.destroy$)).subscribe((empty) => {
      this.nzTableStyleService.setShowEmpty(empty);
    });
    this.verticalScrollBarWidth = measureScrollbar("vertical");
    this.nzTableStyleService.listOfListOfThWidthPx$.pipe(takeUntil(this.destroy$)).subscribe((listOfWidth) => {
      this.listOfAutoColWidth = listOfWidth;
      this.cdr.markForCheck();
    });
    this.nzTableStyleService.manualWidthConfigPx$.pipe(takeUntil(this.destroy$)).subscribe((listOfWidth) => {
      this.listOfManualColWidth = listOfWidth;
      this.cdr.markForCheck();
    });
  }
  ngOnChanges(changes) {
    const {
      nzScroll,
      nzPageIndex,
      nzPageSize,
      nzFrontPagination,
      nzData,
      nzCustomColumn,
      nzWidthConfig,
      nzNoResult,
      nzTemplateMode
    } = changes;
    if (nzPageIndex) {
      this.nzTableDataService.updatePageIndex(this.nzPageIndex);
    }
    if (nzPageSize) {
      this.nzTableDataService.updatePageSize(this.nzPageSize);
    }
    if (nzData) {
      this.nzData = this.nzData || [];
      this.nzTableDataService.updateListOfData(this.nzData);
    }
    if (nzCustomColumn) {
      this.nzCustomColumn = this.nzCustomColumn || [];
      this.nzTableDataService.updateListOfCustomColumn(this.nzCustomColumn);
    }
    if (nzFrontPagination) {
      this.nzTableDataService.updateFrontPagination(this.nzFrontPagination);
    }
    if (nzScroll) {
      this.setScrollOnChanges();
    }
    if (nzWidthConfig) {
      this.nzTableStyleService.setTableWidthConfig(this.nzWidthConfig);
    }
    if (nzTemplateMode) {
      this.templateMode$.next(this.nzTemplateMode);
    }
    if (nzNoResult) {
      this.nzTableStyleService.setNoResult(this.nzNoResult);
    }
    this.updateShowPagination();
  }
  ngAfterViewInit() {
    this.nzResizeObserver.observe(this.elementRef).pipe(map(([entry]) => {
      const {
        width
      } = entry.target.getBoundingClientRect();
      const scrollBarWidth = this.scrollY ? this.verticalScrollBarWidth : 0;
      return Math.floor(width - scrollBarWidth);
    }), takeUntil(this.destroy$)).subscribe(this.nzTableStyleService.hostWidth$);
    if (this.nzTableInnerScrollComponent && this.nzTableInnerScrollComponent.cdkVirtualScrollViewport) {
      this.cdkVirtualScrollViewport = this.nzTableInnerScrollComponent.cdkVirtualScrollViewport;
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  setScrollOnChanges() {
    this.scrollX = this.nzScroll && this.nzScroll.x || null;
    this.scrollY = this.nzScroll && this.nzScroll.y || null;
    this.nzTableStyleService.setScroll(this.scrollX, this.scrollY);
  }
  updateShowPagination() {
    this.showPagination = this.nzHideOnSinglePage && this.nzData.length > this.nzPageSize || this.nzData.length > 0 && !this.nzHideOnSinglePage || !this.nzFrontPagination && this.nzTotal > this.nzPageSize;
  }
};
_NzTableComponent.\u0275fac = function NzTableComponent_Factory(t) {
  return new (t || _NzTableComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NzResizeObserver), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzTableStyleService), \u0275\u0275directiveInject(NzTableDataService), \u0275\u0275directiveInject(Directionality, 8));
};
_NzTableComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTableComponent,
  selectors: [["nz-table"]],
  contentQueries: function NzTableComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, NzTableVirtualScrollDirective, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzVirtualScrollDirective = _t.first);
    }
  },
  viewQuery: function NzTableComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(NzTableInnerScrollComponent, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.nzTableInnerScrollComponent = _t.first);
    }
  },
  hostAttrs: [1, "ant-table-wrapper"],
  hostVars: 4,
  hostBindings: function NzTableComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-wrapper-rtl", ctx.dir === "rtl")("ant-table-custom-column", ctx.nzCustomColumn.length);
    }
  },
  inputs: {
    nzTableLayout: "nzTableLayout",
    nzShowTotal: "nzShowTotal",
    nzItemRender: "nzItemRender",
    nzTitle: "nzTitle",
    nzFooter: "nzFooter",
    nzNoResult: "nzNoResult",
    nzPageSizeOptions: "nzPageSizeOptions",
    nzVirtualItemSize: "nzVirtualItemSize",
    nzVirtualMaxBufferPx: "nzVirtualMaxBufferPx",
    nzVirtualMinBufferPx: "nzVirtualMinBufferPx",
    nzVirtualForTrackBy: "nzVirtualForTrackBy",
    nzLoadingDelay: "nzLoadingDelay",
    nzPageIndex: "nzPageIndex",
    nzPageSize: "nzPageSize",
    nzTotal: "nzTotal",
    nzWidthConfig: "nzWidthConfig",
    nzData: "nzData",
    nzCustomColumn: "nzCustomColumn",
    nzPaginationPosition: "nzPaginationPosition",
    nzScroll: "nzScroll",
    nzPaginationType: "nzPaginationType",
    nzFrontPagination: "nzFrontPagination",
    nzTemplateMode: "nzTemplateMode",
    nzShowPagination: "nzShowPagination",
    nzLoading: "nzLoading",
    nzOuterBordered: "nzOuterBordered",
    nzLoadingIndicator: "nzLoadingIndicator",
    nzBordered: "nzBordered",
    nzSize: "nzSize",
    nzShowSizeChanger: "nzShowSizeChanger",
    nzHideOnSinglePage: "nzHideOnSinglePage",
    nzShowQuickJumper: "nzShowQuickJumper",
    nzSimple: "nzSimple"
  },
  outputs: {
    nzPageSizeChange: "nzPageSizeChange",
    nzPageIndexChange: "nzPageIndexChange",
    nzQueryParams: "nzQueryParams",
    nzCurrentPageDataChange: "nzCurrentPageDataChange",
    nzCustomColumnChange: "nzCustomColumnChange"
  },
  exportAs: ["nzTable"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzTableStyleService, NzTableDataService]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c07,
  decls: 14,
  vars: 27,
  consts: [["tableMainElement", ""], ["defaultTemplate", ""], ["paginationTemplate", ""], ["contentTemplate", ""], [3, "nzDelay", "nzSpinning", "nzIndicator"], [4, "ngIf"], [1, "ant-table"], [3, "title", 4, "ngIf"], [3, "data", "scrollX", "scrollY", "contentTemplate", "listOfColWidth", "theadTemplate", "verticalScrollBarWidth", "virtualTemplate", "virtualItemSize", "virtualMaxBufferPx", "virtualMinBufferPx", "tableMainElement", "virtualForTrackBy", 4, "ngIf", "ngIfElse"], [3, "footer", 4, "ngIf"], [3, "ngTemplateOutlet"], [3, "title"], [3, "data", "scrollX", "scrollY", "contentTemplate", "listOfColWidth", "theadTemplate", "verticalScrollBarWidth", "virtualTemplate", "virtualItemSize", "virtualMaxBufferPx", "virtualMinBufferPx", "tableMainElement", "virtualForTrackBy"], [3, "tableLayout", "listOfColWidth", "theadTemplate", "contentTemplate"], [3, "footer"], ["class", "ant-table-pagination ant-table-pagination-right", 3, "hidden", "nzShowSizeChanger", "nzPageSizeOptions", "nzItemRender", "nzShowQuickJumper", "nzHideOnSinglePage", "nzShowTotal", "nzSize", "nzPageSize", "nzTotal", "nzSimple", "nzPageIndex", "nzPageSizeChange", "nzPageIndexChange", 4, "ngIf"], [1, "ant-table-pagination", "ant-table-pagination-right", 3, "nzPageSizeChange", "nzPageIndexChange", "hidden", "nzShowSizeChanger", "nzPageSizeOptions", "nzItemRender", "nzShowQuickJumper", "nzHideOnSinglePage", "nzShowTotal", "nzSize", "nzPageSize", "nzTotal", "nzSimple", "nzPageIndex"]],
  template: function NzTableComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "nz-spin", 4);
      \u0275\u0275template(1, NzTableComponent_ng_container_1_Template, 2, 1, "ng-container", 5);
      \u0275\u0275elementStart(2, "div", 6, 0);
      \u0275\u0275template(4, NzTableComponent_nz_table_title_footer_4_Template, 1, 1, "nz-table-title-footer", 7)(5, NzTableComponent_nz_table_inner_scroll_5_Template, 1, 13, "nz-table-inner-scroll", 8)(6, NzTableComponent_ng_template_6_Template, 1, 4, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(8, NzTableComponent_nz_table_title_footer_8_Template, 1, 1, "nz-table-title-footer", 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(9, NzTableComponent_ng_container_9_Template, 2, 1, "ng-container", 5);
      \u0275\u0275elementEnd();
      \u0275\u0275template(10, NzTableComponent_ng_template_10_Template, 1, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(12, NzTableComponent_ng_template_12_Template, 1, 0, "ng-template", null, 3, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      const defaultTemplate_r6 = \u0275\u0275reference(7);
      \u0275\u0275property("nzDelay", ctx.nzLoadingDelay)("nzSpinning", ctx.nzLoading)("nzIndicator", ctx.nzLoadingIndicator);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.nzPaginationPosition === "both" || ctx.nzPaginationPosition === "top");
      \u0275\u0275advance();
      \u0275\u0275classProp("ant-table-rtl", ctx.dir === "rtl")("ant-table-fixed-header", ctx.nzData.length && ctx.scrollY)("ant-table-fixed-column", ctx.scrollX)("ant-table-has-fix-left", ctx.hasFixLeft)("ant-table-has-fix-right", ctx.hasFixRight)("ant-table-bordered", ctx.nzBordered)("nz-table-out-bordered", ctx.nzOuterBordered && !ctx.nzBordered)("ant-table-middle", ctx.nzSize === "middle")("ant-table-small", ctx.nzSize === "small");
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", ctx.nzTitle);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.scrollY || ctx.scrollX)("ngIfElse", defaultTemplate_r6);
      \u0275\u0275advance(3);
      \u0275\u0275property("ngIf", ctx.nzFooter);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.nzPaginationPosition === "both" || ctx.nzPaginationPosition === "bottom");
    }
  },
  dependencies: [NzSpinComponent, NgIf, NgTemplateOutlet, NzTableTitleFooterComponent, NzTableInnerScrollComponent, NzTableInnerDefaultComponent, NzPaginationModule, NzPaginationComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzTableComponent = _NzTableComponent;
__decorate([InputBoolean()], NzTableComponent.prototype, "nzFrontPagination", void 0);
__decorate([InputBoolean()], NzTableComponent.prototype, "nzTemplateMode", void 0);
__decorate([InputBoolean()], NzTableComponent.prototype, "nzShowPagination", void 0);
__decorate([InputBoolean()], NzTableComponent.prototype, "nzLoading", void 0);
__decorate([InputBoolean()], NzTableComponent.prototype, "nzOuterBordered", void 0);
__decorate([WithConfig()], NzTableComponent.prototype, "nzLoadingIndicator", void 0);
__decorate([WithConfig(), InputBoolean()], NzTableComponent.prototype, "nzBordered", void 0);
__decorate([WithConfig()], NzTableComponent.prototype, "nzSize", void 0);
__decorate([WithConfig(), InputBoolean()], NzTableComponent.prototype, "nzShowSizeChanger", void 0);
__decorate([WithConfig(), InputBoolean()], NzTableComponent.prototype, "nzHideOnSinglePage", void 0);
__decorate([WithConfig(), InputBoolean()], NzTableComponent.prototype, "nzShowQuickJumper", void 0);
__decorate([WithConfig(), InputBoolean()], NzTableComponent.prototype, "nzSimple", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableComponent, [{
    type: Component,
    args: [{
      selector: "nz-table",
      exportAs: "nzTable",
      providers: [NzTableStyleService, NzTableDataService],
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <nz-spin [nzDelay]="nzLoadingDelay" [nzSpinning]="nzLoading" [nzIndicator]="nzLoadingIndicator">
      <ng-container *ngIf="nzPaginationPosition === 'both' || nzPaginationPosition === 'top'">
        <ng-template [ngTemplateOutlet]="paginationTemplate"></ng-template>
      </ng-container>
      <div
        #tableMainElement
        class="ant-table"
        [class.ant-table-rtl]="dir === 'rtl'"
        [class.ant-table-fixed-header]="nzData.length && scrollY"
        [class.ant-table-fixed-column]="scrollX"
        [class.ant-table-has-fix-left]="hasFixLeft"
        [class.ant-table-has-fix-right]="hasFixRight"
        [class.ant-table-bordered]="nzBordered"
        [class.nz-table-out-bordered]="nzOuterBordered && !nzBordered"
        [class.ant-table-middle]="nzSize === 'middle'"
        [class.ant-table-small]="nzSize === 'small'"
      >
        <nz-table-title-footer [title]="nzTitle" *ngIf="nzTitle"></nz-table-title-footer>
        <nz-table-inner-scroll
          *ngIf="scrollY || scrollX; else defaultTemplate"
          [data]="data"
          [scrollX]="scrollX"
          [scrollY]="scrollY"
          [contentTemplate]="contentTemplate"
          [listOfColWidth]="listOfAutoColWidth"
          [theadTemplate]="theadTemplate"
          [verticalScrollBarWidth]="verticalScrollBarWidth"
          [virtualTemplate]="nzVirtualScrollDirective ? nzVirtualScrollDirective.templateRef : null"
          [virtualItemSize]="nzVirtualItemSize"
          [virtualMaxBufferPx]="nzVirtualMaxBufferPx"
          [virtualMinBufferPx]="nzVirtualMinBufferPx"
          [tableMainElement]="tableMainElement"
          [virtualForTrackBy]="nzVirtualForTrackBy"
        ></nz-table-inner-scroll>
        <ng-template #defaultTemplate>
          <nz-table-inner-default
            [tableLayout]="nzTableLayout"
            [listOfColWidth]="listOfManualColWidth"
            [theadTemplate]="theadTemplate"
            [contentTemplate]="contentTemplate"
          ></nz-table-inner-default>
        </ng-template>
        <nz-table-title-footer [footer]="nzFooter" *ngIf="nzFooter"></nz-table-title-footer>
      </div>
      <ng-container *ngIf="nzPaginationPosition === 'both' || nzPaginationPosition === 'bottom'">
        <ng-template [ngTemplateOutlet]="paginationTemplate"></ng-template>
      </ng-container>
    </nz-spin>
    <ng-template #paginationTemplate>
      <nz-pagination
        *ngIf="nzShowPagination && data.length"
        [hidden]="!showPagination"
        class="ant-table-pagination ant-table-pagination-right"
        [nzShowSizeChanger]="nzShowSizeChanger"
        [nzPageSizeOptions]="nzPageSizeOptions"
        [nzItemRender]="nzItemRender!"
        [nzShowQuickJumper]="nzShowQuickJumper"
        [nzHideOnSinglePage]="nzHideOnSinglePage"
        [nzShowTotal]="nzShowTotal"
        [nzSize]="nzPaginationType === 'small' ? 'small' : nzSize === 'default' ? 'default' : 'small'"
        [nzPageSize]="nzPageSize"
        [nzTotal]="nzTotal"
        [nzSimple]="nzSimple"
        [nzPageIndex]="nzPageIndex"
        (nzPageSizeChange)="onPageSizeChange($event)"
        (nzPageIndexChange)="onPageIndexChange($event)"
      ></nz-pagination>
    </ng-template>
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
  `,
      host: {
        class: "ant-table-wrapper",
        "[class.ant-table-wrapper-rtl]": 'dir === "rtl"',
        "[class.ant-table-custom-column]": `nzCustomColumn.length`
      },
      imports: [NzSpinComponent, NgIf, NgTemplateOutlet, NzTableTitleFooterComponent, NzTableInnerScrollComponent, NzTableInnerDefaultComponent, NzPaginationModule],
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NzResizeObserver
  }, {
    type: NzConfigService
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzTableStyleService
  }, {
    type: NzTableDataService
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzTableLayout: [{
      type: Input
    }],
    nzShowTotal: [{
      type: Input
    }],
    nzItemRender: [{
      type: Input
    }],
    nzTitle: [{
      type: Input
    }],
    nzFooter: [{
      type: Input
    }],
    nzNoResult: [{
      type: Input
    }],
    nzPageSizeOptions: [{
      type: Input
    }],
    nzVirtualItemSize: [{
      type: Input
    }],
    nzVirtualMaxBufferPx: [{
      type: Input
    }],
    nzVirtualMinBufferPx: [{
      type: Input
    }],
    nzVirtualForTrackBy: [{
      type: Input
    }],
    nzLoadingDelay: [{
      type: Input
    }],
    nzPageIndex: [{
      type: Input
    }],
    nzPageSize: [{
      type: Input
    }],
    nzTotal: [{
      type: Input
    }],
    nzWidthConfig: [{
      type: Input
    }],
    nzData: [{
      type: Input
    }],
    nzCustomColumn: [{
      type: Input
    }],
    nzPaginationPosition: [{
      type: Input
    }],
    nzScroll: [{
      type: Input
    }],
    nzPaginationType: [{
      type: Input
    }],
    nzFrontPagination: [{
      type: Input
    }],
    nzTemplateMode: [{
      type: Input
    }],
    nzShowPagination: [{
      type: Input
    }],
    nzLoading: [{
      type: Input
    }],
    nzOuterBordered: [{
      type: Input
    }],
    nzLoadingIndicator: [{
      type: Input
    }],
    nzBordered: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzShowSizeChanger: [{
      type: Input
    }],
    nzHideOnSinglePage: [{
      type: Input
    }],
    nzShowQuickJumper: [{
      type: Input
    }],
    nzSimple: [{
      type: Input
    }],
    nzPageSizeChange: [{
      type: Output
    }],
    nzPageIndexChange: [{
      type: Output
    }],
    nzQueryParams: [{
      type: Output
    }],
    nzCurrentPageDataChange: [{
      type: Output
    }],
    nzCustomColumnChange: [{
      type: Output
    }],
    nzVirtualScrollDirective: [{
      type: ContentChild,
      args: [NzTableVirtualScrollDirective, {
        static: false
      }]
    }],
    nzTableInnerScrollComponent: [{
      type: ViewChild,
      args: [NzTableInnerScrollComponent]
    }]
  });
})();
var _NzTrDirective = class _NzTrDirective {
  constructor(nzTableStyleService) {
    this.nzTableStyleService = nzTableStyleService;
    this.destroy$ = new Subject();
    this.listOfFixedColumns$ = new ReplaySubject(1);
    this.listOfColumns$ = new ReplaySubject(1);
    this.listOfFixedColumnsChanges$ = this.listOfFixedColumns$.pipe(switchMap((list) => merge(...[this.listOfFixedColumns$, ...list.map((c) => c.changes$)]).pipe(mergeMap(() => this.listOfFixedColumns$))), takeUntil(this.destroy$));
    this.listOfFixedLeftColumnChanges$ = this.listOfFixedColumnsChanges$.pipe(map((list) => list.filter((item) => item.nzLeft !== false)));
    this.listOfFixedRightColumnChanges$ = this.listOfFixedColumnsChanges$.pipe(map((list) => list.filter((item) => item.nzRight !== false)));
    this.listOfColumnsChanges$ = this.listOfColumns$.pipe(switchMap((list) => merge(...[this.listOfColumns$, ...list.map((c) => c.changes$)]).pipe(mergeMap(() => this.listOfColumns$))), takeUntil(this.destroy$));
    this.isInsideTable = false;
    this.isInsideTable = !!nzTableStyleService;
  }
  ngAfterContentInit() {
    if (this.nzTableStyleService) {
      this.listOfCellFixedDirective.changes.pipe(startWith(this.listOfCellFixedDirective), takeUntil(this.destroy$)).subscribe(this.listOfFixedColumns$);
      this.listOfNzThDirective.changes.pipe(startWith(this.listOfNzThDirective), takeUntil(this.destroy$)).subscribe(this.listOfColumns$);
      this.listOfFixedLeftColumnChanges$.subscribe((listOfFixedLeft) => {
        listOfFixedLeft.forEach((cell) => cell.setIsLastLeft(cell === listOfFixedLeft[listOfFixedLeft.length - 1]));
      });
      this.listOfFixedRightColumnChanges$.subscribe((listOfFixedRight) => {
        listOfFixedRight.forEach((cell) => cell.setIsFirstRight(cell === listOfFixedRight[0]));
      });
      combineLatest([this.nzTableStyleService.listOfListOfThWidth$, this.listOfFixedLeftColumnChanges$]).pipe(takeUntil(this.destroy$)).subscribe(([listOfAutoWidth, listOfLeftCell]) => {
        listOfLeftCell.forEach((cell, index) => {
          if (cell.isAutoLeft) {
            const currentArray = listOfLeftCell.slice(0, index);
            const count = currentArray.reduce((pre, cur) => pre + (cur.colspan || cur.colSpan || 1), 0);
            const width = listOfAutoWidth.slice(0, count).reduce((pre, cur) => pre + cur, 0);
            cell.setAutoLeftWidth(`${width}px`);
          }
        });
      });
      combineLatest([this.nzTableStyleService.listOfListOfThWidth$, this.listOfFixedRightColumnChanges$]).pipe(takeUntil(this.destroy$)).subscribe(([listOfAutoWidth, listOfRightCell]) => {
        listOfRightCell.forEach((_, index) => {
          const cell = listOfRightCell[listOfRightCell.length - index - 1];
          if (cell.isAutoRight) {
            const currentArray = listOfRightCell.slice(listOfRightCell.length - index, listOfRightCell.length);
            const count = currentArray.reduce((pre, cur) => pre + (cur.colspan || cur.colSpan || 1), 0);
            const width = listOfAutoWidth.slice(listOfAutoWidth.length - count, listOfAutoWidth.length).reduce((pre, cur) => pre + cur, 0);
            cell.setAutoRightWidth(`${width}px`);
          }
        });
      });
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzTrDirective.\u0275fac = function NzTrDirective_Factory(t) {
  return new (t || _NzTrDirective)(\u0275\u0275directiveInject(NzTableStyleService, 8));
};
_NzTrDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzTrDirective,
  selectors: [["tr", 3, "mat-row", "", 3, "mat-header-row", "", 3, "nz-table-measure-row", "", 3, "nzExpand", "", 3, "nz-table-fixed-row", ""]],
  contentQueries: function NzTrDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, NzThMeasureDirective, 4);
      \u0275\u0275contentQuery(dirIndex, NzCellFixedDirective, 4);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzThDirective = _t);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfCellFixedDirective = _t);
    }
  },
  hostVars: 2,
  hostBindings: function NzTrDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-row", ctx.isInsideTable);
    }
  },
  standalone: true
});
var NzTrDirective = _NzTrDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTrDirective, [{
    type: Directive,
    args: [{
      selector: "tr:not([mat-row]):not([mat-header-row]):not([nz-table-measure-row]):not([nzExpand]):not([nz-table-fixed-row])",
      host: {
        "[class.ant-table-row]": "isInsideTable"
      },
      standalone: true
    }]
  }], () => [{
    type: NzTableStyleService,
    decorators: [{
      type: Optional
    }]
  }], {
    listOfNzThDirective: [{
      type: ContentChildren,
      args: [NzThMeasureDirective]
    }],
    listOfCellFixedDirective: [{
      type: ContentChildren,
      args: [NzCellFixedDirective]
    }]
  });
})();
var _NzTheadComponent = class _NzTheadComponent {
  constructor(elementRef, renderer, nzTableStyleService, nzTableDataService) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.nzTableStyleService = nzTableStyleService;
    this.nzTableDataService = nzTableDataService;
    this.destroy$ = new Subject();
    this.isInsideTable = false;
    this.nzSortOrderChange = new EventEmitter();
    this.isInsideTable = !!this.nzTableStyleService;
  }
  ngOnInit() {
    if (this.nzTableStyleService) {
      this.nzTableStyleService.setTheadTemplate(this.templateRef);
    }
  }
  ngAfterContentInit() {
    if (this.nzTableStyleService) {
      const firstTableRow$ = this.listOfNzTrDirective.changes.pipe(startWith(this.listOfNzTrDirective), map((item) => item && item.first));
      const listOfColumnsChanges$ = firstTableRow$.pipe(switchMap((firstTableRow) => firstTableRow ? firstTableRow.listOfColumnsChanges$ : EMPTY), takeUntil(this.destroy$));
      listOfColumnsChanges$.subscribe((data) => this.nzTableStyleService.setListOfTh(data));
      this.nzTableStyleService.enableAutoMeasure$.pipe(switchMap((enable) => enable ? listOfColumnsChanges$ : of([]))).pipe(takeUntil(this.destroy$)).subscribe((data) => this.nzTableStyleService.setListOfMeasureColumn(data));
      const listOfFixedLeftColumnChanges$ = firstTableRow$.pipe(switchMap((firstTr) => firstTr ? firstTr.listOfFixedLeftColumnChanges$ : EMPTY), takeUntil(this.destroy$));
      const listOfFixedRightColumnChanges$ = firstTableRow$.pipe(switchMap((firstTr) => firstTr ? firstTr.listOfFixedRightColumnChanges$ : EMPTY), takeUntil(this.destroy$));
      listOfFixedLeftColumnChanges$.subscribe((listOfFixedLeftColumn) => {
        this.nzTableStyleService.setHasFixLeft(listOfFixedLeftColumn.length !== 0);
      });
      listOfFixedRightColumnChanges$.subscribe((listOfFixedRightColumn) => {
        this.nzTableStyleService.setHasFixRight(listOfFixedRightColumn.length !== 0);
      });
    }
    if (this.nzTableDataService) {
      const listOfColumn$ = this.listOfNzThAddOnComponent.changes.pipe(startWith(this.listOfNzThAddOnComponent));
      const manualSort$ = listOfColumn$.pipe(switchMap(() => merge(...this.listOfNzThAddOnComponent.map((th) => th.manualClickOrder$))), takeUntil(this.destroy$));
      manualSort$.subscribe((data) => {
        const emitValue = {
          key: data.nzColumnKey,
          value: data.sortOrder
        };
        this.nzSortOrderChange.emit(emitValue);
        if (data.nzSortFn && data.nzSortPriority === false) {
          this.listOfNzThAddOnComponent.filter((th) => th !== data).forEach((th) => th.clearSortOrder());
        }
      });
      const listOfCalcOperator$ = listOfColumn$.pipe(
        switchMap((list) => merge(...[listOfColumn$, ...list.map((c) => c.calcOperatorChange$)]).pipe(mergeMap(() => listOfColumn$))),
        map((list) => list.filter((item) => !!item.nzSortFn || !!item.nzFilterFn).map((item) => {
          const {
            nzSortFn,
            sortOrder,
            nzFilterFn,
            nzFilterValue,
            nzSortPriority,
            nzColumnKey
          } = item;
          return {
            key: nzColumnKey,
            sortFn: nzSortFn,
            sortPriority: nzSortPriority,
            sortOrder,
            filterFn: nzFilterFn,
            filterValue: nzFilterValue
          };
        })),
        // TODO: after checked error here
        delay(0),
        takeUntil(this.destroy$)
      );
      listOfCalcOperator$.subscribe((list) => {
        this.nzTableDataService.listOfCalcOperator$.next(list);
      });
    }
  }
  ngAfterViewInit() {
    if (this.nzTableStyleService) {
      this.renderer.removeChild(this.renderer.parentNode(this.elementRef.nativeElement), this.elementRef.nativeElement);
    }
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzTheadComponent.\u0275fac = function NzTheadComponent_Factory(t) {
  return new (t || _NzTheadComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NzTableStyleService, 8), \u0275\u0275directiveInject(NzTableDataService, 8));
};
_NzTheadComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTheadComponent,
  selectors: [["thead", 9, "ant-table-thead"]],
  contentQueries: function NzTheadComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, NzTrDirective, 5);
      \u0275\u0275contentQuery(dirIndex, NzThAddOnComponent, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzTrDirective = _t);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listOfNzThAddOnComponent = _t);
    }
  },
  viewQuery: function NzTheadComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c132, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.templateRef = _t.first);
    }
  },
  outputs: {
    nzSortOrderChange: "nzSortOrderChange"
  },
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c07,
  decls: 3,
  vars: 1,
  consts: [["contentTemplate", ""], [4, "ngIf"], [3, "ngTemplateOutlet"]],
  template: function NzTheadComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzTheadComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, NzTheadComponent_ng_container_2_Template, 2, 1, "ng-container", 1);
    }
    if (rf & 2) {
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", !ctx.isInsideTable);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var NzTheadComponent = _NzTheadComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTheadComponent, [{
    type: Component,
    args: [{
      selector: "thead:not(.ant-table-thead)",
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `
    <ng-template #contentTemplate>
      <ng-content></ng-content>
    </ng-template>
    <ng-container *ngIf="!isInsideTable">
      <ng-template [ngTemplateOutlet]="contentTemplate"></ng-template>
    </ng-container>
  `,
      imports: [NgIf, NgTemplateOutlet],
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: NzTableStyleService,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NzTableDataService,
    decorators: [{
      type: Optional
    }]
  }], {
    templateRef: [{
      type: ViewChild,
      args: ["contentTemplate", {
        static: true
      }]
    }],
    listOfNzTrDirective: [{
      type: ContentChildren,
      args: [NzTrDirective, {
        descendants: true
      }]
    }],
    listOfNzThAddOnComponent: [{
      type: ContentChildren,
      args: [NzThAddOnComponent, {
        descendants: true
      }]
    }],
    nzSortOrderChange: [{
      type: Output
    }]
  });
})();
var _NzTrExpandDirective = class _NzTrExpandDirective {
  constructor() {
    this.nzExpand = true;
  }
};
_NzTrExpandDirective.\u0275fac = function NzTrExpandDirective_Factory(t) {
  return new (t || _NzTrExpandDirective)();
};
_NzTrExpandDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzTrExpandDirective,
  selectors: [["tr", "nzExpand", ""]],
  hostAttrs: [1, "ant-table-expanded-row"],
  hostVars: 1,
  hostBindings: function NzTrExpandDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275hostProperty("hidden", !ctx.nzExpand);
    }
  },
  inputs: {
    nzExpand: "nzExpand"
  },
  standalone: true
});
var NzTrExpandDirective = _NzTrExpandDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTrExpandDirective, [{
    type: Directive,
    args: [{
      selector: "tr[nzExpand]",
      host: {
        class: "ant-table-expanded-row",
        "[hidden]": `!nzExpand`
      },
      standalone: true
    }]
  }], () => [], {
    nzExpand: [{
      type: Input
    }]
  });
})();
var _NzTableModule = class _NzTableModule {
};
_NzTableModule.\u0275fac = function NzTableModule_Factory(t) {
  return new (t || _NzTableModule)();
};
_NzTableModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzTableModule
});
_NzTableModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzTableComponent, NzThAddOnComponent, NzTdAddOnComponent, NzTbodyComponent, NzTableTitleFooterComponent, NzTableInnerScrollComponent, NzTableSortersComponent, NzTableFilterComponent, NzTableSelectionComponent, NzFilterTriggerComponent, NzThSelectionComponent]
});
var NzTableModule = _NzTableModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTableModule, [{
    type: NgModule,
    args: [{
      imports: [NzTableComponent, NzThAddOnComponent, NzTableCellDirective, NzThMeasureDirective, NzTdAddOnComponent, NzTheadComponent, NzTbodyComponent, NzTrDirective, NzTrExpandDirective, NzTableVirtualScrollDirective, NzCellFixedDirective, NzCustomColumnDirective, NzTableContentComponent, NzTableTitleFooterComponent, NzTableInnerDefaultComponent, NzTableInnerScrollComponent, NzTrMeasureComponent, NzRowIndentDirective, NzRowExpandButtonDirective, NzCellBreakWordDirective, NzCellAlignDirective, NzTableSortersComponent, NzTableFilterComponent, NzTableSelectionComponent, NzCellEllipsisDirective, NzFilterTriggerComponent, NzTableFixedRowComponent, NzThSelectionComponent],
      exports: [NzTableComponent, NzThAddOnComponent, NzTableCellDirective, NzThMeasureDirective, NzTdAddOnComponent, NzTheadComponent, NzTbodyComponent, NzTrDirective, NzTableVirtualScrollDirective, NzCellFixedDirective, NzCustomColumnDirective, NzFilterTriggerComponent, NzTrExpandDirective, NzCellBreakWordDirective, NzCellAlignDirective, NzCellEllipsisDirective, NzTableFixedRowComponent, NzThSelectionComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-resizable.mjs
var _c08 = ["*"];
function NzResizeHandlesComponent_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-resize-handle", 0);
  }
  if (rf & 2) {
    const option_r1 = ctx.$implicit;
    \u0275\u0275property("nzDirection", option_r1.direction)("nzCursorType", option_r1.cursorType);
  }
}
function getEventWithPoint(event) {
  return isTouchEvent(event) ? event.touches[0] || event.changedTouches[0] : event;
}
var _NzResizableService = class _NzResizableService {
  constructor(ngZone, document2) {
    this.ngZone = ngZone;
    this.listeners = /* @__PURE__ */ new Map();
    this.handleMouseDownOutsideAngular$ = new Subject();
    this.documentMouseUpOutsideAngular$ = new Subject();
    this.documentMouseMoveOutsideAngular$ = new Subject();
    this.mouseEnteredOutsideAngular$ = new Subject();
    this.document = document2;
  }
  startResizing(event) {
    const _isTouchEvent = isTouchEvent(event);
    this.clearListeners();
    const moveEvent = _isTouchEvent ? "touchmove" : "mousemove";
    const upEvent = _isTouchEvent ? "touchend" : "mouseup";
    const moveEventHandler = (e) => {
      this.documentMouseMoveOutsideAngular$.next(e);
    };
    const upEventHandler = (e) => {
      this.documentMouseUpOutsideAngular$.next(e);
      this.clearListeners();
    };
    this.listeners.set(moveEvent, moveEventHandler);
    this.listeners.set(upEvent, upEventHandler);
    this.ngZone.runOutsideAngular(() => {
      this.listeners.forEach((handler, name) => {
        this.document.addEventListener(name, handler);
      });
    });
  }
  clearListeners() {
    this.listeners.forEach((handler, name) => {
      this.document.removeEventListener(name, handler);
    });
    this.listeners.clear();
  }
  ngOnDestroy() {
    this.handleMouseDownOutsideAngular$.complete();
    this.documentMouseUpOutsideAngular$.complete();
    this.documentMouseMoveOutsideAngular$.complete();
    this.mouseEnteredOutsideAngular$.complete();
    this.clearListeners();
  }
};
_NzResizableService.\u0275fac = function NzResizableService_Factory(t) {
  return new (t || _NzResizableService)(\u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT));
};
_NzResizableService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NzResizableService,
  factory: _NzResizableService.\u0275fac
});
var NzResizableService = _NzResizableService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizableService, [{
    type: Injectable
  }], () => [{
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var _NzResizableDirective = class _NzResizableDirective {
  constructor(elementRef, renderer, nzResizableService, platform, ngZone, destroy$) {
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.nzResizableService = nzResizableService;
    this.platform = platform;
    this.ngZone = ngZone;
    this.destroy$ = destroy$;
    this.nzBounds = "parent";
    this.nzMinHeight = 40;
    this.nzMinWidth = 40;
    this.nzGridColumnCount = -1;
    this.nzMaxColumn = -1;
    this.nzMinColumn = -1;
    this.nzLockAspectRatio = false;
    this.nzPreview = false;
    this.nzDisabled = false;
    this.nzResize = new EventEmitter();
    this.nzResizeEnd = new EventEmitter();
    this.nzResizeStart = new EventEmitter();
    this.resizing = false;
    this.currentHandleEvent = null;
    this.ghostElement = null;
    this.sizeCache = null;
    this.nzResizableService.handleMouseDownOutsideAngular$.pipe(takeUntil(this.destroy$)).subscribe((event) => {
      if (this.nzDisabled) {
        return;
      }
      this.resizing = true;
      this.nzResizableService.startResizing(event.mouseEvent);
      this.currentHandleEvent = event;
      if (this.nzResizeStart.observers.length) {
        this.ngZone.run(() => this.nzResizeStart.emit({
          mouseEvent: event.mouseEvent,
          direction: event.direction
        }));
      }
      this.elRect = this.el.getBoundingClientRect();
    });
    this.nzResizableService.documentMouseUpOutsideAngular$.pipe(takeUntil(this.destroy$), filter(Boolean)).subscribe((event) => {
      if (this.resizing) {
        this.resizing = false;
        this.nzResizableService.documentMouseUpOutsideAngular$.next(null);
        this.endResize(event);
      }
    });
    this.nzResizableService.documentMouseMoveOutsideAngular$.pipe(takeUntil(this.destroy$)).subscribe((event) => {
      if (this.resizing) {
        this.resize(event);
      }
    });
  }
  setPosition() {
    const position = getComputedStyle(this.el).position;
    if (position === "static" || !position) {
      this.renderer.setStyle(this.el, "position", "relative");
    }
  }
  calcSize(width, height, ratio) {
    let newWidth;
    let newHeight;
    let maxWidth;
    let maxHeight;
    let col = 0;
    let spanWidth = 0;
    let minWidth = this.nzMinWidth;
    let boundWidth = Infinity;
    let boundHeight = Infinity;
    if (this.nzBounds === "parent") {
      const parent = this.renderer.parentNode(this.el);
      if (parent instanceof HTMLElement) {
        const parentRect = parent.getBoundingClientRect();
        boundWidth = parentRect.width;
        boundHeight = parentRect.height;
      }
    } else if (this.nzBounds === "window") {
      if (typeof window !== "undefined") {
        boundWidth = window.innerWidth;
        boundHeight = window.innerHeight;
      }
    } else if (this.nzBounds && this.nzBounds.nativeElement && this.nzBounds.nativeElement instanceof HTMLElement) {
      const boundsRect = this.nzBounds.nativeElement.getBoundingClientRect();
      boundWidth = boundsRect.width;
      boundHeight = boundsRect.height;
    }
    maxWidth = ensureInBounds(this.nzMaxWidth, boundWidth);
    maxHeight = ensureInBounds(this.nzMaxHeight, boundHeight);
    if (this.nzGridColumnCount !== -1) {
      spanWidth = maxWidth / this.nzGridColumnCount;
      minWidth = this.nzMinColumn !== -1 ? spanWidth * this.nzMinColumn : minWidth;
      maxWidth = this.nzMaxColumn !== -1 ? spanWidth * this.nzMaxColumn : maxWidth;
    }
    if (ratio !== -1) {
      if (/(left|right)/i.test(this.currentHandleEvent.direction)) {
        newWidth = Math.min(Math.max(width, minWidth), maxWidth);
        newHeight = Math.min(Math.max(newWidth / ratio, this.nzMinHeight), maxHeight);
        if (newHeight >= maxHeight || newHeight <= this.nzMinHeight) {
          newWidth = Math.min(Math.max(newHeight * ratio, minWidth), maxWidth);
        }
      } else {
        newHeight = Math.min(Math.max(height, this.nzMinHeight), maxHeight);
        newWidth = Math.min(Math.max(newHeight * ratio, minWidth), maxWidth);
        if (newWidth >= maxWidth || newWidth <= minWidth) {
          newHeight = Math.min(Math.max(newWidth / ratio, this.nzMinHeight), maxHeight);
        }
      }
    } else {
      newWidth = Math.min(Math.max(width, minWidth), maxWidth);
      newHeight = Math.min(Math.max(height, this.nzMinHeight), maxHeight);
    }
    if (this.nzGridColumnCount !== -1) {
      col = Math.round(newWidth / spanWidth);
      newWidth = col * spanWidth;
    }
    return {
      col,
      width: newWidth,
      height: newHeight
    };
  }
  resize(event) {
    const elRect = this.elRect;
    const resizeEvent = getEventWithPoint(event);
    const handleEvent = getEventWithPoint(this.currentHandleEvent.mouseEvent);
    let width = elRect.width;
    let height = elRect.height;
    const ratio = this.nzLockAspectRatio ? width / height : -1;
    switch (this.currentHandleEvent.direction) {
      case "bottomRight":
        width = resizeEvent.clientX - elRect.left;
        height = resizeEvent.clientY - elRect.top;
        break;
      case "bottomLeft":
        width = elRect.width + handleEvent.clientX - resizeEvent.clientX;
        height = resizeEvent.clientY - elRect.top;
        break;
      case "topRight":
        width = resizeEvent.clientX - elRect.left;
        height = elRect.height + handleEvent.clientY - resizeEvent.clientY;
        break;
      case "topLeft":
        width = elRect.width + handleEvent.clientX - resizeEvent.clientX;
        height = elRect.height + handleEvent.clientY - resizeEvent.clientY;
        break;
      case "top":
        height = elRect.height + handleEvent.clientY - resizeEvent.clientY;
        break;
      case "right":
        width = resizeEvent.clientX - elRect.left;
        break;
      case "bottom":
        height = resizeEvent.clientY - elRect.top;
        break;
      case "left":
        width = elRect.width + handleEvent.clientX - resizeEvent.clientX;
    }
    const size = this.calcSize(width, height, ratio);
    this.sizeCache = __spreadValues({}, size);
    if (this.nzResize.observers.length) {
      this.ngZone.run(() => {
        this.nzResize.emit(__spreadProps(__spreadValues({}, size), {
          mouseEvent: event,
          direction: this.currentHandleEvent.direction
        }));
      });
    }
    if (this.nzPreview) {
      this.previewResize(size);
    }
  }
  endResize(event) {
    this.removeGhostElement();
    const size = this.sizeCache ? __spreadValues({}, this.sizeCache) : {
      width: this.elRect.width,
      height: this.elRect.height
    };
    if (this.nzResizeEnd.observers.length) {
      this.ngZone.run(() => {
        this.nzResizeEnd.emit(__spreadProps(__spreadValues({}, size), {
          mouseEvent: event,
          direction: this.currentHandleEvent.direction
        }));
      });
    }
    this.sizeCache = null;
    this.currentHandleEvent = null;
  }
  previewResize({
    width,
    height
  }) {
    this.createGhostElement();
    this.renderer.setStyle(this.ghostElement, "width", `${width}px`);
    this.renderer.setStyle(this.ghostElement, "height", `${height}px`);
  }
  createGhostElement() {
    if (!this.ghostElement) {
      this.ghostElement = this.renderer.createElement("div");
      this.renderer.setAttribute(this.ghostElement, "class", "nz-resizable-preview");
    }
    this.renderer.appendChild(this.el, this.ghostElement);
  }
  removeGhostElement() {
    if (this.ghostElement) {
      this.renderer.removeChild(this.el, this.ghostElement);
    }
  }
  ngAfterViewInit() {
    if (!this.platform.isBrowser) {
      return;
    }
    this.el = this.elementRef.nativeElement;
    this.setPosition();
    this.ngZone.runOutsideAngular(() => {
      fromEvent(this.el, "mouseenter").pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.nzResizableService.mouseEnteredOutsideAngular$.next(true);
      });
      fromEvent(this.el, "mouseleave").pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.nzResizableService.mouseEnteredOutsideAngular$.next(false);
      });
    });
  }
  ngOnDestroy() {
    this.ghostElement = null;
    this.sizeCache = null;
  }
};
_NzResizableDirective.\u0275fac = function NzResizableDirective_Factory(t) {
  return new (t || _NzResizableDirective)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NzResizableService), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(NzDestroyService));
};
_NzResizableDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzResizableDirective,
  selectors: [["", "nz-resizable", ""]],
  hostAttrs: [1, "nz-resizable"],
  hostVars: 4,
  hostBindings: function NzResizableDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("nz-resizable-resizing", ctx.resizing)("nz-resizable-disabled", ctx.nzDisabled);
    }
  },
  inputs: {
    nzBounds: "nzBounds",
    nzMaxHeight: "nzMaxHeight",
    nzMaxWidth: "nzMaxWidth",
    nzMinHeight: "nzMinHeight",
    nzMinWidth: "nzMinWidth",
    nzGridColumnCount: "nzGridColumnCount",
    nzMaxColumn: "nzMaxColumn",
    nzMinColumn: "nzMinColumn",
    nzLockAspectRatio: "nzLockAspectRatio",
    nzPreview: "nzPreview",
    nzDisabled: "nzDisabled"
  },
  outputs: {
    nzResize: "nzResize",
    nzResizeEnd: "nzResizeEnd",
    nzResizeStart: "nzResizeStart"
  },
  exportAs: ["nzResizable"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzResizableService, NzDestroyService])]
});
var NzResizableDirective = _NzResizableDirective;
__decorate([InputBoolean()], NzResizableDirective.prototype, "nzLockAspectRatio", void 0);
__decorate([InputBoolean()], NzResizableDirective.prototype, "nzPreview", void 0);
__decorate([InputBoolean()], NzResizableDirective.prototype, "nzDisabled", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizableDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-resizable]",
      exportAs: "nzResizable",
      providers: [NzResizableService, NzDestroyService],
      host: {
        class: "nz-resizable",
        "[class.nz-resizable-resizing]": "resizing",
        "[class.nz-resizable-disabled]": "nzDisabled"
      },
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: NzResizableService
  }, {
    type: Platform
  }, {
    type: NgZone
  }, {
    type: NzDestroyService
  }], {
    nzBounds: [{
      type: Input
    }],
    nzMaxHeight: [{
      type: Input
    }],
    nzMaxWidth: [{
      type: Input
    }],
    nzMinHeight: [{
      type: Input
    }],
    nzMinWidth: [{
      type: Input
    }],
    nzGridColumnCount: [{
      type: Input
    }],
    nzMaxColumn: [{
      type: Input
    }],
    nzMinColumn: [{
      type: Input
    }],
    nzLockAspectRatio: [{
      type: Input
    }],
    nzPreview: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzResize: [{
      type: Output
    }],
    nzResizeEnd: [{
      type: Output
    }],
    nzResizeStart: [{
      type: Output
    }]
  });
})();
var NzResizeHandleMouseDownEvent = class {
  constructor(direction, mouseEvent) {
    this.direction = direction;
    this.mouseEvent = mouseEvent;
  }
};
var passiveEventListenerOptions = normalizePassiveListenerOptions({
  passive: true
});
var _NzResizeHandleComponent = class _NzResizeHandleComponent {
  constructor(ngZone, nzResizableService, renderer, host, destroy$) {
    this.ngZone = ngZone;
    this.nzResizableService = nzResizableService;
    this.renderer = renderer;
    this.host = host;
    this.destroy$ = destroy$;
    this.nzDirection = "bottomRight";
    this.nzCursorType = "window";
    this.nzMouseDown = new EventEmitter();
  }
  ngOnInit() {
    this.nzResizableService.mouseEnteredOutsideAngular$.pipe(takeUntil(this.destroy$)).subscribe((entered) => {
      if (entered) {
        this.renderer.addClass(this.host.nativeElement, "nz-resizable-handle-box-hover");
      } else {
        this.renderer.removeClass(this.host.nativeElement, "nz-resizable-handle-box-hover");
      }
    });
    this.ngZone.runOutsideAngular(() => {
      merge(fromEvent(this.host.nativeElement, "mousedown", passiveEventListenerOptions), fromEvent(this.host.nativeElement, "touchstart", passiveEventListenerOptions)).pipe(takeUntil(this.destroy$)).subscribe((event) => {
        this.nzResizableService.handleMouseDownOutsideAngular$.next(new NzResizeHandleMouseDownEvent(this.nzDirection, event));
      });
    });
  }
  onPointerDown(event) {
    event.target.setPointerCapture(event.pointerId);
  }
  onPointerUp(event) {
    event.target.releasePointerCapture(event.pointerId);
  }
};
_NzResizeHandleComponent.\u0275fac = function NzResizeHandleComponent_Factory(t) {
  return new (t || _NzResizeHandleComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(NzResizableService), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NzDestroyService));
};
_NzResizeHandleComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzResizeHandleComponent,
  selectors: [["nz-resize-handle"], ["", "nz-resize-handle", ""]],
  hostAttrs: [1, "nz-resizable-handle"],
  hostVars: 20,
  hostBindings: function NzResizeHandleComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("pointerdown", function NzResizeHandleComponent_pointerdown_HostBindingHandler($event) {
        return ctx.onPointerDown($event);
      })("pointerup", function NzResizeHandleComponent_pointerup_HostBindingHandler($event) {
        return ctx.onPointerUp($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275classProp("nz-resizable-handle-top", ctx.nzDirection === "top")("nz-resizable-handle-right", ctx.nzDirection === "right")("nz-resizable-handle-bottom", ctx.nzDirection === "bottom")("nz-resizable-handle-left", ctx.nzDirection === "left")("nz-resizable-handle-topRight", ctx.nzDirection === "topRight")("nz-resizable-handle-bottomRight", ctx.nzDirection === "bottomRight")("nz-resizable-handle-bottomLeft", ctx.nzDirection === "bottomLeft")("nz-resizable-handle-topLeft", ctx.nzDirection === "topLeft")("nz-resizable-handle-cursor-type-grid", ctx.nzCursorType === "grid")("nz-resizable-handle-cursor-type-window", ctx.nzCursorType === "window");
    }
  },
  inputs: {
    nzDirection: "nzDirection",
    nzCursorType: "nzCursorType"
  },
  outputs: {
    nzMouseDown: "nzMouseDown"
  },
  exportAs: ["nzResizeHandle"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzDestroyService]), \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c08,
  decls: 1,
  vars: 0,
  template: function NzResizeHandleComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var NzResizeHandleComponent = _NzResizeHandleComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeHandleComponent, [{
    type: Component,
    args: [{
      selector: "nz-resize-handle, [nz-resize-handle]",
      exportAs: "nzResizeHandle",
      template: ` <ng-content></ng-content> `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        class: "nz-resizable-handle",
        "[class.nz-resizable-handle-top]": `nzDirection === 'top'`,
        "[class.nz-resizable-handle-right]": `nzDirection === 'right'`,
        "[class.nz-resizable-handle-bottom]": `nzDirection === 'bottom'`,
        "[class.nz-resizable-handle-left]": `nzDirection === 'left'`,
        "[class.nz-resizable-handle-topRight]": `nzDirection === 'topRight'`,
        "[class.nz-resizable-handle-bottomRight]": `nzDirection === 'bottomRight'`,
        "[class.nz-resizable-handle-bottomLeft]": `nzDirection === 'bottomLeft'`,
        "[class.nz-resizable-handle-topLeft]": `nzDirection === 'topLeft'`,
        "[class.nz-resizable-handle-cursor-type-grid]": `nzCursorType === 'grid'`,
        "[class.nz-resizable-handle-cursor-type-window]": `nzCursorType === 'window'`
      },
      providers: [NzDestroyService],
      standalone: true
    }]
  }], () => [{
    type: NgZone
  }, {
    type: NzResizableService
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: NzDestroyService
  }], {
    nzDirection: [{
      type: Input
    }],
    nzCursorType: [{
      type: Input
    }],
    nzMouseDown: [{
      type: Output
    }],
    onPointerDown: [{
      type: HostListener,
      args: ["pointerdown", ["$event"]]
    }],
    onPointerUp: [{
      type: HostListener,
      args: ["pointerup", ["$event"]]
    }]
  });
})();
var DEFAULT_RESIZE_DIRECTION = ["bottomRight", "topRight", "bottomLeft", "topLeft", "bottom", "right", "top", "left"];
function normalizeResizeHandleOptions(value) {
  return value.map((val) => {
    if (typeof val === "string") {
      return {
        direction: val,
        cursorType: "window"
      };
    }
    return val;
  });
}
var _NzResizeHandlesComponent = class _NzResizeHandlesComponent {
  constructor() {
    this.nzDirections = DEFAULT_RESIZE_DIRECTION;
    this.resizeHandleOptions = normalizeResizeHandleOptions(this.nzDirections);
  }
  ngOnChanges(changes) {
    if (changes.nzDirections) {
      this.resizeHandleOptions = normalizeResizeHandleOptions(changes.nzDirections.currentValue);
    }
  }
};
_NzResizeHandlesComponent.\u0275fac = function NzResizeHandlesComponent_Factory(t) {
  return new (t || _NzResizeHandlesComponent)();
};
_NzResizeHandlesComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzResizeHandlesComponent,
  selectors: [["nz-resize-handles"]],
  inputs: {
    nzDirections: "nzDirections"
  },
  exportAs: ["nzResizeHandles"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 0,
  consts: [[3, "nzDirection", "nzCursorType"]],
  template: function NzResizeHandlesComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275repeaterCreate(0, NzResizeHandlesComponent_For_1_Template, 1, 2, "nz-resize-handle", 0, \u0275\u0275repeaterTrackByIdentity);
    }
    if (rf & 2) {
      \u0275\u0275repeater(ctx.resizeHandleOptions);
    }
  },
  dependencies: [NzResizeHandleComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzResizeHandlesComponent = _NzResizeHandlesComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizeHandlesComponent, [{
    type: Component,
    args: [{
      selector: "nz-resize-handles",
      exportAs: "nzResizeHandles",
      template: `
    @for (option of resizeHandleOptions; track option) {
      <nz-resize-handle [nzDirection]="option.direction" [nzCursorType]="option.cursorType" />
    }
  `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      imports: [NzResizeHandleComponent],
      standalone: true
    }]
  }], null, {
    nzDirections: [{
      type: Input
    }]
  });
})();
var _NzResizableModule = class _NzResizableModule {
};
_NzResizableModule.\u0275fac = function NzResizableModule_Factory(t) {
  return new (t || _NzResizableModule)();
};
_NzResizableModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzResizableModule
});
_NzResizableModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var NzResizableModule = _NzResizableModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzResizableModule, [{
    type: NgModule,
    args: [{
      imports: [NzResizableDirective, NzResizeHandleComponent, NzResizeHandlesComponent],
      exports: [NzResizableDirective, NzResizeHandleComponent, NzResizeHandlesComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-time-picker.mjs
var _c09 = ["hourListElement"];
var _c15 = ["minuteListElement"];
var _c25 = ["secondListElement"];
var _c33 = ["use12HoursListElement"];
function NzTimePickerPanelComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8)(1, "div", 9);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r0.dateHelper.format(ctx_r0.time == null ? null : ctx_r0.time.value, ctx_r0.format) || "\xA0");
  }
}
function NzTimePickerPanelComponent_ul_2_ng_container_2_li_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 13);
    \u0275\u0275listener("click", function NzTimePickerPanelComponent_ul_2_ng_container_2_li_1_Template_li_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const hour_r3 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.selectHour(hour_r3));
    });
    \u0275\u0275elementStart(1, "div", 14);
    \u0275\u0275text(2);
    \u0275\u0275pipe(3, "number");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const hour_r3 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275classProp("ant-picker-time-panel-cell-selected", ctx_r0.isSelectedHour(hour_r3))("ant-picker-time-panel-cell-disabled", hour_r3.disabled);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind2(3, 5, hour_r3.index, "2.0-0"));
  }
}
function NzTimePickerPanelComponent_ul_2_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTimePickerPanelComponent_ul_2_ng_container_2_li_1_Template, 4, 8, "li", 12);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const hour_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !(ctx_r0.nzHideDisabledOptions && hour_r3.disabled));
  }
}
function NzTimePickerPanelComponent_ul_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul", 10, 0);
    \u0275\u0275template(2, NzTimePickerPanelComponent_ul_2_ng_container_2_Template, 2, 1, "ng-container", 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.hourRange)("ngForTrackBy", ctx_r0.trackByFn);
  }
}
function NzTimePickerPanelComponent_ul_3_ng_container_2_li_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 13);
    \u0275\u0275listener("click", function NzTimePickerPanelComponent_ul_3_ng_container_2_li_1_Template_li_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const minute_r5 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.selectMinute(minute_r5));
    });
    \u0275\u0275elementStart(1, "div", 14);
    \u0275\u0275text(2);
    \u0275\u0275pipe(3, "number");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const minute_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275classProp("ant-picker-time-panel-cell-selected", ctx_r0.isSelectedMinute(minute_r5))("ant-picker-time-panel-cell-disabled", minute_r5.disabled);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind2(3, 5, minute_r5.index, "2.0-0"));
  }
}
function NzTimePickerPanelComponent_ul_3_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTimePickerPanelComponent_ul_3_ng_container_2_li_1_Template, 4, 8, "li", 12);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const minute_r5 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !(ctx_r0.nzHideDisabledOptions && minute_r5.disabled));
  }
}
function NzTimePickerPanelComponent_ul_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul", 10, 1);
    \u0275\u0275template(2, NzTimePickerPanelComponent_ul_3_ng_container_2_Template, 2, 1, "ng-container", 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.minuteRange)("ngForTrackBy", ctx_r0.trackByFn);
  }
}
function NzTimePickerPanelComponent_ul_4_ng_container_2_li_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 13);
    \u0275\u0275listener("click", function NzTimePickerPanelComponent_ul_4_ng_container_2_li_1_Template_li_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const second_r7 = \u0275\u0275nextContext().$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.selectSecond(second_r7));
    });
    \u0275\u0275elementStart(1, "div", 14);
    \u0275\u0275text(2);
    \u0275\u0275pipe(3, "number");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const second_r7 = \u0275\u0275nextContext().$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275classProp("ant-picker-time-panel-cell-selected", ctx_r0.isSelectedSecond(second_r7))("ant-picker-time-panel-cell-disabled", second_r7.disabled);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind2(3, 5, second_r7.index, "2.0-0"));
  }
}
function NzTimePickerPanelComponent_ul_4_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzTimePickerPanelComponent_ul_4_ng_container_2_li_1_Template, 4, 8, "li", 12);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const second_r7 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !(ctx_r0.nzHideDisabledOptions && second_r7.disabled));
  }
}
function NzTimePickerPanelComponent_ul_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul", 10, 2);
    \u0275\u0275template(2, NzTimePickerPanelComponent_ul_4_ng_container_2_Template, 2, 1, "ng-container", 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.secondRange)("ngForTrackBy", ctx_r0.trackByFn);
  }
}
function NzTimePickerPanelComponent_ul_5_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "li", 13);
    \u0275\u0275listener("click", function NzTimePickerPanelComponent_ul_5_ng_container_2_Template_li_click_1_listener() {
      const range_r9 = \u0275\u0275restoreView(_r8).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.select12Hours(range_r9));
    });
    \u0275\u0275elementStart(2, "div", 14);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const range_r9 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275classProp("ant-picker-time-panel-cell-selected", ctx_r0.isSelected12Hours(range_r9));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(range_r9.value);
  }
}
function NzTimePickerPanelComponent_ul_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul", 10, 3);
    \u0275\u0275template(2, NzTimePickerPanelComponent_ul_5_ng_container_2_Template, 4, 3, "ng-container", 15);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275property("ngForOf", ctx_r0.use12HoursRange);
  }
}
function NzTimePickerPanelComponent_div_6_div_1_ng_template_1_Template(rf, ctx) {
}
function NzTimePickerPanelComponent_div_6_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 23);
    \u0275\u0275template(1, NzTimePickerPanelComponent_div_6_div_1_ng_template_1_Template, 0, 0, "ng-template", 24);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.nzAddOn);
  }
}
function NzTimePickerPanelComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 16);
    \u0275\u0275template(1, NzTimePickerPanelComponent_div_6_div_1_Template, 2, 1, "div", 17);
    \u0275\u0275elementStart(2, "ul", 18)(3, "li", 19)(4, "a", 20);
    \u0275\u0275listener("click", function NzTimePickerPanelComponent_div_6_Template_a_click_4_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onClickNow());
    });
    \u0275\u0275text(5);
    \u0275\u0275pipe(6, "nzI18n");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(7, "li", 21)(8, "button", 22);
    \u0275\u0275listener("click", function NzTimePickerPanelComponent_div_6_Template_button_click_8_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onClickOk());
    });
    \u0275\u0275text(9);
    \u0275\u0275pipe(10, "nzI18n");
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.nzAddOn);
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r0.nzNowText || \u0275\u0275pipeBind1(6, 3, "Calendar.lang.now"), " ");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate1(" ", ctx_r0.nzOkText || \u0275\u0275pipeBind1(10, 5, "Calendar.lang.ok"), " ");
  }
}
var _c43 = ["inputElement"];
function NzTimePickerComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "span", 8);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const suffixIcon_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("nzType", suffixIcon_r2);
  }
}
function NzTimePickerComponent_nz_form_item_feedback_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-form-item-feedback-icon", 9);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("status", ctx_r2.status);
  }
}
function NzTimePickerComponent_span_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 10);
    \u0275\u0275listener("click", function NzTimePickerComponent_span_7_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onClickClearBtn($event));
    });
    \u0275\u0275element(1, "span", 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275attribute("aria-label", ctx_r2.nzClearText)("title", ctx_r2.nzClearText);
  }
}
function NzTimePickerComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 12)(1, "div", 13)(2, "div", 14)(3, "nz-time-picker-panel", 15);
    \u0275\u0275pipe(4, "async");
    \u0275\u0275twoWayListener("ngModelChange", function NzTimePickerComponent_ng_template_8_Template_nz_time_picker_panel_ngModelChange_3_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.value, $event) || (ctx_r2.value = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function NzTimePickerComponent_ng_template_8_Template_nz_time_picker_panel_ngModelChange_3_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onPanelValueChange($event));
    })("closePanel", function NzTimePickerComponent_ng_template_8_Template_nz_time_picker_panel_closePanel_3_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.closePanel());
    });
    \u0275\u0275elementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("@slideMotion", "enter");
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", ctx_r2.nzPopupClassName)("format", ctx_r2.nzFormat)("nzHourStep", ctx_r2.nzHourStep)("nzMinuteStep", ctx_r2.nzMinuteStep)("nzSecondStep", ctx_r2.nzSecondStep)("nzDisabledHours", ctx_r2.nzDisabledHours)("nzDisabledMinutes", ctx_r2.nzDisabledMinutes)("nzDisabledSeconds", ctx_r2.nzDisabledSeconds)("nzPlaceHolder", ctx_r2.nzPlaceHolder || \u0275\u0275pipeBind1(4, 19, ctx_r2.i18nPlaceHolder$))("nzHideDisabledOptions", ctx_r2.nzHideDisabledOptions)("nzUse12Hours", ctx_r2.nzUse12Hours)("nzDefaultOpenValue", ctx_r2.nzDefaultOpenValue)("nzAddOn", ctx_r2.nzAddOn)("nzClearText", ctx_r2.nzClearText)("nzNowText", ctx_r2.nzNowText)("nzOkText", ctx_r2.nzOkText)("nzAllowEmpty", ctx_r2.nzAllowEmpty);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.value);
  }
}
var TimeHolder = class {
  setMinutes(value, disabled) {
    if (!disabled) {
      this.initValue();
      this.value.setMinutes(value);
      this.update();
    }
    return this;
  }
  setHours(value, disabled) {
    if (!disabled) {
      this.initValue();
      if (this._use12Hours) {
        if (this.selected12Hours === "PM" && value !== 12) {
          this.value.setHours(value + 12);
        } else if (this.selected12Hours === "AM" && value === 12) {
          this.value.setHours(0);
        } else {
          this.value.setHours(value);
        }
      } else {
        this.value.setHours(value);
      }
      this.update();
    }
    return this;
  }
  setSeconds(value, disabled) {
    if (!disabled) {
      this.initValue();
      this.value.setSeconds(value);
      this.update();
    }
    return this;
  }
  setUse12Hours(value) {
    this._use12Hours = value;
    return this;
  }
  get changes() {
    return this._changes.asObservable();
  }
  setValue(value, use12Hours) {
    if (isNotNil(use12Hours)) {
      this._use12Hours = use12Hours;
    }
    if (value !== this.value) {
      this._value = value;
      if (isNotNil(this.value)) {
        if (this._use12Hours && isNotNil(this.hours)) {
          this.selected12Hours = this.hours >= 12 ? "PM" : "AM";
        }
      } else {
        this._clear();
      }
    }
    return this;
  }
  initValue() {
    if (isNil(this.value)) {
      this.setValue(/* @__PURE__ */ new Date(), this._use12Hours);
    }
  }
  clear() {
    this._clear();
    this.update();
  }
  get isEmpty() {
    return !(isNotNil(this.hours) || isNotNil(this.minutes) || isNotNil(this.seconds));
  }
  _clear() {
    this._value = void 0;
    this.selected12Hours = void 0;
  }
  update() {
    if (this.isEmpty) {
      this._value = void 0;
    } else {
      if (isNotNil(this.hours)) {
        this.value.setHours(this.hours);
      }
      if (isNotNil(this.minutes)) {
        this.value.setMinutes(this.minutes);
      }
      if (isNotNil(this.seconds)) {
        this.value.setSeconds(this.seconds);
      }
      if (this._use12Hours) {
        if (this.selected12Hours === "PM" && this.hours < 12) {
          this.value.setHours(this.hours + 12);
        }
        if (this.selected12Hours === "AM" && this.hours >= 12) {
          this.value.setHours(this.hours - 12);
        }
      }
    }
    this.changed();
  }
  changed() {
    this._changes.next(this.value);
  }
  /**
   * @description
   * UI view hours
   * Get viewHours which is selected in `time-picker-panel` and its range is [12, 1, 2, ..., 11]
   */
  get viewHours() {
    return this._use12Hours && isNotNil(this.hours) ? this.calculateViewHour(this.hours) : this.hours;
  }
  setSelected12Hours(value) {
    if (value.toUpperCase() !== this.selected12Hours) {
      this.selected12Hours = value.toUpperCase();
      this.update();
    }
  }
  get value() {
    return this._value || this._defaultOpenValue;
  }
  get hours() {
    return this.value?.getHours();
  }
  get minutes() {
    return this.value?.getMinutes();
  }
  get seconds() {
    return this.value?.getSeconds();
  }
  setDefaultOpenValue(value) {
    this._defaultOpenValue = value;
    return this;
  }
  constructor() {
    this.selected12Hours = void 0;
    this._use12Hours = false;
    this._changes = new Subject();
  }
  calculateViewHour(value) {
    const selected12Hours = this.selected12Hours;
    if (selected12Hours === "PM" && value > 12) {
      return value - 12;
    }
    if (selected12Hours === "AM" && value === 0) {
      return 12;
    }
    return value;
  }
};
function makeRange(length, step = 1, start = 0) {
  return new Array(Math.ceil(length / step)).fill(0).map((_, i) => (i + start) * step);
}
var _NzTimePickerPanelComponent = class _NzTimePickerPanelComponent {
  set nzAllowEmpty(value) {
    if (isNotNil(value)) {
      this._allowEmpty = value;
    }
  }
  get nzAllowEmpty() {
    return this._allowEmpty;
  }
  set nzDisabledHours(value) {
    this._disabledHours = value;
    if (this._disabledHours) {
      this.buildHours();
    }
  }
  get nzDisabledHours() {
    return this._disabledHours;
  }
  set nzDisabledMinutes(value) {
    if (isNotNil(value)) {
      this._disabledMinutes = value;
      this.buildMinutes();
    }
  }
  get nzDisabledMinutes() {
    return this._disabledMinutes;
  }
  set nzDisabledSeconds(value) {
    if (isNotNil(value)) {
      this._disabledSeconds = value;
      this.buildSeconds();
    }
  }
  get nzDisabledSeconds() {
    return this._disabledSeconds;
  }
  set format(value) {
    if (isNotNil(value)) {
      this._format = value;
      this.enabledColumns = 0;
      const charSet = new Set(value);
      this.hourEnabled = charSet.has("H") || charSet.has("h");
      this.minuteEnabled = charSet.has("m");
      this.secondEnabled = charSet.has("s");
      if (this.hourEnabled) {
        this.enabledColumns++;
      }
      if (this.minuteEnabled) {
        this.enabledColumns++;
      }
      if (this.secondEnabled) {
        this.enabledColumns++;
      }
      if (this.nzUse12Hours) {
        this.build12Hours();
      }
    }
  }
  get format() {
    return this._format;
  }
  set nzHourStep(value) {
    if (isNotNil(value)) {
      this._nzHourStep = value;
      this.buildHours();
    }
  }
  get nzHourStep() {
    return this._nzHourStep;
  }
  set nzMinuteStep(value) {
    if (isNotNil(value)) {
      this._nzMinuteStep = value;
      this.buildMinutes();
    }
  }
  get nzMinuteStep() {
    return this._nzMinuteStep;
  }
  set nzSecondStep(value) {
    if (isNotNil(value)) {
      this._nzSecondStep = value;
      this.buildSeconds();
    }
  }
  get nzSecondStep() {
    return this._nzSecondStep;
  }
  trackByFn(index) {
    return index;
  }
  buildHours() {
    let hourRanges = 24;
    let disabledHours = this.nzDisabledHours?.();
    let startIndex = 0;
    if (this.nzUse12Hours) {
      hourRanges = 12;
      if (disabledHours) {
        if (this.time.selected12Hours === "PM") {
          disabledHours = disabledHours.filter((i) => i >= 12).map((i) => i > 12 ? i - 12 : i);
        } else {
          disabledHours = disabledHours.filter((i) => i < 12 || i === 24).map((i) => i === 24 || i === 0 ? 12 : i);
        }
      }
      startIndex = 1;
    }
    this.hourRange = makeRange(hourRanges, this.nzHourStep, startIndex).map((r) => ({
      index: r,
      disabled: !!disabledHours && disabledHours.indexOf(r) !== -1
    }));
    if (this.nzUse12Hours && this.hourRange[this.hourRange.length - 1].index === 12) {
      const temp = [...this.hourRange];
      temp.unshift(temp[temp.length - 1]);
      temp.splice(temp.length - 1, 1);
      this.hourRange = temp;
    }
  }
  buildMinutes() {
    this.minuteRange = makeRange(60, this.nzMinuteStep).map((r) => ({
      index: r,
      disabled: !!this.nzDisabledMinutes && this.nzDisabledMinutes(this.time.hours).indexOf(r) !== -1
    }));
  }
  buildSeconds() {
    this.secondRange = makeRange(60, this.nzSecondStep).map((r) => ({
      index: r,
      disabled: !!this.nzDisabledSeconds && this.nzDisabledSeconds(this.time.hours, this.time.minutes).indexOf(r) !== -1
    }));
  }
  build12Hours() {
    const isUpperFormat = this._format.includes("A");
    this.use12HoursRange = [{
      index: 0,
      value: isUpperFormat ? "AM" : "am"
    }, {
      index: 1,
      value: isUpperFormat ? "PM" : "pm"
    }];
  }
  buildTimes() {
    this.buildHours();
    this.buildMinutes();
    this.buildSeconds();
    this.build12Hours();
  }
  scrollToTime(delay2 = 0) {
    if (this.hourEnabled && this.hourListElement) {
      this.scrollToSelected(this.hourListElement.nativeElement, this.time.viewHours, delay2, "hour");
    }
    if (this.minuteEnabled && this.minuteListElement) {
      this.scrollToSelected(this.minuteListElement.nativeElement, this.time.minutes, delay2, "minute");
    }
    if (this.secondEnabled && this.secondListElement) {
      this.scrollToSelected(this.secondListElement.nativeElement, this.time.seconds, delay2, "second");
    }
    if (this.nzUse12Hours && this.use12HoursListElement) {
      const selectedHours = this.time.selected12Hours;
      const index = selectedHours === "AM" ? 0 : 1;
      this.scrollToSelected(this.use12HoursListElement.nativeElement, index, delay2, "12-hour");
    }
  }
  selectHour(hour) {
    this.time.setHours(hour.index, hour.disabled);
    if (this._disabledMinutes) {
      this.buildMinutes();
    }
    if (this._disabledSeconds || this._disabledMinutes) {
      this.buildSeconds();
    }
  }
  selectMinute(minute) {
    this.time.setMinutes(minute.index, minute.disabled);
    if (this._disabledSeconds) {
      this.buildSeconds();
    }
  }
  selectSecond(second) {
    this.time.setSeconds(second.index, second.disabled);
  }
  select12Hours(value) {
    this.time.setSelected12Hours(value.value);
    if (this._disabledHours) {
      this.buildHours();
    }
    if (this._disabledMinutes) {
      this.buildMinutes();
    }
    if (this._disabledSeconds) {
      this.buildSeconds();
    }
  }
  scrollToSelected(instance, index, duration = 0, unit) {
    if (!instance) {
      return;
    }
    const transIndex = this.translateIndex(index, unit);
    const currentOption = instance.children[transIndex] || instance.children[0];
    this.scrollTo(instance, currentOption.offsetTop, duration);
  }
  translateIndex(index, unit) {
    if (unit === "hour") {
      return this.calcIndex(this.nzDisabledHours?.(), this.hourRange.map((item) => item.index).indexOf(index));
    } else if (unit === "minute") {
      return this.calcIndex(this.nzDisabledMinutes?.(this.time.hours), this.minuteRange.map((item) => item.index).indexOf(index));
    } else if (unit === "second") {
      return this.calcIndex(this.nzDisabledSeconds?.(this.time.hours, this.time.minutes), this.secondRange.map((item) => item.index).indexOf(index));
    } else {
      return this.calcIndex([], this.use12HoursRange.map((item) => item.index).indexOf(index));
    }
  }
  scrollTo(element, to, duration) {
    if (duration <= 0) {
      element.scrollTop = to;
      return;
    }
    const difference = to - element.scrollTop;
    const perTick = difference / duration * 10;
    this.ngZone.runOutsideAngular(() => {
      reqAnimFrame(() => {
        element.scrollTop = element.scrollTop + perTick;
        if (element.scrollTop === to) {
          return;
        }
        this.scrollTo(element, to, duration - 10);
      });
    });
  }
  calcIndex(array, index) {
    if (array?.length && this.nzHideDisabledOptions) {
      return index - array.reduce((pre, value) => pre + (value < index ? 1 : 0), 0);
    } else {
      return index;
    }
  }
  changed() {
    if (this.onChange) {
      this.onChange(this.time.value);
    }
  }
  touched() {
    if (this.onTouch) {
      this.onTouch();
    }
  }
  timeDisabled(value) {
    const hour = value.getHours();
    const minute = value.getMinutes();
    const second = value.getSeconds();
    return (this.nzDisabledHours?.().indexOf(hour) ?? -1) > -1 || (this.nzDisabledMinutes?.(hour).indexOf(minute) ?? -1) > -1 || (this.nzDisabledSeconds?.(hour, minute).indexOf(second) ?? -1) > -1;
  }
  onClickNow() {
    const now = /* @__PURE__ */ new Date();
    if (this.timeDisabled(now)) {
      return;
    }
    this.time.setValue(now);
    this.changed();
    this.closePanel.emit();
  }
  onClickOk() {
    this.time.setValue(this.time.value, this.nzUse12Hours);
    this.changed();
    this.closePanel.emit();
  }
  isSelectedHour(hour) {
    return hour.index === this.time.viewHours;
  }
  isSelectedMinute(minute) {
    return minute.index === this.time.minutes;
  }
  isSelectedSecond(second) {
    return second.index === this.time.seconds;
  }
  isSelected12Hours(value) {
    return value.value.toUpperCase() === this.time.selected12Hours;
  }
  constructor(ngZone, cdr, dateHelper, elementRef) {
    this.ngZone = ngZone;
    this.cdr = cdr;
    this.dateHelper = dateHelper;
    this.elementRef = elementRef;
    this._nzHourStep = 1;
    this._nzMinuteStep = 1;
    this._nzSecondStep = 1;
    this.unsubscribe$ = new Subject();
    this._format = "HH:mm:ss";
    this._disabledHours = () => [];
    this._disabledMinutes = () => [];
    this._disabledSeconds = () => [];
    this._allowEmpty = true;
    this.time = new TimeHolder();
    this.hourEnabled = true;
    this.minuteEnabled = true;
    this.secondEnabled = true;
    this.firstScrolled = false;
    this.enabledColumns = 3;
    this.nzInDatePicker = false;
    this.nzHideDisabledOptions = false;
    this.nzUse12Hours = false;
    this.closePanel = new EventEmitter();
  }
  ngOnInit() {
    this.time.changes.pipe(takeUntil(this.unsubscribe$)).subscribe(() => {
      this.changed();
      this.touched();
      this.scrollToTime(120);
    });
    this.buildTimes();
    this.ngZone.runOutsideAngular(() => {
      setTimeout(() => {
        this.scrollToTime();
        this.firstScrolled = true;
      });
      fromEvent(this.elementRef.nativeElement, "mousedown").pipe(takeUntil(this.unsubscribe$)).subscribe((event) => {
        event.preventDefault();
      });
    });
  }
  ngOnDestroy() {
    this.unsubscribe$.next();
    this.unsubscribe$.complete();
  }
  ngOnChanges(changes) {
    const {
      nzUse12Hours,
      nzDefaultOpenValue
    } = changes;
    if (!nzUse12Hours?.previousValue && nzUse12Hours?.currentValue) {
      this.build12Hours();
      this.enabledColumns++;
    }
    if (nzDefaultOpenValue?.currentValue) {
      this.time.setDefaultOpenValue(this.nzDefaultOpenValue || /* @__PURE__ */ new Date());
    }
  }
  writeValue(value) {
    this.time.setValue(value, this.nzUse12Hours);
    this.buildTimes();
    if (value && this.firstScrolled) {
      this.scrollToTime(120);
    }
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouch = fn;
  }
};
_NzTimePickerPanelComponent.\u0275fac = function NzTimePickerPanelComponent_Factory(t) {
  return new (t || _NzTimePickerPanelComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(DateHelperService), \u0275\u0275directiveInject(ElementRef));
};
_NzTimePickerPanelComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTimePickerPanelComponent,
  selectors: [["nz-time-picker-panel"]],
  viewQuery: function NzTimePickerPanelComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c09, 5);
      \u0275\u0275viewQuery(_c15, 5);
      \u0275\u0275viewQuery(_c25, 5);
      \u0275\u0275viewQuery(_c33, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.hourListElement = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.minuteListElement = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.secondListElement = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.use12HoursListElement = _t.first);
    }
  },
  hostAttrs: [1, "ant-picker-time-panel"],
  hostVars: 12,
  hostBindings: function NzTimePickerPanelComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-picker-time-panel-column-0", ctx.enabledColumns === 0 && !ctx.nzInDatePicker)("ant-picker-time-panel-column-1", ctx.enabledColumns === 1 && !ctx.nzInDatePicker)("ant-picker-time-panel-column-2", ctx.enabledColumns === 2 && !ctx.nzInDatePicker)("ant-picker-time-panel-column-3", ctx.enabledColumns === 3 && !ctx.nzInDatePicker)("ant-picker-time-panel-narrow", ctx.enabledColumns < 3)("ant-picker-time-panel-placement-bottomLeft", !ctx.nzInDatePicker);
    }
  },
  inputs: {
    nzInDatePicker: "nzInDatePicker",
    nzAddOn: "nzAddOn",
    nzHideDisabledOptions: "nzHideDisabledOptions",
    nzClearText: "nzClearText",
    nzNowText: "nzNowText",
    nzOkText: "nzOkText",
    nzPlaceHolder: "nzPlaceHolder",
    nzUse12Hours: "nzUse12Hours",
    nzDefaultOpenValue: "nzDefaultOpenValue",
    nzAllowEmpty: "nzAllowEmpty",
    nzDisabledHours: "nzDisabledHours",
    nzDisabledMinutes: "nzDisabledMinutes",
    nzDisabledSeconds: "nzDisabledSeconds",
    format: "format",
    nzHourStep: "nzHourStep",
    nzMinuteStep: "nzMinuteStep",
    nzSecondStep: "nzSecondStep"
  },
  outputs: {
    closePanel: "closePanel"
  },
  exportAs: ["nzTimePickerPanel"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: NG_VALUE_ACCESSOR,
    useExisting: _NzTimePickerPanelComponent,
    multi: true
  }]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 7,
  vars: 6,
  consts: [["hourListElement", ""], ["minuteListElement", ""], ["secondListElement", ""], ["use12HoursListElement", ""], ["class", "ant-picker-header", 4, "ngIf"], [1, "ant-picker-content"], ["class", "ant-picker-time-panel-column", "style", "position: relative;", 4, "ngIf"], ["class", "ant-picker-footer", 4, "ngIf"], [1, "ant-picker-header"], [1, "ant-picker-header-view"], [1, "ant-picker-time-panel-column", 2, "position", "relative"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "ant-picker-time-panel-cell", 3, "ant-picker-time-panel-cell-selected", "ant-picker-time-panel-cell-disabled", "click", 4, "ngIf"], [1, "ant-picker-time-panel-cell", 3, "click"], [1, "ant-picker-time-panel-cell-inner"], [4, "ngFor", "ngForOf"], [1, "ant-picker-footer"], ["class", "ant-picker-footer-extra", 4, "ngIf"], [1, "ant-picker-ranges"], [1, "ant-picker-now"], [3, "click"], [1, "ant-picker-ok"], ["nz-button", "", "type", "button", "nzSize", "small", "nzType", "primary", 3, "click"], [1, "ant-picker-footer-extra"], [3, "ngTemplateOutlet"]],
  template: function NzTimePickerPanelComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzTimePickerPanelComponent_div_0_Template, 3, 1, "div", 4);
      \u0275\u0275elementStart(1, "div", 5);
      \u0275\u0275template(2, NzTimePickerPanelComponent_ul_2_Template, 3, 2, "ul", 6)(3, NzTimePickerPanelComponent_ul_3_Template, 3, 2, "ul", 6)(4, NzTimePickerPanelComponent_ul_4_Template, 3, 2, "ul", 6)(5, NzTimePickerPanelComponent_ul_5_Template, 3, 1, "ul", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275template(6, NzTimePickerPanelComponent_div_6_Template, 11, 7, "div", 7);
    }
    if (rf & 2) {
      \u0275\u0275property("ngIf", ctx.nzInDatePicker);
      \u0275\u0275advance(2);
      \u0275\u0275property("ngIf", ctx.hourEnabled);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.minuteEnabled);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.secondEnabled);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.nzUse12Hours);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", !ctx.nzInDatePicker);
    }
  },
  dependencies: [NgIf, NgForOf, DecimalPipe, NgTemplateOutlet, NzI18nModule, NzI18nPipe, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective],
  encapsulation: 2,
  changeDetection: 0
});
var NzTimePickerPanelComponent = _NzTimePickerPanelComponent;
__decorate([InputBoolean()], NzTimePickerPanelComponent.prototype, "nzUse12Hours", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTimePickerPanelComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "nz-time-picker-panel",
      exportAs: "nzTimePickerPanel",
      template: `
    <div *ngIf="nzInDatePicker" class="ant-picker-header">
      <div class="ant-picker-header-view">{{ dateHelper.format($any(time?.value), format) || '&nbsp;' }}</div>
    </div>
    <div class="ant-picker-content">
      <ul *ngIf="hourEnabled" #hourListElement class="ant-picker-time-panel-column" style="position: relative;">
        <ng-container *ngFor="let hour of hourRange; trackBy: trackByFn">
          <li
            *ngIf="!(nzHideDisabledOptions && hour.disabled)"
            class="ant-picker-time-panel-cell"
            (click)="selectHour(hour)"
            [class.ant-picker-time-panel-cell-selected]="isSelectedHour(hour)"
            [class.ant-picker-time-panel-cell-disabled]="hour.disabled"
          >
            <div class="ant-picker-time-panel-cell-inner">{{ hour.index | number: '2.0-0' }}</div>
          </li>
        </ng-container>
      </ul>
      <ul *ngIf="minuteEnabled" #minuteListElement class="ant-picker-time-panel-column" style="position: relative;">
        <ng-container *ngFor="let minute of minuteRange; trackBy: trackByFn">
          <li
            *ngIf="!(nzHideDisabledOptions && minute.disabled)"
            class="ant-picker-time-panel-cell"
            (click)="selectMinute(minute)"
            [class.ant-picker-time-panel-cell-selected]="isSelectedMinute(minute)"
            [class.ant-picker-time-panel-cell-disabled]="minute.disabled"
          >
            <div class="ant-picker-time-panel-cell-inner">{{ minute.index | number: '2.0-0' }}</div>
          </li>
        </ng-container>
      </ul>
      <ul *ngIf="secondEnabled" #secondListElement class="ant-picker-time-panel-column" style="position: relative;">
        <ng-container *ngFor="let second of secondRange; trackBy: trackByFn">
          <li
            *ngIf="!(nzHideDisabledOptions && second.disabled)"
            class="ant-picker-time-panel-cell"
            (click)="selectSecond(second)"
            [class.ant-picker-time-panel-cell-selected]="isSelectedSecond(second)"
            [class.ant-picker-time-panel-cell-disabled]="second.disabled"
          >
            <div class="ant-picker-time-panel-cell-inner">{{ second.index | number: '2.0-0' }}</div>
          </li>
        </ng-container>
      </ul>
      <ul *ngIf="nzUse12Hours" #use12HoursListElement class="ant-picker-time-panel-column" style="position: relative;">
        <ng-container *ngFor="let range of use12HoursRange">
          <li
            (click)="select12Hours(range)"
            class="ant-picker-time-panel-cell"
            [class.ant-picker-time-panel-cell-selected]="isSelected12Hours(range)"
          >
            <div class="ant-picker-time-panel-cell-inner">{{ range.value }}</div>
          </li>
        </ng-container>
      </ul>
    </div>
    <div *ngIf="!nzInDatePicker" class="ant-picker-footer">
      <div *ngIf="nzAddOn" class="ant-picker-footer-extra">
        <ng-template [ngTemplateOutlet]="nzAddOn"></ng-template>
      </div>
      <ul class="ant-picker-ranges">
        <li class="ant-picker-now">
          <a (click)="onClickNow()">
            {{ nzNowText || ('Calendar.lang.now' | nzI18n) }}
          </a>
        </li>
        <li class="ant-picker-ok">
          <button nz-button type="button" nzSize="small" nzType="primary" (click)="onClickOk()">
            {{ nzOkText || ('Calendar.lang.ok' | nzI18n) }}
          </button>
        </li>
      </ul>
    </div>
  `,
      host: {
        class: "ant-picker-time-panel",
        "[class.ant-picker-time-panel-column-0]": `enabledColumns === 0 && !nzInDatePicker`,
        "[class.ant-picker-time-panel-column-1]": `enabledColumns === 1 && !nzInDatePicker`,
        "[class.ant-picker-time-panel-column-2]": `enabledColumns === 2 && !nzInDatePicker`,
        "[class.ant-picker-time-panel-column-3]": `enabledColumns === 3 && !nzInDatePicker`,
        "[class.ant-picker-time-panel-narrow]": `enabledColumns < 3`,
        "[class.ant-picker-time-panel-placement-bottomLeft]": `!nzInDatePicker`
      },
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: NzTimePickerPanelComponent,
        multi: true
      }],
      imports: [NgIf, NgForOf, DecimalPipe, NgTemplateOutlet, NzI18nModule, NzButtonModule],
      standalone: true
    }]
  }], () => [{
    type: NgZone
  }, {
    type: ChangeDetectorRef
  }, {
    type: DateHelperService
  }, {
    type: ElementRef
  }], {
    hourListElement: [{
      type: ViewChild,
      args: ["hourListElement", {
        static: false
      }]
    }],
    minuteListElement: [{
      type: ViewChild,
      args: ["minuteListElement", {
        static: false
      }]
    }],
    secondListElement: [{
      type: ViewChild,
      args: ["secondListElement", {
        static: false
      }]
    }],
    use12HoursListElement: [{
      type: ViewChild,
      args: ["use12HoursListElement", {
        static: false
      }]
    }],
    nzInDatePicker: [{
      type: Input
    }],
    nzAddOn: [{
      type: Input
    }],
    nzHideDisabledOptions: [{
      type: Input
    }],
    nzClearText: [{
      type: Input
    }],
    nzNowText: [{
      type: Input
    }],
    nzOkText: [{
      type: Input
    }],
    nzPlaceHolder: [{
      type: Input
    }],
    nzUse12Hours: [{
      type: Input
    }],
    nzDefaultOpenValue: [{
      type: Input
    }],
    closePanel: [{
      type: Output
    }],
    nzAllowEmpty: [{
      type: Input
    }],
    nzDisabledHours: [{
      type: Input
    }],
    nzDisabledMinutes: [{
      type: Input
    }],
    nzDisabledSeconds: [{
      type: Input
    }],
    format: [{
      type: Input
    }],
    nzHourStep: [{
      type: Input
    }],
    nzMinuteStep: [{
      type: Input
    }],
    nzSecondStep: [{
      type: Input
    }]
  });
})();
var NZ_CONFIG_MODULE_NAME6 = "timePicker";
var _NzTimePickerComponent = class _NzTimePickerComponent {
  emitValue(value) {
    this.setValue(value, true);
    if (this._onChange) {
      this._onChange(this.value);
    }
    if (this._onTouched) {
      this._onTouched();
    }
  }
  setValue(value, syncPreValue = false) {
    if (syncPreValue) {
      this.preValue = isValid(value) ? new Date(value) : null;
    }
    this.value = isValid(value) ? new Date(value) : null;
    this.inputValue = this.dateHelper.format(value, this.nzFormat);
    this.cdr.markForCheck();
  }
  open() {
    if (this.nzDisabled || this.nzOpen) {
      return;
    }
    this.focus();
    this.nzOpen = true;
    this.nzOpenChange.emit(this.nzOpen);
  }
  close() {
    this.nzOpen = false;
    this.cdr.markForCheck();
    this.nzOpenChange.emit(this.nzOpen);
  }
  updateAutoFocus() {
    if (this.isInit && !this.nzDisabled) {
      if (this.nzAutoFocus) {
        this.renderer.setAttribute(this.inputRef.nativeElement, "autofocus", "autofocus");
      } else {
        this.renderer.removeAttribute(this.inputRef.nativeElement, "autofocus");
      }
    }
  }
  onClickClearBtn(event) {
    event.stopPropagation();
    this.emitValue(null);
  }
  onClickOutside(event) {
    if (!this.element.nativeElement.contains(event.target)) {
      this.setCurrentValueAndClose();
    }
  }
  onFocus(value) {
    this.focused = value;
    if (!value) {
      if (this.checkTimeValid(this.value)) {
        this.setCurrentValueAndClose();
      } else {
        this.setValue(this.preValue);
        this.close();
      }
    }
  }
  focus() {
    if (this.inputRef.nativeElement) {
      this.inputRef.nativeElement.focus();
    }
  }
  blur() {
    if (this.inputRef.nativeElement) {
      this.inputRef.nativeElement.blur();
    }
  }
  onKeyupEsc() {
    this.setValue(this.preValue);
  }
  onKeyupEnter() {
    if (this.nzOpen && isValid(this.value)) {
      this.setCurrentValueAndClose();
    } else if (!this.nzOpen) {
      this.open();
    }
  }
  onInputChange(str) {
    if (!this.platform.TRIDENT && document.activeElement === this.inputRef.nativeElement) {
      this.open();
      this.parseTimeString(str);
    }
  }
  onPanelValueChange(value) {
    this.setValue(value);
    this.focus();
  }
  closePanel() {
    this.inputRef.nativeElement.blur();
  }
  setCurrentValueAndClose() {
    this.emitValue(this.value);
    this.close();
  }
  constructor(nzConfigService, i18n, element, renderer, cdr, dateHelper, platform, directionality, nzFormStatusService, nzFormNoStatusService) {
    this.nzConfigService = nzConfigService;
    this.i18n = i18n;
    this.element = element;
    this.renderer = renderer;
    this.cdr = cdr;
    this.dateHelper = dateHelper;
    this.platform = platform;
    this.directionality = directionality;
    this.nzFormStatusService = nzFormStatusService;
    this.nzFormNoStatusService = nzFormNoStatusService;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME6;
    this.destroy$ = new Subject();
    this.isNzDisableFirstChange = true;
    this.isInit = false;
    this.focused = false;
    this.inputValue = "";
    this.value = null;
    this.preValue = null;
    this.i18nPlaceHolder$ = of(void 0);
    this.overlayPositions = [{
      offsetY: 3,
      originX: "start",
      originY: "bottom",
      overlayX: "start",
      overlayY: "top"
    }, {
      offsetY: -3,
      originX: "start",
      originY: "top",
      overlayX: "start",
      overlayY: "bottom"
    }, {
      offsetY: 3,
      originX: "end",
      originY: "bottom",
      overlayX: "end",
      overlayY: "top"
    }, {
      offsetY: -3,
      originX: "end",
      originY: "top",
      overlayX: "end",
      overlayY: "bottom"
    }];
    this.dir = "ltr";
    this.prefixCls = "ant-picker";
    this.statusCls = {};
    this.status = "";
    this.hasFeedback = false;
    this.nzId = null;
    this.nzSize = null;
    this.nzStatus = "";
    this.nzHourStep = 1;
    this.nzMinuteStep = 1;
    this.nzSecondStep = 1;
    this.nzClearText = "clear";
    this.nzNowText = "";
    this.nzOkText = "";
    this.nzPopupClassName = "";
    this.nzPlaceHolder = "";
    this.nzFormat = "HH:mm:ss";
    this.nzOpen = false;
    this.nzUse12Hours = false;
    this.nzSuffixIcon = "clock-circle";
    this.nzOpenChange = new EventEmitter();
    this.nzHideDisabledOptions = false;
    this.nzAllowEmpty = true;
    this.nzDisabled = false;
    this.nzAutoFocus = false;
    this.nzBackdrop = false;
    this.nzBorderless = false;
    this.nzInputReadOnly = false;
  }
  ngOnInit() {
    this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {
      return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;
    }), withLatestFrom(this.nzFormNoStatusService ? this.nzFormNoStatusService.noFormStatus : of(false)), map(([{
      status,
      hasFeedback
    }, noStatus]) => ({
      status: noStatus ? "" : status,
      hasFeedback
    })), takeUntil(this.destroy$)).subscribe(({
      status,
      hasFeedback
    }) => {
      this.setStatusStyles(status, hasFeedback);
    });
    this.inputSize = Math.max(8, this.nzFormat.length) + 2;
    this.origin = new CdkOverlayOrigin(this.element);
    this.i18nPlaceHolder$ = this.i18n.localeChange.pipe(map((nzLocale) => nzLocale.TimePicker.placeholder));
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  ngOnChanges(changes) {
    const {
      nzUse12Hours,
      nzFormat,
      nzDisabled,
      nzAutoFocus,
      nzStatus
    } = changes;
    if (nzUse12Hours && !nzUse12Hours.previousValue && nzUse12Hours.currentValue && !nzFormat) {
      this.nzFormat = "h:mm:ss a";
    }
    if (nzDisabled) {
      const value = nzDisabled.currentValue;
      const input = this.inputRef.nativeElement;
      if (value) {
        this.renderer.setAttribute(input, "disabled", "");
      } else {
        this.renderer.removeAttribute(input, "disabled");
      }
    }
    if (nzAutoFocus) {
      this.updateAutoFocus();
    }
    if (nzStatus) {
      this.setStatusStyles(this.nzStatus, this.hasFeedback);
    }
  }
  parseTimeString(str) {
    const value = this.dateHelper.parseTime(str, this.nzFormat) || null;
    if (isValid(value)) {
      this.value = value;
      this.cdr.markForCheck();
    }
  }
  ngAfterViewInit() {
    this.isInit = true;
    this.updateAutoFocus();
  }
  writeValue(time) {
    let result;
    if (time instanceof Date) {
      result = time;
    } else if (isNil(time)) {
      result = null;
    } else {
      warn2('Non-Date type is not recommended for time-picker, use "Date" type.');
      result = new Date(time);
    }
    this.setValue(result, true);
  }
  registerOnChange(fn) {
    this._onChange = fn;
  }
  registerOnTouched(fn) {
    this._onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || isDisabled;
    this.isNzDisableFirstChange = false;
    this.cdr.markForCheck();
  }
  checkTimeValid(value) {
    if (!value) {
      return true;
    }
    const disabledHours = this.nzDisabledHours?.();
    const disabledMinutes = this.nzDisabledMinutes?.(value.getHours());
    const disabledSeconds = this.nzDisabledSeconds?.(value.getHours(), value.getMinutes());
    return !(disabledHours?.includes(value.getHours()) || disabledMinutes?.includes(value.getMinutes()) || disabledSeconds?.includes(value.getSeconds()));
  }
  setStatusStyles(status, hasFeedback) {
    this.status = status;
    this.hasFeedback = hasFeedback;
    this.cdr.markForCheck();
    this.statusCls = getStatusClassNames(this.prefixCls, status, hasFeedback);
    Object.keys(this.statusCls).forEach((status2) => {
      if (this.statusCls[status2]) {
        this.renderer.addClass(this.element.nativeElement, status2);
      } else {
        this.renderer.removeClass(this.element.nativeElement, status2);
      }
    });
  }
};
_NzTimePickerComponent.\u0275fac = function NzTimePickerComponent_Factory(t) {
  return new (t || _NzTimePickerComponent)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(DateHelperService), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(NzFormStatusService, 8), \u0275\u0275directiveInject(NzFormNoStatusService, 8));
};
_NzTimePickerComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzTimePickerComponent,
  selectors: [["nz-time-picker"]],
  viewQuery: function NzTimePickerComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c43, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.inputRef = _t.first);
    }
  },
  hostAttrs: [1, "ant-picker"],
  hostVars: 12,
  hostBindings: function NzTimePickerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function NzTimePickerComponent_click_HostBindingHandler() {
        return ctx.open();
      });
    }
    if (rf & 2) {
      \u0275\u0275classProp("ant-picker-large", ctx.nzSize === "large")("ant-picker-small", ctx.nzSize === "small")("ant-picker-disabled", ctx.nzDisabled)("ant-picker-focused", ctx.focused)("ant-picker-rtl", ctx.dir === "rtl")("ant-picker-borderless", ctx.nzBorderless);
    }
  },
  inputs: {
    nzId: "nzId",
    nzSize: "nzSize",
    nzStatus: "nzStatus",
    nzHourStep: "nzHourStep",
    nzMinuteStep: "nzMinuteStep",
    nzSecondStep: "nzSecondStep",
    nzClearText: "nzClearText",
    nzNowText: "nzNowText",
    nzOkText: "nzOkText",
    nzPopupClassName: "nzPopupClassName",
    nzPlaceHolder: "nzPlaceHolder",
    nzAddOn: "nzAddOn",
    nzDefaultOpenValue: "nzDefaultOpenValue",
    nzDisabledHours: "nzDisabledHours",
    nzDisabledMinutes: "nzDisabledMinutes",
    nzDisabledSeconds: "nzDisabledSeconds",
    nzFormat: "nzFormat",
    nzOpen: "nzOpen",
    nzUse12Hours: "nzUse12Hours",
    nzSuffixIcon: "nzSuffixIcon",
    nzHideDisabledOptions: "nzHideDisabledOptions",
    nzAllowEmpty: "nzAllowEmpty",
    nzDisabled: "nzDisabled",
    nzAutoFocus: "nzAutoFocus",
    nzBackdrop: "nzBackdrop",
    nzBorderless: "nzBorderless",
    nzInputReadOnly: "nzInputReadOnly"
  },
  outputs: {
    nzOpenChange: "nzOpenChange"
  },
  exportAs: ["nzTimePicker"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: NG_VALUE_ACCESSOR,
    useExisting: _NzTimePickerComponent,
    multi: true
  }]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 9,
  vars: 16,
  consts: [["inputElement", ""], [1, "ant-picker-input"], ["type", "text", "autocomplete", "off", 3, "ngModelChange", "focus", "blur", "keyup.enter", "keyup.escape", "size", "placeholder", "ngModel", "disabled", "readOnly"], [1, "ant-picker-suffix"], [4, "nzStringTemplateOutlet"], [3, "status", 4, "ngIf"], ["class", "ant-picker-clear", 3, "click", 4, "ngIf"], ["cdkConnectedOverlay", "", "nzConnectedOverlay", "", 3, "detach", "overlayOutsideClick", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayTransformOriginOn"], ["nz-icon", "", 3, "nzType"], [3, "status"], [1, "ant-picker-clear", 3, "click"], ["nz-icon", "", "nzType", "close-circle", "nzTheme", "fill"], [1, "ant-picker-dropdown", 2, "position", "relative"], [1, "ant-picker-panel-container"], ["tabindex", "-1", 1, "ant-picker-panel"], [3, "ngModelChange", "closePanel", "ngClass", "format", "nzHourStep", "nzMinuteStep", "nzSecondStep", "nzDisabledHours", "nzDisabledMinutes", "nzDisabledSeconds", "nzPlaceHolder", "nzHideDisabledOptions", "nzUse12Hours", "nzDefaultOpenValue", "nzAddOn", "nzClearText", "nzNowText", "nzOkText", "nzAllowEmpty", "ngModel"]],
  template: function NzTimePickerComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "div", 1)(1, "input", 2, 0);
      \u0275\u0275pipe(3, "async");
      \u0275\u0275twoWayListener("ngModelChange", function NzTimePickerComponent_Template_input_ngModelChange_1_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.inputValue, $event) || (ctx.inputValue = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("focus", function NzTimePickerComponent_Template_input_focus_1_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onFocus(true));
      })("blur", function NzTimePickerComponent_Template_input_blur_1_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onFocus(false));
      })("keyup.enter", function NzTimePickerComponent_Template_input_keyup_enter_1_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onKeyupEnter());
      })("keyup.escape", function NzTimePickerComponent_Template_input_keyup_escape_1_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onKeyupEsc());
      })("ngModelChange", function NzTimePickerComponent_Template_input_ngModelChange_1_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onInputChange($event));
      });
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(4, "span", 3);
      \u0275\u0275template(5, NzTimePickerComponent_ng_container_5_Template, 2, 1, "ng-container", 4)(6, NzTimePickerComponent_nz_form_item_feedback_icon_6_Template, 1, 1, "nz-form-item-feedback-icon", 5);
      \u0275\u0275elementEnd();
      \u0275\u0275template(7, NzTimePickerComponent_span_7_Template, 2, 2, "span", 6);
      \u0275\u0275elementEnd();
      \u0275\u0275template(8, NzTimePickerComponent_ng_template_8_Template, 5, 21, "ng-template", 7);
      \u0275\u0275listener("detach", function NzTimePickerComponent_Template_ng_template_detach_8_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.close());
      })("overlayOutsideClick", function NzTimePickerComponent_Template_ng_template_overlayOutsideClick_8_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onClickOutside($event));
      });
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275property("size", ctx.inputSize)("placeholder", ctx.nzPlaceHolder || \u0275\u0275pipeBind1(3, 14, ctx.i18nPlaceHolder$));
      \u0275\u0275twoWayProperty("ngModel", ctx.inputValue);
      \u0275\u0275property("disabled", ctx.nzDisabled)("readOnly", ctx.nzInputReadOnly);
      \u0275\u0275attribute("id", ctx.nzId);
      \u0275\u0275advance(4);
      \u0275\u0275property("nzStringTemplateOutlet", ctx.nzSuffixIcon);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.hasFeedback && !!ctx.status);
      \u0275\u0275advance();
      \u0275\u0275property("ngIf", ctx.nzAllowEmpty && !ctx.nzDisabled && ctx.value);
      \u0275\u0275advance();
      \u0275\u0275property("cdkConnectedOverlayHasBackdrop", ctx.nzBackdrop)("cdkConnectedOverlayPositions", ctx.overlayPositions)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayOpen", ctx.nzOpen)("cdkConnectedOverlayTransformOriginOn", ".ant-picker-dropdown");
    }
  },
  dependencies: [AsyncPipe, FormsModule, DefaultValueAccessor, NgControlStatus, NgModel, NzOutletModule, NzStringTemplateOutletDirective, NzIconModule, NzIconDirective, NzFormPatchModule, NzFormItemFeedbackIconComponent, NgIf, NzTimePickerPanelComponent, NgClass, NzOverlayModule, NzConnectedOverlayDirective, OverlayModule, CdkConnectedOverlay],
  encapsulation: 2,
  data: {
    animation: [slideMotion]
  },
  changeDetection: 0
});
var NzTimePickerComponent = _NzTimePickerComponent;
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzHourStep", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzMinuteStep", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzSecondStep", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzClearText", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzNowText", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzOkText", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzPopupClassName", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzFormat", void 0);
__decorate([WithConfig(), InputBoolean()], NzTimePickerComponent.prototype, "nzUse12Hours", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzSuffixIcon", void 0);
__decorate([InputBoolean()], NzTimePickerComponent.prototype, "nzHideDisabledOptions", void 0);
__decorate([WithConfig(), InputBoolean()], NzTimePickerComponent.prototype, "nzAllowEmpty", void 0);
__decorate([InputBoolean()], NzTimePickerComponent.prototype, "nzDisabled", void 0);
__decorate([InputBoolean()], NzTimePickerComponent.prototype, "nzAutoFocus", void 0);
__decorate([WithConfig()], NzTimePickerComponent.prototype, "nzBackdrop", void 0);
__decorate([InputBoolean()], NzTimePickerComponent.prototype, "nzBorderless", void 0);
__decorate([InputBoolean()], NzTimePickerComponent.prototype, "nzInputReadOnly", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTimePickerComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "nz-time-picker",
      exportAs: "nzTimePicker",
      template: `
    <div class="ant-picker-input">
      <input
        #inputElement
        [attr.id]="nzId"
        type="text"
        [size]="inputSize"
        autocomplete="off"
        [placeholder]="nzPlaceHolder || (i18nPlaceHolder$ | async)"
        [(ngModel)]="inputValue"
        [disabled]="nzDisabled"
        [readOnly]="nzInputReadOnly"
        (focus)="onFocus(true)"
        (blur)="onFocus(false)"
        (keyup.enter)="onKeyupEnter()"
        (keyup.escape)="onKeyupEsc()"
        (ngModelChange)="onInputChange($event)"
      />
      <span class="ant-picker-suffix">
        <ng-container *nzStringTemplateOutlet="nzSuffixIcon; let suffixIcon">
          <span nz-icon [nzType]="suffixIcon"></span>
        </ng-container>
        <nz-form-item-feedback-icon *ngIf="hasFeedback && !!status" [status]="status"></nz-form-item-feedback-icon>
      </span>
      <span *ngIf="nzAllowEmpty && !nzDisabled && value" class="ant-picker-clear" (click)="onClickClearBtn($event)">
        <span
          nz-icon
          nzType="close-circle"
          nzTheme="fill"
          [attr.aria-label]="nzClearText"
          [attr.title]="nzClearText"
        ></span>
      </span>
    </div>

    <ng-template
      cdkConnectedOverlay
      nzConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="nzBackdrop"
      [cdkConnectedOverlayPositions]="overlayPositions"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="nzOpen"
      [cdkConnectedOverlayTransformOriginOn]="'.ant-picker-dropdown'"
      (detach)="close()"
      (overlayOutsideClick)="onClickOutside($event)"
    >
      <div [@slideMotion]="'enter'" class="ant-picker-dropdown" style="position: relative">
        <div class="ant-picker-panel-container">
          <div tabindex="-1" class="ant-picker-panel">
            <nz-time-picker-panel
              [ngClass]="nzPopupClassName"
              [format]="nzFormat"
              [nzHourStep]="nzHourStep"
              [nzMinuteStep]="nzMinuteStep"
              [nzSecondStep]="nzSecondStep"
              [nzDisabledHours]="nzDisabledHours"
              [nzDisabledMinutes]="nzDisabledMinutes"
              [nzDisabledSeconds]="nzDisabledSeconds"
              [nzPlaceHolder]="nzPlaceHolder || (i18nPlaceHolder$ | async)"
              [nzHideDisabledOptions]="nzHideDisabledOptions"
              [nzUse12Hours]="nzUse12Hours"
              [nzDefaultOpenValue]="nzDefaultOpenValue"
              [nzAddOn]="nzAddOn"
              [nzClearText]="nzClearText"
              [nzNowText]="nzNowText"
              [nzOkText]="nzOkText"
              [nzAllowEmpty]="nzAllowEmpty"
              [(ngModel)]="value"
              (ngModelChange)="onPanelValueChange($event)"
              (closePanel)="closePanel()"
            ></nz-time-picker-panel>
          </div>
        </div>
      </div>
    </ng-template>
  `,
      host: {
        class: "ant-picker",
        "[class.ant-picker-large]": `nzSize === 'large'`,
        "[class.ant-picker-small]": `nzSize === 'small'`,
        "[class.ant-picker-disabled]": `nzDisabled`,
        "[class.ant-picker-focused]": `focused`,
        "[class.ant-picker-rtl]": `dir === 'rtl'`,
        "[class.ant-picker-borderless]": `nzBorderless`,
        "(click)": "open()"
      },
      animations: [slideMotion],
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: NzTimePickerComponent,
        multi: true
      }],
      imports: [AsyncPipe, FormsModule, NzOutletModule, NzIconModule, NzFormPatchModule, NgIf, NzTimePickerPanelComponent, NgClass, NzOverlayModule, OverlayModule],
      standalone: true
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: NzI18nService
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }, {
    type: DateHelperService
  }, {
    type: Platform
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NzFormStatusService,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NzFormNoStatusService,
    decorators: [{
      type: Optional
    }]
  }], {
    inputRef: [{
      type: ViewChild,
      args: ["inputElement", {
        static: true
      }]
    }],
    nzId: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzStatus: [{
      type: Input
    }],
    nzHourStep: [{
      type: Input
    }],
    nzMinuteStep: [{
      type: Input
    }],
    nzSecondStep: [{
      type: Input
    }],
    nzClearText: [{
      type: Input
    }],
    nzNowText: [{
      type: Input
    }],
    nzOkText: [{
      type: Input
    }],
    nzPopupClassName: [{
      type: Input
    }],
    nzPlaceHolder: [{
      type: Input
    }],
    nzAddOn: [{
      type: Input
    }],
    nzDefaultOpenValue: [{
      type: Input
    }],
    nzDisabledHours: [{
      type: Input
    }],
    nzDisabledMinutes: [{
      type: Input
    }],
    nzDisabledSeconds: [{
      type: Input
    }],
    nzFormat: [{
      type: Input
    }],
    nzOpen: [{
      type: Input
    }],
    nzUse12Hours: [{
      type: Input
    }],
    nzSuffixIcon: [{
      type: Input
    }],
    nzOpenChange: [{
      type: Output
    }],
    nzHideDisabledOptions: [{
      type: Input
    }],
    nzAllowEmpty: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzAutoFocus: [{
      type: Input
    }],
    nzBackdrop: [{
      type: Input
    }],
    nzBorderless: [{
      type: Input
    }],
    nzInputReadOnly: [{
      type: Input
    }]
  });
})();
var _NzTimePickerModule = class _NzTimePickerModule {
};
_NzTimePickerModule.\u0275fac = function NzTimePickerModule_Factory(t) {
  return new (t || _NzTimePickerModule)();
};
_NzTimePickerModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzTimePickerModule
});
_NzTimePickerModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzTimePickerComponent, NzTimePickerPanelComponent]
});
var NzTimePickerModule = _NzTimePickerModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzTimePickerModule, [{
    type: NgModule,
    args: [{
      imports: [NzTimePickerComponent, NzTimePickerPanelComponent],
      exports: [NzTimePickerPanelComponent, NzTimePickerComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-date-picker.mjs
function CalendarFooterComponent_Conditional_1_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function CalendarFooterComponent_Conditional_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, CalendarFooterComponent_Conditional_1_Conditional_1_ng_container_0_Template, 1, 0, "ng-container", 3);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.extraFooter);
  }
}
function CalendarFooterComponent_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 2);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("innerHTML", ctx_r0.extraFooter, \u0275\u0275sanitizeHtml);
  }
}
function CalendarFooterComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, CalendarFooterComponent_Conditional_1_Conditional_1_Template, 1, 1, "ng-container")(2, CalendarFooterComponent_Conditional_1_Conditional_2_Template, 1, 1, "span", 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-footer-extra");
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r0.isExtraFooterTemplateRef ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(2, ctx_r0.isExtraFooterNonEmptyString ? 2 : -1);
  }
}
function CalendarFooterComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 4);
    \u0275\u0275listener("click", function CalendarFooterComponent_Conditional_2_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.isTodayDisabled ? null : ctx_r0.onClickToday());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate2("", ctx_r0.prefixCls, "-today-btn ", ctx_r0.isTodayDisabled ? ctx_r0.prefixCls + "-today-btn-disabled" : "", "");
    \u0275\u0275propertyInterpolate("title", ctx_r0.todayTitle);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.locale.today, " ");
  }
}
function CalendarFooterComponent_Conditional_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function CalendarFooterComponent_Conditional_3_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li")(1, "a", 5);
    \u0275\u0275listener("click", function CalendarFooterComponent_Conditional_3_Conditional_2_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.isTodayDisabled ? null : ctx_r0.onClickToday());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-now");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-now-btn");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.locale.now, " ");
  }
}
function CalendarFooterComponent_Conditional_3_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li")(1, "button", 6);
    \u0275\u0275listener("click", function CalendarFooterComponent_Conditional_3_Conditional_3_Template_button_click_1_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.okDisabled ? null : ctx_r0.clickOk.emit());
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-ok");
    \u0275\u0275advance();
    \u0275\u0275property("disabled", ctx_r0.okDisabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.locale.ok, " ");
  }
}
function CalendarFooterComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul");
    \u0275\u0275template(1, CalendarFooterComponent_Conditional_3_ng_container_1_Template, 1, 0, "ng-container", 3)(2, CalendarFooterComponent_Conditional_3_Conditional_2_Template, 3, 7, "li", 0)(3, CalendarFooterComponent_Conditional_3_Conditional_3_Template, 3, 5, "li", 0);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-ranges");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.rangeQuickSelector);
    \u0275\u0275advance();
    \u0275\u0275conditional(2, ctx_r0.showNow ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(3, ctx_r0.hasTimePicker ? 3 : -1);
  }
}
function DecadeHeaderComponent_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 6);
    \u0275\u0275listener("click", function DecadeHeaderComponent_For_7_Template_button_click_0_listener() {
      const selector_r2 = \u0275\u0275restoreView(_r1).$implicit;
      return \u0275\u0275resetView(selector_r2.onClick());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const selector_r2 = ctx.$implicit;
    \u0275\u0275classMap(selector_r2.className);
    \u0275\u0275propertyInterpolate("title", selector_r2.title || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", selector_r2.label, " ");
  }
}
var _forTrack02 = ($index, $item) => $item.trackByIndex;
var _c010 = (a0) => ({
  $implicit: a0
});
function DecadeTableComponent_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 3);
  }
}
function DecadeTableComponent_Conditional_1_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 4);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r1 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("title", cell_r1.title);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r1.content, " ");
  }
}
function DecadeTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "thead")(1, "tr", 2);
    \u0275\u0275template(2, DecadeTableComponent_Conditional_1_Conditional_2_Template, 1, 0, "th", 3);
    \u0275\u0275repeaterCreate(3, DecadeTableComponent_Conditional_1_For_4_Template, 2, 2, "th", 4, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, ctx_r1.showWeek ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.headRow);
  }
}
function DecadeTableComponent_For_4_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 7);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-week");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", row_r3.weekNum, " ");
  }
}
function DecadeTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DecadeTableComponent_For_4_For_3_Case_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DecadeTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function DecadeTableComponent_For_4_For_3_Case_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 10);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("innerHTML", cell_r5.cellRender, \u0275\u0275sanitizeHtml);
  }
}
function DecadeTableComponent_For_4_For_3_Case_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-inner");
    \u0275\u0275attribute("aria-selected", cell_r5.isSelected)("aria-disabled", cell_r5.isDisabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r5.content, " ");
  }
}
function DecadeTableComponent_For_4_For_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DecadeTableComponent_For_4_For_3_Case_1_Conditional_0_Template, 1, 4, "ng-container")(1, DecadeTableComponent_For_4_For_3_Case_1_Conditional_1_Template, 1, 1)(2, DecadeTableComponent_For_4_For_3_Case_1_Conditional_2_Template, 2, 6);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275conditional(0, cell_r5.isTemplateRef ? 0 : cell_r5.isNonEmptyString ? 1 : 2);
  }
}
function DecadeTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DecadeTableComponent_For_4_For_3_Case_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DecadeTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.fullCellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function DecadeTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DecadeTableComponent_For_4_For_3_Case_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div");
    \u0275\u0275template(3, DecadeTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-value");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(cell_r5.content);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-content");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(9, _c010, cell_r5.value));
  }
}
function DecadeTableComponent_For_4_For_3_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, DecadeTableComponent_For_4_For_3_Case_2_Conditional_1_Template, 1, 4, "ng-container")(2, DecadeTableComponent_For_4_For_3_Case_2_Conditional_2_Template, 4, 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date ant-picker-cell-inner");
    \u0275\u0275classProp("ant-picker-calendar-date-today", cell_r5.isToday);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, cell_r5.fullCellRender ? 1 : 2);
  }
}
function DecadeTableComponent_For_4_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 8);
    \u0275\u0275listener("click", function DecadeTableComponent_For_4_For_3_Template_td_click_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.isDisabled ? null : cell_r5.onClick());
    })("mouseenter", function DecadeTableComponent_For_4_For_3_Template_td_mouseenter_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.onMouseEnter());
    });
    \u0275\u0275template(1, DecadeTableComponent_For_4_For_3_Case_1_Template, 3, 1)(2, DecadeTableComponent_For_4_For_3_Case_2_Template, 3, 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_22_0;
    const cell_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("title", cell_r5.title);
    \u0275\u0275property("ngClass", cell_r5.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, (tmp_22_0 = ctx_r1.prefixCls) === "ant-picker" ? 1 : tmp_22_0 === "ant-picker-calendar" ? 2 : -1);
  }
}
function DecadeTableComponent_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 1);
    \u0275\u0275template(1, DecadeTableComponent_For_4_Conditional_1_Template, 2, 4, "td", 5);
    \u0275\u0275repeaterCreate(2, DecadeTableComponent_For_4_For_3_Template, 3, 3, "td", 6, _forTrack02);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = ctx.$implicit;
    \u0275\u0275property("ngClass", row_r3.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, row_r3.weekNum ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(row_r3.dateCells);
  }
}
function YearHeaderComponent_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 6);
    \u0275\u0275listener("click", function YearHeaderComponent_For_7_Template_button_click_0_listener() {
      const selector_r2 = \u0275\u0275restoreView(_r1).$implicit;
      return \u0275\u0275resetView(selector_r2.onClick());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const selector_r2 = ctx.$implicit;
    \u0275\u0275classMap(selector_r2.className);
    \u0275\u0275propertyInterpolate("title", selector_r2.title || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", selector_r2.label, " ");
  }
}
function YearTableComponent_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 3);
  }
}
function YearTableComponent_Conditional_1_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 4);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r1 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("title", cell_r1.title);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r1.content, " ");
  }
}
function YearTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "thead")(1, "tr", 2);
    \u0275\u0275template(2, YearTableComponent_Conditional_1_Conditional_2_Template, 1, 0, "th", 3);
    \u0275\u0275repeaterCreate(3, YearTableComponent_Conditional_1_For_4_Template, 2, 2, "th", 4, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, ctx_r1.showWeek ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.headRow);
  }
}
function YearTableComponent_For_4_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 7);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-week");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", row_r3.weekNum, " ");
  }
}
function YearTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function YearTableComponent_For_4_For_3_Case_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, YearTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function YearTableComponent_For_4_For_3_Case_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 10);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("innerHTML", cell_r5.cellRender, \u0275\u0275sanitizeHtml);
  }
}
function YearTableComponent_For_4_For_3_Case_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-inner");
    \u0275\u0275attribute("aria-selected", cell_r5.isSelected)("aria-disabled", cell_r5.isDisabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r5.content, " ");
  }
}
function YearTableComponent_For_4_For_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, YearTableComponent_For_4_For_3_Case_1_Conditional_0_Template, 1, 4, "ng-container")(1, YearTableComponent_For_4_For_3_Case_1_Conditional_1_Template, 1, 1)(2, YearTableComponent_For_4_For_3_Case_1_Conditional_2_Template, 2, 6);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275conditional(0, cell_r5.isTemplateRef ? 0 : cell_r5.isNonEmptyString ? 1 : 2);
  }
}
function YearTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function YearTableComponent_For_4_For_3_Case_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, YearTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.fullCellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function YearTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function YearTableComponent_For_4_For_3_Case_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div");
    \u0275\u0275template(3, YearTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-value");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(cell_r5.content);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-content");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(9, _c010, cell_r5.value));
  }
}
function YearTableComponent_For_4_For_3_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, YearTableComponent_For_4_For_3_Case_2_Conditional_1_Template, 1, 4, "ng-container")(2, YearTableComponent_For_4_For_3_Case_2_Conditional_2_Template, 4, 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date ant-picker-cell-inner");
    \u0275\u0275classProp("ant-picker-calendar-date-today", cell_r5.isToday);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, cell_r5.fullCellRender ? 1 : 2);
  }
}
function YearTableComponent_For_4_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 8);
    \u0275\u0275listener("click", function YearTableComponent_For_4_For_3_Template_td_click_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.isDisabled ? null : cell_r5.onClick());
    })("mouseenter", function YearTableComponent_For_4_For_3_Template_td_mouseenter_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.onMouseEnter());
    });
    \u0275\u0275template(1, YearTableComponent_For_4_For_3_Case_1_Template, 3, 1)(2, YearTableComponent_For_4_For_3_Case_2_Template, 3, 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_22_0;
    const cell_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("title", cell_r5.title);
    \u0275\u0275property("ngClass", cell_r5.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, (tmp_22_0 = ctx_r1.prefixCls) === "ant-picker" ? 1 : tmp_22_0 === "ant-picker-calendar" ? 2 : -1);
  }
}
function YearTableComponent_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 1);
    \u0275\u0275template(1, YearTableComponent_For_4_Conditional_1_Template, 2, 4, "td", 5);
    \u0275\u0275repeaterCreate(2, YearTableComponent_For_4_For_3_Template, 3, 3, "td", 6, _forTrack02);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = ctx.$implicit;
    \u0275\u0275property("ngClass", row_r3.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, row_r3.weekNum ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(row_r3.dateCells);
  }
}
function MonthHeaderComponent_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 6);
    \u0275\u0275listener("click", function MonthHeaderComponent_For_7_Template_button_click_0_listener() {
      const selector_r2 = \u0275\u0275restoreView(_r1).$implicit;
      return \u0275\u0275resetView(selector_r2.onClick());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const selector_r2 = ctx.$implicit;
    \u0275\u0275classMap(selector_r2.className);
    \u0275\u0275propertyInterpolate("title", selector_r2.title || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", selector_r2.label, " ");
  }
}
function MonthTableComponent_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 3);
  }
}
function MonthTableComponent_Conditional_1_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 4);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r1 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("title", cell_r1.title);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r1.content, " ");
  }
}
function MonthTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "thead")(1, "tr", 2);
    \u0275\u0275template(2, MonthTableComponent_Conditional_1_Conditional_2_Template, 1, 0, "th", 3);
    \u0275\u0275repeaterCreate(3, MonthTableComponent_Conditional_1_For_4_Template, 2, 2, "th", 4, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, ctx_r1.showWeek ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.headRow);
  }
}
function MonthTableComponent_For_4_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 7);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-week");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", row_r3.weekNum, " ");
  }
}
function MonthTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function MonthTableComponent_For_4_For_3_Case_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, MonthTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function MonthTableComponent_For_4_For_3_Case_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 10);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("innerHTML", cell_r5.cellRender, \u0275\u0275sanitizeHtml);
  }
}
function MonthTableComponent_For_4_For_3_Case_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-inner");
    \u0275\u0275attribute("aria-selected", cell_r5.isSelected)("aria-disabled", cell_r5.isDisabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r5.content, " ");
  }
}
function MonthTableComponent_For_4_For_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, MonthTableComponent_For_4_For_3_Case_1_Conditional_0_Template, 1, 4, "ng-container")(1, MonthTableComponent_For_4_For_3_Case_1_Conditional_1_Template, 1, 1)(2, MonthTableComponent_For_4_For_3_Case_1_Conditional_2_Template, 2, 6);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275conditional(0, cell_r5.isTemplateRef ? 0 : cell_r5.isNonEmptyString ? 1 : 2);
  }
}
function MonthTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function MonthTableComponent_For_4_For_3_Case_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, MonthTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.fullCellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function MonthTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function MonthTableComponent_For_4_For_3_Case_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div");
    \u0275\u0275template(3, MonthTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-value");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(cell_r5.content);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-content");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(9, _c010, cell_r5.value));
  }
}
function MonthTableComponent_For_4_For_3_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, MonthTableComponent_For_4_For_3_Case_2_Conditional_1_Template, 1, 4, "ng-container")(2, MonthTableComponent_For_4_For_3_Case_2_Conditional_2_Template, 4, 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date ant-picker-cell-inner");
    \u0275\u0275classProp("ant-picker-calendar-date-today", cell_r5.isToday);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, cell_r5.fullCellRender ? 1 : 2);
  }
}
function MonthTableComponent_For_4_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 8);
    \u0275\u0275listener("click", function MonthTableComponent_For_4_For_3_Template_td_click_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.isDisabled ? null : cell_r5.onClick());
    })("mouseenter", function MonthTableComponent_For_4_For_3_Template_td_mouseenter_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.onMouseEnter());
    });
    \u0275\u0275template(1, MonthTableComponent_For_4_For_3_Case_1_Template, 3, 1)(2, MonthTableComponent_For_4_For_3_Case_2_Template, 3, 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_22_0;
    const cell_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("title", cell_r5.title);
    \u0275\u0275property("ngClass", cell_r5.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, (tmp_22_0 = ctx_r1.prefixCls) === "ant-picker" ? 1 : tmp_22_0 === "ant-picker-calendar" ? 2 : -1);
  }
}
function MonthTableComponent_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 1);
    \u0275\u0275template(1, MonthTableComponent_For_4_Conditional_1_Template, 2, 4, "td", 5);
    \u0275\u0275repeaterCreate(2, MonthTableComponent_For_4_For_3_Template, 3, 3, "td", 6, _forTrack02);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = ctx.$implicit;
    \u0275\u0275property("ngClass", row_r3.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, row_r3.weekNum ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(row_r3.dateCells);
  }
}
function DateHeaderComponent_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 6);
    \u0275\u0275listener("click", function DateHeaderComponent_For_7_Template_button_click_0_listener() {
      const selector_r2 = \u0275\u0275restoreView(_r1).$implicit;
      return \u0275\u0275resetView(selector_r2.onClick());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const selector_r2 = ctx.$implicit;
    \u0275\u0275classMap(selector_r2.className);
    \u0275\u0275propertyInterpolate("title", selector_r2.title || null);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", selector_r2.label, " ");
  }
}
function DateTableComponent_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 3);
  }
}
function DateTableComponent_Conditional_1_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "th", 4);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r1 = ctx.$implicit;
    \u0275\u0275propertyInterpolate("title", cell_r1.title);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r1.content, " ");
  }
}
function DateTableComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "thead")(1, "tr", 2);
    \u0275\u0275template(2, DateTableComponent_Conditional_1_Conditional_2_Template, 1, 0, "th", 3);
    \u0275\u0275repeaterCreate(3, DateTableComponent_Conditional_1_For_4_Template, 2, 2, "th", 4, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, ctx_r1.showWeek ? 2 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r1.headRow);
  }
}
function DateTableComponent_For_4_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "td", 7);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-week");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", row_r3.weekNum, " ");
  }
}
function DateTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateTableComponent_For_4_For_3_Case_1_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DateTableComponent_For_4_For_3_Case_1_Conditional_0_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function DateTableComponent_For_4_For_3_Case_1_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 10);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("innerHTML", cell_r5.cellRender, \u0275\u0275sanitizeHtml);
  }
}
function DateTableComponent_For_4_For_3_Case_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-cell-inner");
    \u0275\u0275attribute("aria-selected", cell_r5.isSelected)("aria-disabled", cell_r5.isDisabled);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", cell_r5.content, " ");
  }
}
function DateTableComponent_For_4_For_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DateTableComponent_For_4_For_3_Case_1_Conditional_0_Template, 1, 4, "ng-container")(1, DateTableComponent_For_4_For_3_Case_1_Conditional_1_Template, 1, 1)(2, DateTableComponent_For_4_For_3_Case_1_Conditional_2_Template, 2, 6);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275conditional(0, cell_r5.isTemplateRef ? 0 : cell_r5.isNonEmptyString ? 1 : 2);
  }
}
function DateTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateTableComponent_For_4_For_3_Case_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DateTableComponent_For_4_For_3_Case_2_Conditional_1_ng_container_0_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("ngTemplateOutlet", cell_r5.fullCellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c010, cell_r5.value));
  }
}
function DateTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateTableComponent_For_4_For_3_Case_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div");
    \u0275\u0275template(3, DateTableComponent_For_4_For_3_Case_2_Conditional_2_ng_container_3_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-value");
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(cell_r5.content);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date-content");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", cell_r5.cellRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(9, _c010, cell_r5.value));
  }
}
function DateTableComponent_For_4_For_3_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, DateTableComponent_For_4_For_3_Case_2_Conditional_1_Template, 1, 4, "ng-container")(2, DateTableComponent_For_4_For_3_Case_2_Conditional_2_Template, 4, 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const cell_r5 = \u0275\u0275nextContext().$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-date ant-picker-cell-inner");
    \u0275\u0275classProp("ant-picker-calendar-date-today", cell_r5.isToday);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, cell_r5.fullCellRender ? 1 : 2);
  }
}
function DateTableComponent_For_4_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 8);
    \u0275\u0275listener("click", function DateTableComponent_For_4_For_3_Template_td_click_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.isDisabled ? null : cell_r5.onClick());
    })("mouseenter", function DateTableComponent_For_4_For_3_Template_td_mouseenter_0_listener() {
      const cell_r5 = \u0275\u0275restoreView(_r4).$implicit;
      return \u0275\u0275resetView(cell_r5.onMouseEnter());
    });
    \u0275\u0275template(1, DateTableComponent_For_4_For_3_Case_1_Template, 3, 1)(2, DateTableComponent_For_4_For_3_Case_2_Template, 3, 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    let tmp_22_0;
    const cell_r5 = ctx.$implicit;
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275propertyInterpolate("title", cell_r5.title);
    \u0275\u0275property("ngClass", cell_r5.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, (tmp_22_0 = ctx_r1.prefixCls) === "ant-picker" ? 1 : tmp_22_0 === "ant-picker-calendar" ? 2 : -1);
  }
}
function DateTableComponent_For_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 1);
    \u0275\u0275template(1, DateTableComponent_For_4_Conditional_1_Template, 2, 4, "td", 5);
    \u0275\u0275repeaterCreate(2, DateTableComponent_For_4_For_3_Template, 3, 3, "td", 6, _forTrack02);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r3 = ctx.$implicit;
    \u0275\u0275property("ngClass", row_r3.classMap);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, row_r3.weekNum ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(row_r3.dateCells);
  }
}
function InnerPopupComponent_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "decade-header", 1);
    \u0275\u0275twoWayListener("valueChange", function InnerPopupComponent_Case_2_Template_decade_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("panelModeChange", function InnerPopupComponent_Case_2_Template_decade_header_panelModeChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.panelModeChange.emit($event));
    })("valueChange", function InnerPopupComponent_Case_2_Template_decade_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.headerChange.emit($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1, "div")(2, "decade-table", 2);
    \u0275\u0275listener("valueChange", function InnerPopupComponent_Case_2_Template_decade_table_valueChange_2_listener($event) {
      \u0275\u0275restoreView(_r1);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onChooseDecade($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("value", ctx_r1.activeDate);
    \u0275\u0275property("locale", ctx_r1.locale)("showSuperPreBtn", ctx_r1.enablePrevNext("prev", "decade"))("showSuperNextBtn", ctx_r1.enablePrevNext("next", "decade"))("showNextBtn", false)("showPreBtn", false);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-body");
    \u0275\u0275advance();
    \u0275\u0275property("activeDate", ctx_r1.activeDate)("value", ctx_r1.value)("locale", ctx_r1.locale)("disabledDate", ctx_r1.disabledDate);
  }
}
function InnerPopupComponent_Case_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "year-header", 1);
    \u0275\u0275twoWayListener("valueChange", function InnerPopupComponent_Case_3_Template_year_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("panelModeChange", function InnerPopupComponent_Case_3_Template_year_header_panelModeChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.panelModeChange.emit($event));
    })("valueChange", function InnerPopupComponent_Case_3_Template_year_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.headerChange.emit($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1, "div")(2, "year-table", 3);
    \u0275\u0275listener("valueChange", function InnerPopupComponent_Case_3_Template_year_table_valueChange_2_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onChooseYear($event));
    })("cellHover", function InnerPopupComponent_Case_3_Template_year_table_cellHover_2_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.cellHover.emit($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("value", ctx_r1.activeDate);
    \u0275\u0275property("locale", ctx_r1.locale)("showSuperPreBtn", ctx_r1.enablePrevNext("prev", "year"))("showSuperNextBtn", ctx_r1.enablePrevNext("next", "year"))("showNextBtn", false)("showPreBtn", false);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-body");
    \u0275\u0275advance();
    \u0275\u0275property("activeDate", ctx_r1.activeDate)("value", ctx_r1.value)("locale", ctx_r1.locale)("disabledDate", ctx_r1.disabledDate)("selectedValue", ctx_r1.selectedValue)("hoverValue", ctx_r1.hoverValue);
  }
}
function InnerPopupComponent_Case_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "month-header", 1);
    \u0275\u0275twoWayListener("valueChange", function InnerPopupComponent_Case_4_Template_month_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("panelModeChange", function InnerPopupComponent_Case_4_Template_month_header_panelModeChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.panelModeChange.emit($event));
    })("valueChange", function InnerPopupComponent_Case_4_Template_month_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.headerChange.emit($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1, "div")(2, "month-table", 4);
    \u0275\u0275listener("valueChange", function InnerPopupComponent_Case_4_Template_month_table_valueChange_2_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onChooseMonth($event));
    })("cellHover", function InnerPopupComponent_Case_4_Template_month_table_cellHover_2_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.cellHover.emit($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("value", ctx_r1.activeDate);
    \u0275\u0275property("locale", ctx_r1.locale)("showSuperPreBtn", ctx_r1.enablePrevNext("prev", "month"))("showSuperNextBtn", ctx_r1.enablePrevNext("next", "month"))("showNextBtn", false)("showPreBtn", false);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-body");
    \u0275\u0275advance();
    \u0275\u0275property("value", ctx_r1.value)("activeDate", ctx_r1.activeDate)("locale", ctx_r1.locale)("disabledDate", ctx_r1.disabledDate)("selectedValue", ctx_r1.selectedValue)("hoverValue", ctx_r1.hoverValue);
  }
}
function InnerPopupComponent_Case_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "date-header", 5);
    \u0275\u0275twoWayListener("valueChange", function InnerPopupComponent_Case_5_Template_date_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("panelModeChange", function InnerPopupComponent_Case_5_Template_date_header_panelModeChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.panelModeChange.emit($event));
    })("valueChange", function InnerPopupComponent_Case_5_Template_date_header_valueChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.headerChange.emit($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1, "div")(2, "date-table", 6);
    \u0275\u0275listener("valueChange", function InnerPopupComponent_Case_5_Template_date_table_valueChange_2_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSelectDate($event));
    })("cellHover", function InnerPopupComponent_Case_5_Template_date_table_cellHover_2_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.cellHover.emit($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275twoWayProperty("value", ctx_r1.activeDate);
    \u0275\u0275property("locale", ctx_r1.locale)("showSuperPreBtn", ctx_r1.panelMode === "week" ? ctx_r1.enablePrevNext("prev", "week") : ctx_r1.enablePrevNext("prev", "date"))("showSuperNextBtn", ctx_r1.panelMode === "week" ? ctx_r1.enablePrevNext("next", "week") : ctx_r1.enablePrevNext("next", "date"))("showPreBtn", ctx_r1.panelMode === "week" ? ctx_r1.enablePrevNext("prev", "week") : ctx_r1.enablePrevNext("prev", "date"))("showNextBtn", ctx_r1.panelMode === "week" ? ctx_r1.enablePrevNext("next", "week") : ctx_r1.enablePrevNext("next", "date"));
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r1.prefixCls, "-body");
    \u0275\u0275advance();
    \u0275\u0275property("locale", ctx_r1.locale)("showWeek", ctx_r1.showWeek)("value", ctx_r1.value)("activeDate", ctx_r1.activeDate)("disabledDate", ctx_r1.disabledDate)("cellRender", ctx_r1.dateRender)("selectedValue", ctx_r1.selectedValue)("hoverValue", ctx_r1.hoverValue)("canSelectWeek", ctx_r1.panelMode === "week");
  }
}
function InnerPopupComponent_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-time-picker-panel", 7);
    \u0275\u0275listener("ngModelChange", function InnerPopupComponent_Conditional_6_Template_nz_time_picker_panel_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onSelectTime($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzInDatePicker", true)("ngModel", ctx_r1.value == null ? null : ctx_r1.value.nativeDate)("format", ctx_r1.timeOptions.nzFormat)("nzHourStep", ctx_r1.timeOptions.nzHourStep)("nzMinuteStep", ctx_r1.timeOptions.nzMinuteStep)("nzSecondStep", ctx_r1.timeOptions.nzSecondStep)("nzDisabledHours", ctx_r1.timeOptions.nzDisabledHours)("nzDisabledMinutes", ctx_r1.timeOptions.nzDisabledMinutes)("nzDisabledSeconds", ctx_r1.timeOptions.nzDisabledSeconds)("nzHideDisabledOptions", !!ctx_r1.timeOptions.nzHideDisabledOptions)("nzDefaultOpenValue", ctx_r1.timeOptions.nzDefaultOpenValue)("nzUse12Hours", !!ctx_r1.timeOptions.nzUse12Hours)("nzAddOn", ctx_r1.timeOptions.nzAddOn);
  }
}
var _c16 = (a0) => ({
  partType: a0
});
var _c26 = () => ({
  partType: "left"
});
var _c34 = () => ({
  partType: "right"
});
function DateRangePopupComponent_Conditional_0_Conditional_4_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateRangePopupComponent_Conditional_0_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DateRangePopupComponent_Conditional_0_Conditional_4_ng_container_0_Template, 1, 0, "ng-container", 6);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    const tplInnerPopup_r2 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", tplInnerPopup_r2)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c16, ctx_r0.datePickerService.activeInput));
  }
}
function DateRangePopupComponent_Conditional_0_Conditional_5_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateRangePopupComponent_Conditional_0_Conditional_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateRangePopupComponent_Conditional_0_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DateRangePopupComponent_Conditional_0_Conditional_5_ng_container_0_Template, 1, 0, "ng-container", 6)(1, DateRangePopupComponent_Conditional_0_Conditional_5_ng_container_1_Template, 1, 0, "ng-container", 6);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const tplInnerPopup_r2 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", tplInnerPopup_r2)("ngTemplateOutletContext", \u0275\u0275pureFunction0(4, _c26));
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", tplInnerPopup_r2)("ngTemplateOutletContext", \u0275\u0275pureFunction0(5, _c34));
  }
}
function DateRangePopupComponent_Conditional_0_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateRangePopupComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275element(1, "div", 4);
    \u0275\u0275elementStart(2, "div")(3, "div");
    \u0275\u0275template(4, DateRangePopupComponent_Conditional_0_Conditional_4_Template, 1, 4, "ng-container")(5, DateRangePopupComponent_Conditional_0_Conditional_5_Template, 2, 6);
    \u0275\u0275elementEnd();
    \u0275\u0275template(6, DateRangePopupComponent_Conditional_0_ng_container_6_Template, 1, 0, "ng-container", 5);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const tplFooter_r3 = \u0275\u0275reference(5);
    \u0275\u0275classMapInterpolate2("", ctx_r0.prefixCls, "-range-wrapper ", ctx_r0.prefixCls, "-date-range-wrapper");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-range-arrow");
    \u0275\u0275property("ngStyle", ctx_r0.arrowPosition);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate2("", ctx_r0.prefixCls, "-panel-container ", ctx_r0.showWeek ? ctx_r0.prefixCls + "-week-number" : "", "");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-panels");
    \u0275\u0275advance();
    \u0275\u0275conditional(4, ctx_r0.hasTimePicker ? 4 : 5);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngTemplateOutlet", tplFooter_r3);
  }
}
function DateRangePopupComponent_Conditional_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateRangePopupComponent_Conditional_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function DateRangePopupComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "div", 7);
    \u0275\u0275template(2, DateRangePopupComponent_Conditional_1_ng_container_2_Template, 1, 0, "ng-container", 5)(3, DateRangePopupComponent_Conditional_1_ng_container_3_Template, 1, 0, "ng-container", 5);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const tplInnerPopup_r2 = \u0275\u0275reference(3);
    const tplFooter_r3 = \u0275\u0275reference(5);
    \u0275\u0275classMapInterpolate4("", ctx_r0.prefixCls, "-panel-container ", ctx_r0.showWeek ? ctx_r0.prefixCls + "-week-number" : "", " ", ctx_r0.hasTimePicker ? ctx_r0.prefixCls + "-time" : "", " ", ctx_r0.isRange ? ctx_r0.prefixCls + "-range" : "", "");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-panel");
    \u0275\u0275classProp("ant-picker-panel-rtl", ctx_r0.dir === "rtl");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", tplInnerPopup_r2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", tplFooter_r3);
  }
}
function DateRangePopupComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "inner-popup", 8);
    \u0275\u0275listener("panelModeChange", function DateRangePopupComponent_ng_template_2_Template_inner_popup_panelModeChange_1_listener($event) {
      const partType_r5 = \u0275\u0275restoreView(_r4).partType;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onPanelModeChange($event, partType_r5));
    })("cellHover", function DateRangePopupComponent_ng_template_2_Template_inner_popup_cellHover_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onCellHover($event));
    })("selectDate", function DateRangePopupComponent_ng_template_2_Template_inner_popup_selectDate_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.changeValueFromSelect($event, !ctx_r0.showTime));
    })("selectTime", function DateRangePopupComponent_ng_template_2_Template_inner_popup_selectTime_1_listener($event) {
      const partType_r5 = \u0275\u0275restoreView(_r4).partType;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onSelectTime($event, partType_r5));
    })("headerChange", function DateRangePopupComponent_ng_template_2_Template_inner_popup_headerChange_1_listener($event) {
      const partType_r5 = \u0275\u0275restoreView(_r4).partType;
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.onActiveDateChange($event, partType_r5));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const partType_r5 = ctx.partType;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-panel");
    \u0275\u0275classProp("ant-picker-panel-rtl", ctx_r0.dir === "rtl");
    \u0275\u0275advance();
    \u0275\u0275property("showWeek", ctx_r0.showWeek)("endPanelMode", ctx_r0.getPanelMode(ctx_r0.endPanelMode, partType_r5))("partType", partType_r5)("locale", ctx_r0.locale)("showTimePicker", ctx_r0.hasTimePicker)("timeOptions", ctx_r0.getTimeOptions(partType_r5))("panelMode", ctx_r0.getPanelMode(ctx_r0.panelMode, partType_r5))("activeDate", ctx_r0.getActiveDate(partType_r5))("value", ctx_r0.getValue(partType_r5))("disabledDate", ctx_r0.disabledDate)("dateRender", ctx_r0.dateRender)("selectedValue", ctx_r0.datePickerService == null ? null : ctx_r0.datePickerService.value)("hoverValue", ctx_r0.hoverValue);
  }
}
function DateRangePopupComponent_ng_template_4_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "calendar-footer", 10);
    \u0275\u0275listener("clickOk", function DateRangePopupComponent_ng_template_4_Conditional_0_Template_calendar_footer_clickOk_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onClickOk());
    })("clickToday", function DateRangePopupComponent_ng_template_4_Conditional_0_Template_calendar_footer_clickToday_0_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onClickToday($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    const tplRangeQuickSelector_r7 = \u0275\u0275reference(7);
    \u0275\u0275property("locale", ctx_r0.locale)("isRange", ctx_r0.isRange)("showToday", ctx_r0.showToday)("showNow", ctx_r0.showNow)("hasTimePicker", ctx_r0.hasTimePicker)("okDisabled", !ctx_r0.isAllowed(ctx_r0.datePickerService == null ? null : ctx_r0.datePickerService.value))("extraFooter", ctx_r0.extraFooter)("rangeQuickSelector", ctx_r0.ranges ? tplRangeQuickSelector_r7 : null);
  }
}
function DateRangePopupComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, DateRangePopupComponent_ng_template_4_Conditional_0_Template, 1, 8, "calendar-footer", 9);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, ctx_r0.hasFooter ? 0 : -1);
  }
}
function DateRangePopupComponent_ng_template_6_For_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 11);
    \u0275\u0275listener("click", function DateRangePopupComponent_ng_template_6_For_1_Template_li_click_0_listener() {
      const name_r9 = \u0275\u0275restoreView(_r8).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onClickPresetRange(ctx_r0.ranges[name_r9]));
    })("mouseenter", function DateRangePopupComponent_ng_template_6_For_1_Template_li_mouseenter_0_listener() {
      const name_r9 = \u0275\u0275restoreView(_r8).$implicit;
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onHoverPresetRange(ctx_r0.ranges[name_r9]));
    })("mouseleave", function DateRangePopupComponent_ng_template_6_For_1_Template_li_mouseleave_0_listener() {
      \u0275\u0275restoreView(_r8);
      const ctx_r0 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r0.onPresetRangeMouseLeave());
    });
    \u0275\u0275elementStart(1, "span", 12);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const name_r9 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r0.prefixCls, "-preset");
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(name_r9);
  }
}
function DateRangePopupComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, DateRangePopupComponent_ng_template_6_For_1_Template, 3, 4, "li", 3, \u0275\u0275repeaterTrackByIdentity);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275repeater(ctx_r0.getObjectKeys(ctx_r0.ranges));
  }
}
var _c44 = ["separatorElement"];
var _c52 = ["pickerInput"];
var _c62 = ["rangePickerInput"];
function NzDatePickerComponent_Conditional_0_Conditional_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div")(1, "input", 8, 3);
    \u0275\u0275twoWayListener("ngModelChange", function NzDatePickerComponent_Conditional_0_Conditional_0_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r2.inputValue, $event) || (ctx_r2.inputValue = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("focus", function NzDatePickerComponent_Conditional_0_Conditional_0_Template_input_focus_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onFocus($event));
    })("focusout", function NzDatePickerComponent_Conditional_0_Conditional_0_Template_input_focusout_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onFocusout($event));
    })("ngModelChange", function NzDatePickerComponent_Conditional_0_Conditional_0_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onInputChange($event));
    })("keyup.enter", function NzDatePickerComponent_Conditional_0_Conditional_0_Template_input_keyup_enter_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onKeyupEnter($event));
    });
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, NzDatePickerComponent_Conditional_0_Conditional_0_ng_container_3_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    const tplRightRest_r4 = \u0275\u0275reference(5);
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-input");
    \u0275\u0275advance();
    \u0275\u0275classProp("ant-input-disabled", ctx_r2.nzDisabled);
    \u0275\u0275propertyInterpolate("placeholder", ctx_r2.getPlaceholder());
    \u0275\u0275property("disabled", ctx_r2.nzDisabled)("readOnly", ctx_r2.nzInputReadOnly);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.inputValue);
    \u0275\u0275property("size", ctx_r2.inputSize);
    \u0275\u0275attribute("id", ctx_r2.nzId);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngTemplateOutlet", tplRightRest_r4);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_5_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(4);
    \u0275\u0275textInterpolate1(" ", ctx_r2.nzSeparator, " ");
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_5_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 12);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_5_Conditional_1_Template, 1, 1)(2, NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_5_Conditional_2_Template, 1, 0);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r2.nzSeparator ? 1 : 2);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function NzDatePickerComponent_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div");
    \u0275\u0275template(1, NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_1_Template, 1, 0, "ng-container", 10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div", null, 4)(4, "span");
    \u0275\u0275template(5, NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_5_Template, 3, 1, "ng-container", 11);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(6, "div");
    \u0275\u0275template(7, NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_7_Template, 1, 0, "ng-container", 10);
    \u0275\u0275elementEnd();
    \u0275\u0275template(8, NzDatePickerComponent_Conditional_0_Conditional_1_ng_container_8_Template, 1, 0, "ng-container", 9);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    const tplRangeInput_r5 = \u0275\u0275reference(3);
    const tplRightRest_r4 = \u0275\u0275reference(5);
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-input");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", tplRangeInput_r5)("ngTemplateOutletContext", \u0275\u0275pureFunction0(18, _c26));
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-range-separator");
    \u0275\u0275advance(2);
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-separator");
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r2.nzSeparator);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-input");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", tplRangeInput_r5)("ngTemplateOutletContext", \u0275\u0275pureFunction0(19, _c34));
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", tplRightRest_r4);
  }
}
function NzDatePickerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzDatePickerComponent_Conditional_0_Conditional_0_Template, 4, 12, "div", 7)(1, NzDatePickerComponent_Conditional_0_Conditional_1_Template, 9, 20);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, !ctx_r2.isRange ? 0 : 1);
  }
}
function NzDatePickerComponent_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function NzDatePickerComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzDatePickerComponent_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 13);
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const inlineMode_r6 = \u0275\u0275reference(7);
    \u0275\u0275property("ngTemplateOutlet", inlineMode_r6);
  }
}
function NzDatePickerComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "input", 14, 5);
    \u0275\u0275listener("click", function NzDatePickerComponent_ng_template_2_Template_input_click_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onClickInputBox($event));
    })("focusout", function NzDatePickerComponent_ng_template_2_Template_input_focusout_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onFocusout($event));
    })("focus", function NzDatePickerComponent_ng_template_2_Template_input_focus_0_listener($event) {
      const partType_r8 = \u0275\u0275restoreView(_r7).partType;
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onFocus($event, partType_r8));
    })("keyup.enter", function NzDatePickerComponent_ng_template_2_Template_input_keyup_enter_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onKeyupEnter($event));
    });
    \u0275\u0275twoWayListener("ngModelChange", function NzDatePickerComponent_ng_template_2_Template_input_ngModelChange_0_listener($event) {
      const partType_r8 = \u0275\u0275restoreView(_r7).partType;
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.inputValue[ctx_r2.datePickerService.getActiveIndex(partType_r8)], $event) || (ctx_r2.inputValue[ctx_r2.datePickerService.getActiveIndex(partType_r8)] = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function NzDatePickerComponent_ng_template_2_Template_input_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onInputChange($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const partType_r8 = ctx.partType;
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275propertyInterpolate("placeholder", ctx_r2.getPlaceholder(partType_r8));
    \u0275\u0275property("disabled", ctx_r2.nzDisabled)("readOnly", ctx_r2.nzInputReadOnly)("size", ctx_r2.inputSize);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.inputValue[ctx_r2.datePickerService.getActiveIndex(partType_r8)]);
    \u0275\u0275attribute("id", ctx_r2.nzId);
  }
}
function NzDatePickerComponent_ng_template_4_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 17);
    \u0275\u0275listener("click", function NzDatePickerComponent_ng_template_4_Conditional_1_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.onClickClear($event));
    });
    \u0275\u0275element(1, "span", 18);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-clear");
  }
}
function NzDatePickerComponent_ng_template_4_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "span", 19);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const suffixIcon_r10 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("nzType", suffixIcon_r10);
  }
}
function NzDatePickerComponent_ng_template_4_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-form-item-feedback-icon", 16);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("status", ctx_r2.status);
  }
}
function NzDatePickerComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 15);
    \u0275\u0275template(1, NzDatePickerComponent_ng_template_4_Conditional_1_Template, 2, 3, "span", 7);
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275template(3, NzDatePickerComponent_ng_template_4_ng_container_3_Template, 2, 1, "ng-container", 11)(4, NzDatePickerComponent_ng_template_4_Conditional_4_Template, 1, 1, "nz-form-item-feedback-icon", 16);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-active-bar");
    \u0275\u0275property("ngStyle", ctx_r2.activeBarStyle);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r2.showClear ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate1("", ctx_r2.prefixCls, "-suffix");
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r2.nzSuffixIcon);
    \u0275\u0275advance();
    \u0275\u0275conditional(4, ctx_r2.hasFeedback && !!ctx_r2.status ? 4 : -1);
  }
}
function NzDatePickerComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 15)(1, "date-range-popup", 20);
    \u0275\u0275listener("panelModeChange", function NzDatePickerComponent_ng_template_6_Template_date_range_popup_panelModeChange_1_listener($event) {
      \u0275\u0275restoreView(_r11);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onPanelModeChange($event));
    })("calendarChange", function NzDatePickerComponent_ng_template_6_Template_date_range_popup_calendarChange_1_listener($event) {
      \u0275\u0275restoreView(_r11);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onCalendarChange($event));
    })("resultOk", function NzDatePickerComponent_ng_template_6_Template_date_range_popup_resultOk_1_listener() {
      \u0275\u0275restoreView(_r11);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.onResultOk());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate2("", ctx_r2.prefixCls, "-dropdown ", ctx_r2.nzDropdownClassName, "");
    \u0275\u0275classProp("ant-picker-dropdown-rtl", ctx_r2.dir === "rtl")("ant-picker-dropdown-placement-bottomLeft", ctx_r2.currentPositionY === "bottom" && ctx_r2.currentPositionX === "start")("ant-picker-dropdown-placement-topLeft", ctx_r2.currentPositionY === "top" && ctx_r2.currentPositionX === "start")("ant-picker-dropdown-placement-bottomRight", ctx_r2.currentPositionY === "bottom" && ctx_r2.currentPositionX === "end")("ant-picker-dropdown-placement-topRight", ctx_r2.currentPositionY === "top" && ctx_r2.currentPositionX === "end")("ant-picker-dropdown-range", ctx_r2.isRange)("ant-picker-active-left", ctx_r2.datePickerService.activeInput === "left")("ant-picker-active-right", ctx_r2.datePickerService.activeInput === "right");
    \u0275\u0275property("ngStyle", ctx_r2.nzPopupStyle);
    \u0275\u0275advance();
    \u0275\u0275property("isRange", ctx_r2.isRange)("inline", ctx_r2.nzInline)("defaultPickerValue", ctx_r2.nzDefaultPickerValue)("showWeek", ctx_r2.nzShowWeekNumber || ctx_r2.nzMode === "week")("panelMode", ctx_r2.panelMode)("locale", ctx_r2.nzLocale == null ? null : ctx_r2.nzLocale.lang)("showToday", ctx_r2.nzMode === "date" && ctx_r2.nzShowToday && !ctx_r2.isRange && !ctx_r2.nzShowTime)("showNow", ctx_r2.nzMode === "date" && ctx_r2.nzShowNow && !ctx_r2.isRange && !!ctx_r2.nzShowTime)("showTime", ctx_r2.nzShowTime)("dateRender", ctx_r2.nzDateRender)("disabledDate", ctx_r2.nzDisabledDate)("disabledTime", ctx_r2.nzDisabledTime)("extraFooter", ctx_r2.extraFooter)("ranges", ctx_r2.nzRanges)("dir", ctx_r2.dir);
  }
}
function NzDatePickerComponent_ng_template_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function NzDatePickerComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 21);
    \u0275\u0275template(1, NzDatePickerComponent_ng_template_8_ng_container_1_Template, 1, 0, "ng-container", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    const inlineMode_r6 = \u0275\u0275reference(7);
    \u0275\u0275styleProp("position", "relative");
    \u0275\u0275property("nzNoAnimation", !!(ctx_r2.noAnimation == null ? null : ctx_r2.noAnimation.nzNoAnimation))("@slideMotion", "enter");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", inlineMode_r6);
  }
}
var PREFIX_CLASS = "ant-picker";
var defaultDisabledTime = {
  nzDisabledHours() {
    return [];
  },
  nzDisabledMinutes() {
    return [];
  },
  nzDisabledSeconds() {
    return [];
  }
};
function getTimeConfig(value, disabledTime) {
  let disabledTimeConfig = disabledTime ? disabledTime(value && value.nativeDate) : {};
  disabledTimeConfig = __spreadValues(__spreadValues({}, defaultDisabledTime), disabledTimeConfig);
  return disabledTimeConfig;
}
function isTimeValidByConfig(value, disabledTimeConfig) {
  let invalidTime = false;
  if (value) {
    const hour = value.getHours();
    const minutes = value.getMinutes();
    const seconds = value.getSeconds();
    const disabledHours = disabledTimeConfig.nzDisabledHours();
    if (disabledHours.indexOf(hour) === -1) {
      const disabledMinutes = disabledTimeConfig.nzDisabledMinutes(hour);
      if (disabledMinutes.indexOf(minutes) === -1) {
        const disabledSeconds = disabledTimeConfig.nzDisabledSeconds(hour, minutes);
        invalidTime = disabledSeconds.indexOf(seconds) !== -1;
      } else {
        invalidTime = true;
      }
    } else {
      invalidTime = true;
    }
  }
  return !invalidTime;
}
function isTimeValid(value, disabledTime) {
  const disabledTimeConfig = getTimeConfig(value, disabledTime);
  return isTimeValidByConfig(value, disabledTimeConfig);
}
function isAllowedDate(value, disabledDate, disabledTime) {
  if (!value) {
    return false;
  }
  if (disabledDate) {
    if (disabledDate(value.nativeDate)) {
      return false;
    }
  }
  if (disabledTime) {
    if (!isTimeValid(value, disabledTime)) {
      return false;
    }
  }
  return true;
}
function transCompatFormat(format) {
  return format && format.replace(/Y/g, "y").replace(/D/g, "d");
}
var _CalendarFooterComponent = class _CalendarFooterComponent {
  constructor(dateHelper) {
    this.dateHelper = dateHelper;
    this.showToday = false;
    this.showNow = false;
    this.hasTimePicker = false;
    this.isRange = false;
    this.okDisabled = false;
    this.rangeQuickSelector = null;
    this.clickOk = new EventEmitter();
    this.clickToday = new EventEmitter();
    this.prefixCls = PREFIX_CLASS;
    this.isTemplateRef = isTemplateRef;
    this.isNonEmptyString = isNonEmptyString;
    this.isTodayDisabled = false;
    this.todayTitle = "";
  }
  ngOnChanges(changes) {
    const now = /* @__PURE__ */ new Date();
    if (changes.disabledDate) {
      this.isTodayDisabled = !!(this.disabledDate && this.disabledDate(now));
    }
    if (changes.locale) {
      const dateFormat = transCompatFormat(this.locale.dateFormat);
      this.todayTitle = this.dateHelper.format(now, dateFormat);
    }
  }
  onClickToday() {
    const now = new CandyDate();
    this.clickToday.emit(now.clone());
  }
  get isExtraFooterTemplateRef() {
    return isTemplateRef(this.extraFooter);
  }
  get isExtraFooterNonEmptyString() {
    return isNonEmptyString(this.extraFooter);
  }
};
_CalendarFooterComponent.\u0275fac = function CalendarFooterComponent_Factory(t) {
  return new (t || _CalendarFooterComponent)(\u0275\u0275directiveInject(DateHelperService));
};
_CalendarFooterComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _CalendarFooterComponent,
  selectors: [["calendar-footer"]],
  inputs: {
    locale: "locale",
    showToday: "showToday",
    showNow: "showNow",
    hasTimePicker: "hasTimePicker",
    isRange: "isRange",
    okDisabled: "okDisabled",
    disabledDate: "disabledDate",
    extraFooter: "extraFooter",
    rangeQuickSelector: "rangeQuickSelector"
  },
  outputs: {
    clickOk: "clickOk",
    clickToday: "clickToday"
  },
  exportAs: ["calendarFooter"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 4,
  vars: 6,
  consts: [[3, "class"], ["role", "button", 3, "class", "title"], [3, "innerHTML"], [4, "ngTemplateOutlet"], ["role", "button", 3, "click", "title"], [3, "click"], ["nz-button", "", "type", "button", "nzType", "primary", "nzSize", "small", 3, "click", "disabled"]],
  template: function CalendarFooterComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div");
      \u0275\u0275template(1, CalendarFooterComponent_Conditional_1_Template, 3, 5, "div", 0)(2, CalendarFooterComponent_Conditional_2_Template, 2, 6, "a", 1)(3, CalendarFooterComponent_Conditional_3_Template, 4, 6, "ul", 0);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-footer");
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.extraFooter ? 1 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(2, ctx.showToday ? 2 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(3, ctx.hasTimePicker || ctx.rangeQuickSelector ? 3 : -1);
    }
  },
  dependencies: [NgTemplateOutlet, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective],
  encapsulation: 2,
  changeDetection: 0
});
var CalendarFooterComponent = _CalendarFooterComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CalendarFooterComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      // eslint-disable-next-line @angular-eslint/component-selector
      selector: "calendar-footer",
      exportAs: "calendarFooter",
      template: `
    <div class="{{ prefixCls }}-footer">
      @if (extraFooter) {
        <div class="{{ prefixCls }}-footer-extra">
          @if (isExtraFooterTemplateRef) {
            <ng-container *ngTemplateOutlet="$any(extraFooter)" />
          }
          @if (isExtraFooterNonEmptyString) {
            <span [innerHTML]="extraFooter"></span>
          }
        </div>
      }

      @if (showToday) {
        <a
          class="{{ prefixCls }}-today-btn {{ isTodayDisabled ? prefixCls + '-today-btn-disabled' : '' }}"
          role="button"
          (click)="isTodayDisabled ? null : onClickToday()"
          title="{{ todayTitle }}"
        >
          {{ locale.today }}
        </a>
      }

      @if (hasTimePicker || rangeQuickSelector) {
        <ul class="{{ prefixCls }}-ranges">
          <ng-container *ngTemplateOutlet="rangeQuickSelector" />
          @if (showNow) {
            <li class="{{ prefixCls }}-now">
              <a class="{{ prefixCls }}-now-btn" (click)="isTodayDisabled ? null : onClickToday()">
                {{ locale.now }}
              </a>
            </li>
          }

          @if (hasTimePicker) {
            <li class="{{ prefixCls }}-ok">
              <button
                nz-button
                type="button"
                nzType="primary"
                nzSize="small"
                [disabled]="okDisabled"
                (click)="okDisabled ? null : clickOk.emit()"
              >
                {{ locale.ok }}
              </button>
            </li>
          }
        </ul>
      }
    </div>
  `,
      imports: [NgTemplateOutlet, NzButtonModule],
      standalone: true
    }]
  }], () => [{
    type: DateHelperService
  }], {
    locale: [{
      type: Input
    }],
    showToday: [{
      type: Input
    }],
    showNow: [{
      type: Input
    }],
    hasTimePicker: [{
      type: Input
    }],
    isRange: [{
      type: Input
    }],
    okDisabled: [{
      type: Input
    }],
    disabledDate: [{
      type: Input
    }],
    extraFooter: [{
      type: Input
    }],
    rangeQuickSelector: [{
      type: Input
    }],
    clickOk: [{
      type: Output
    }],
    clickToday: [{
      type: Output
    }]
  });
})();
var _DatePickerService = class _DatePickerService {
  constructor() {
    this.activeInput = "left";
    this.arrowLeft = 0;
    this.isRange = false;
    this.valueChange$ = new ReplaySubject(1);
    this.emitValue$ = new Subject();
    this.inputPartChange$ = new Subject();
  }
  initValue(reset = false) {
    if (reset) {
      this.initialValue = this.isRange ? [] : null;
    }
    this.setValue(this.initialValue);
  }
  hasValue(value = this.value) {
    if (Array.isArray(value)) {
      return !!value[0] || !!value[1];
    } else {
      return !!value;
    }
  }
  makeValue(value) {
    if (this.isRange) {
      return value ? value.map((val) => new CandyDate(val)) : [];
    } else {
      return value ? new CandyDate(value) : null;
    }
  }
  setActiveDate(value, hasTimePicker = false, mode = "month") {
    const parentPanels = {
      date: "month",
      month: "year",
      year: "decade"
    };
    if (this.isRange) {
      this.activeDate = normalizeRangeValue(value, hasTimePicker, parentPanels[mode], this.activeInput);
    } else {
      this.activeDate = cloneDate(value);
    }
  }
  setValue(value) {
    this.value = value;
    this.valueChange$.next(this.value);
  }
  getActiveIndex(part = this.activeInput) {
    return {
      left: 0,
      right: 1
    }[part];
  }
  ngOnDestroy() {
    this.valueChange$.complete();
    this.emitValue$.complete();
    this.inputPartChange$.complete();
  }
};
_DatePickerService.\u0275fac = function DatePickerService_Factory(t) {
  return new (t || _DatePickerService)();
};
_DatePickerService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DatePickerService,
  factory: _DatePickerService.\u0275fac
});
var DatePickerService = _DatePickerService;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatePickerService, [{
    type: Injectable
  }], null, null);
})();
var _AbstractPanelHeader = class _AbstractPanelHeader {
  constructor() {
    this.prefixCls = `ant-picker-header`;
    this.selectors = [];
    this.showSuperPreBtn = true;
    this.showSuperNextBtn = true;
    this.showPreBtn = true;
    this.showNextBtn = true;
    this.panelModeChange = new EventEmitter();
    this.valueChange = new EventEmitter();
  }
  superPreviousTitle() {
    return this.locale.previousYear;
  }
  previousTitle() {
    return this.locale.previousMonth;
  }
  superNextTitle() {
    return this.locale.nextYear;
  }
  nextTitle() {
    return this.locale.nextMonth;
  }
  superPrevious() {
    this.changeValue(this.value.addYears(-1));
  }
  superNext() {
    this.changeValue(this.value.addYears(1));
  }
  previous() {
    this.changeValue(this.value.addMonths(-1));
  }
  next() {
    this.changeValue(this.value.addMonths(1));
  }
  changeValue(value) {
    if (this.value !== value) {
      this.value = value;
      this.valueChange.emit(this.value);
      this.render();
    }
  }
  changeMode(mode) {
    this.panelModeChange.emit(mode);
  }
  render() {
    if (this.value) {
      this.selectors = this.getSelectors();
    }
  }
  ngOnInit() {
    if (!this.value) {
      this.value = new CandyDate();
    }
    this.selectors = this.getSelectors();
  }
  ngOnChanges(changes) {
    if (changes.value || changes.locale) {
      this.render();
    }
  }
};
_AbstractPanelHeader.\u0275fac = function AbstractPanelHeader_Factory(t) {
  return new (t || _AbstractPanelHeader)();
};
_AbstractPanelHeader.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _AbstractPanelHeader,
  inputs: {
    value: "value",
    locale: "locale",
    showSuperPreBtn: "showSuperPreBtn",
    showSuperNextBtn: "showSuperNextBtn",
    showPreBtn: "showPreBtn",
    showNextBtn: "showNextBtn"
  },
  outputs: {
    panelModeChange: "panelModeChange",
    valueChange: "valueChange"
  },
  features: [\u0275\u0275NgOnChangesFeature]
});
var AbstractPanelHeader = _AbstractPanelHeader;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractPanelHeader, [{
    type: Directive
  }], null, {
    value: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    showSuperPreBtn: [{
      type: Input
    }],
    showSuperNextBtn: [{
      type: Input
    }],
    showPreBtn: [{
      type: Input
    }],
    showNextBtn: [{
      type: Input
    }],
    panelModeChange: [{
      type: Output
    }],
    valueChange: [{
      type: Output
    }]
  });
})();
var _DecadeHeaderComponent = class _DecadeHeaderComponent extends AbstractPanelHeader {
  previous() {
  }
  next() {
  }
  get startYear() {
    return parseInt(`${this.value.getYear() / 100}`, 10) * 100;
  }
  get endYear() {
    return this.startYear + 99;
  }
  superPrevious() {
    this.changeValue(this.value.addYears(-100));
  }
  superNext() {
    this.changeValue(this.value.addYears(100));
  }
  getSelectors() {
    return [{
      className: `${this.prefixCls}-decade-btn`,
      title: "",
      onClick: () => {
      },
      label: `${this.startYear}-${this.endYear}`
    }];
  }
};
_DecadeHeaderComponent.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275DecadeHeaderComponent_BaseFactory;
  return function DecadeHeaderComponent_Factory(t) {
    return (\u0275DecadeHeaderComponent_BaseFactory || (\u0275DecadeHeaderComponent_BaseFactory = \u0275\u0275getInheritedFactory(_DecadeHeaderComponent)))(t || _DecadeHeaderComponent);
  };
})();
_DecadeHeaderComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _DecadeHeaderComponent,
  selectors: [["decade-header"]],
  exportAs: ["decadeHeader"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 12,
  vars: 30,
  consts: [["role", "button", "type", "button", "tabindex", "-1", 3, "click", "title"], [1, "ant-picker-super-prev-icon"], [1, "ant-picker-prev-icon"], ["role", "button", "type", "button", 3, "class", "title"], [1, "ant-picker-next-icon"], [1, "ant-picker-super-next-icon"], ["role", "button", "type", "button", 3, "click", "title"]],
  template: function DecadeHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div")(1, "button", 0);
      \u0275\u0275listener("click", function DecadeHeaderComponent_Template_button_click_1_listener() {
        return ctx.superPrevious();
      });
      \u0275\u0275element(2, "span", 1);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(3, "button", 0);
      \u0275\u0275listener("click", function DecadeHeaderComponent_Template_button_click_3_listener() {
        return ctx.previous();
      });
      \u0275\u0275element(4, "span", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "div");
      \u0275\u0275repeaterCreate(6, DecadeHeaderComponent_For_7_Template, 2, 5, "button", 3, \u0275\u0275repeaterTrackByIdentity);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "button", 0);
      \u0275\u0275listener("click", function DecadeHeaderComponent_Template_button_click_8_listener() {
        return ctx.next();
      });
      \u0275\u0275element(9, "span", 4);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(10, "button", 0);
      \u0275\u0275listener("click", function DecadeHeaderComponent_Template_button_click_10_listener() {
        return ctx.superNext();
      });
      \u0275\u0275element(11, "span", 5);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275classMap(ctx.prefixCls);
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superPreviousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.previousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-view");
      \u0275\u0275advance();
      \u0275\u0275repeater(ctx.selectors);
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.nextTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superNextTitle());
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var DecadeHeaderComponent = _DecadeHeaderComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DecadeHeaderComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "decade-header",
      exportAs: "decadeHeader",
      imports: [NgForOf, NgIf, NgClass],
      standalone: true,
      template: `<div class="{{ prefixCls }}">
  <button
    [style.visibility]="showSuperPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-prev-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superPreviousTitle() }}"
    (click)="superPrevious()"
  >
    <span class="ant-picker-super-prev-icon"></span>
  </button>
  <button
    [style.visibility]="showPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-prev-btn"
    role="button"
    type="button"
    title="{{ previousTitle() }}"
    tabindex="-1"
    (click)="previous()"
  >
    <span class="ant-picker-prev-icon"></span>
  </button>

  <div class="{{ prefixCls }}-view">
    @for(selector of selectors; track selector) {
      <button
        class="{{ selector.className }}"
        role="button"
        type="button"
        title="{{ selector.title || null }}"
        (click)="selector.onClick()"
      >
        {{ selector.label }}
      </button>
    }
  </div>
  <button
    [style.visibility]="showNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ nextTitle() }}"
    (click)="next()"
  >
    <span class="ant-picker-next-icon"></span>
  </button>
  <button
    [style.visibility]="showSuperNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superNextTitle() }}"
    (click)="superNext()"
  >
    <span class="ant-picker-super-next-icon"></span>
  </button>
</div>
`
    }]
  }], null, null);
})();
var _AbstractTable = class _AbstractTable {
  constructor() {
    this.headRow = [];
    this.bodyRows = [];
    this.MAX_ROW = 6;
    this.MAX_COL = 7;
    this.prefixCls = "ant-picker";
    this.activeDate = new CandyDate();
    this.showWeek = false;
    this.selectedValue = [];
    this.hoverValue = [];
    this.canSelectWeek = false;
    this.valueChange = new EventEmitter();
    this.cellHover = new EventEmitter();
  }
  render() {
    if (this.activeDate) {
      this.headRow = this.makeHeadRow();
      this.bodyRows = this.makeBodyRows();
    }
  }
  hasRangeValue() {
    return this.selectedValue?.length > 0 || this.hoverValue?.length > 0;
  }
  getClassMap(cell) {
    return {
      [`ant-picker-cell`]: true,
      [`ant-picker-cell-in-view`]: true,
      [`ant-picker-cell-selected`]: cell.isSelected,
      [`ant-picker-cell-disabled`]: cell.isDisabled,
      [`ant-picker-cell-in-range`]: !!cell.isInSelectedRange,
      [`ant-picker-cell-range-start`]: !!cell.isSelectedStart,
      [`ant-picker-cell-range-end`]: !!cell.isSelectedEnd,
      [`ant-picker-cell-range-start-single`]: !!cell.isStartSingle,
      [`ant-picker-cell-range-end-single`]: !!cell.isEndSingle,
      [`ant-picker-cell-range-hover`]: !!cell.isInHoverRange,
      [`ant-picker-cell-range-hover-start`]: !!cell.isHoverStart,
      [`ant-picker-cell-range-hover-end`]: !!cell.isHoverEnd,
      [`ant-picker-cell-range-hover-edge-start`]: !!cell.isFirstCellInPanel,
      [`ant-picker-cell-range-hover-edge-end`]: !!cell.isLastCellInPanel,
      [`ant-picker-cell-range-start-near-hover`]: !!cell.isRangeStartNearHover,
      [`ant-picker-cell-range-end-near-hover`]: !!cell.isRangeEndNearHover
    };
  }
  ngOnInit() {
    this.render();
  }
  ngOnChanges(changes) {
    if (changes.activeDate && !changes.activeDate.currentValue) {
      this.activeDate = new CandyDate();
    }
    if (changes.disabledDate || changes.locale || changes.showWeek || changes.selectWeek || this.isDateRealChange(changes.activeDate) || this.isDateRealChange(changes.value) || this.isDateRealChange(changes.selectedValue) || this.isDateRealChange(changes.hoverValue)) {
      this.render();
    }
  }
  isDateRealChange(change) {
    if (change) {
      const previousValue = change.previousValue;
      const currentValue = change.currentValue;
      if (Array.isArray(currentValue)) {
        return !Array.isArray(previousValue) || currentValue.length !== previousValue.length || currentValue.some((value, index) => {
          const previousCandyDate = previousValue[index];
          return previousCandyDate instanceof CandyDate ? previousCandyDate.isSameDay(value) : previousCandyDate !== value;
        });
      } else {
        return !this.isSameDate(previousValue, currentValue);
      }
    }
    return false;
  }
  isSameDate(left, right) {
    return !left && !right || left && right && right.isSameDay(left);
  }
};
_AbstractTable.\u0275fac = function AbstractTable_Factory(t) {
  return new (t || _AbstractTable)();
};
_AbstractTable.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _AbstractTable,
  inputs: {
    prefixCls: "prefixCls",
    value: "value",
    locale: "locale",
    activeDate: "activeDate",
    showWeek: "showWeek",
    selectedValue: "selectedValue",
    hoverValue: "hoverValue",
    disabledDate: "disabledDate",
    cellRender: "cellRender",
    fullCellRender: "fullCellRender",
    canSelectWeek: "canSelectWeek"
  },
  outputs: {
    valueChange: "valueChange",
    cellHover: "cellHover"
  },
  features: [\u0275\u0275NgOnChangesFeature]
});
var AbstractTable = _AbstractTable;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractTable, [{
    type: Directive
  }], null, {
    prefixCls: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    activeDate: [{
      type: Input
    }],
    showWeek: [{
      type: Input
    }],
    selectedValue: [{
      type: Input
    }],
    hoverValue: [{
      type: Input
    }],
    disabledDate: [{
      type: Input
    }],
    cellRender: [{
      type: Input
    }],
    fullCellRender: [{
      type: Input
    }],
    canSelectWeek: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    cellHover: [{
      type: Output
    }]
  });
})();
var MAX_ROW = 4;
var MAX_COL = 3;
var _DecadeTableComponent = class _DecadeTableComponent extends AbstractTable {
  get startYear() {
    return parseInt(`${this.activeDate.getYear() / 100}`, 10) * 100;
  }
  get endYear() {
    return this.startYear + 99;
  }
  makeHeadRow() {
    return [];
  }
  makeBodyRows() {
    const decades = [];
    const currentYear = this.value && this.value.getYear();
    const startYear = this.startYear;
    const endYear = this.endYear;
    const previousYear = startYear - 10;
    let index = 0;
    for (let rowIndex = 0; rowIndex < MAX_ROW; rowIndex++) {
      const row = {
        dateCells: [],
        trackByIndex: rowIndex
      };
      for (let colIndex = 0; colIndex < MAX_COL; colIndex++) {
        const start = previousYear + index * 10;
        const end = previousYear + index * 10 + 9;
        const content = `${start}-${end}`;
        const cell = {
          trackByIndex: colIndex,
          value: this.activeDate.setYear(start).nativeDate,
          content,
          title: content,
          isDisabled: false,
          isSelected: currentYear >= start && currentYear <= end,
          isLowerThanStart: end < startYear,
          isBiggerThanEnd: start > endYear,
          classMap: {},
          onClick() {
          },
          onMouseEnter() {
          }
        };
        cell.classMap = this.getClassMap(cell);
        cell.onClick = () => this.chooseDecade(start);
        index++;
        row.dateCells.push(cell);
      }
      decades.push(row);
    }
    return decades;
  }
  getClassMap(cell) {
    return {
      [`${this.prefixCls}-cell`]: true,
      [`${this.prefixCls}-cell-in-view`]: !cell.isBiggerThanEnd && !cell.isLowerThanStart,
      [`${this.prefixCls}-cell-selected`]: cell.isSelected,
      [`${this.prefixCls}-cell-disabled`]: cell.isDisabled
    };
  }
  chooseDecade(year) {
    this.value = this.activeDate.setYear(year);
    this.valueChange.emit(this.value);
  }
};
_DecadeTableComponent.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275DecadeTableComponent_BaseFactory;
  return function DecadeTableComponent_Factory(t) {
    return (\u0275DecadeTableComponent_BaseFactory || (\u0275DecadeTableComponent_BaseFactory = \u0275\u0275getInheritedFactory(_DecadeTableComponent)))(t || _DecadeTableComponent);
  };
})();
_DecadeTableComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _DecadeTableComponent,
  selectors: [["decade-table"]],
  exportAs: ["decadeTable"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 5,
  vars: 1,
  consts: [["cellspacing", "0", "role", "grid", 1, "ant-picker-content"], ["role", "row", 3, "ngClass"], ["role", "row"], ["role", "columnheader"], ["role", "columnheader", 3, "title"], ["role", "gridcell", 3, "class"], ["role", "gridcell", 3, "title", "ngClass"], ["role", "gridcell"], ["role", "gridcell", 3, "click", "mouseenter", "title", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "innerHTML"]],
  template: function DecadeTableComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "table", 0);
      \u0275\u0275template(1, DecadeTableComponent_Conditional_1_Template, 5, 1, "thead");
      \u0275\u0275elementStart(2, "tbody");
      \u0275\u0275repeaterCreate(3, DecadeTableComponent_For_4_Template, 4, 2, "tr", 1, _forTrack02);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.headRow && ctx.headRow.length > 0 ? 1 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275repeater(ctx.bodyRows);
    }
  },
  dependencies: [NgClass, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var DecadeTableComponent = _DecadeTableComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DecadeTableComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "decade-table",
      exportAs: "decadeTable",
      standalone: true,
      imports: [NgIf, NgForOf, NgClass, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgSwitchDefault],
      template: `<table class="ant-picker-content" cellspacing="0" role="grid">
  @if(headRow && headRow.length > 0) {
    <thead>
      <tr role="row">
        @if(showWeek) {
          <th role="columnheader"></th>
        }
        @for(cell of headRow; track cell) {
          <th role="columnheader" title="{{ cell.title }}"> {{ cell.content }} </th>
        }
      </tr>
    </thead>
  }

  <tbody>
    @for(row of bodyRows; track row.trackByIndex) {
      <tr [ngClass]="row.classMap!" role="row">
        @if(row.weekNum) {
          <td role="gridcell" class="{{ prefixCls }}-cell-week"> {{ row.weekNum }} </td>
        }
        @for(cell of row.dateCells; track cell.trackByIndex) {
          <td
            title="{{ cell.title }}"
            role="gridcell"
            [ngClass]="cell.classMap!"
            (click)="cell.isDisabled ? null : cell.onClick()"
            (mouseenter)="cell.onMouseEnter()"
          >
            @switch (prefixCls) {
              @case('ant-picker') {
                @if(cell.isTemplateRef) {
                  <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }" />
                }@else if(cell.isNonEmptyString) {
                  <span [innerHTML]="cell.cellRender"></span>
                }@else {
                  <div
                    class="{{ prefixCls }}-cell-inner"
                    [attr.aria-selected]="cell.isSelected"
                    [attr.aria-disabled]="cell.isDisabled"
                  >
                    {{ cell.content }}
                  </div>
                }
              }
              @case('ant-picker-calendar') {
                <div
                  class="{{ prefixCls }}-date ant-picker-cell-inner"
                  [class.ant-picker-calendar-date-today]="cell.isToday"
                >
                  @if(cell.fullCellRender) {
                    <ng-container *ngTemplateOutlet="$any(cell.fullCellRender); context: { $implicit: cell.value }" />
                  }@else() {
                    <div class="{{ prefixCls }}-date-value">{{ cell.content }}</div>
                    <div class="{{ prefixCls }}-date-content">
                      <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }">
                      </ng-container>
                    </div>
                  }
                </div>
              }
            }
          </td>
        }

      </tr>
    }
  </tbody>
</table>
`
    }]
  }], null, null);
})();
var _YearHeaderComponent = class _YearHeaderComponent extends AbstractPanelHeader {
  get startYear() {
    return parseInt(`${this.value.getYear() / 10}`, 10) * 10;
  }
  get endYear() {
    return this.startYear + 9;
  }
  superPrevious() {
    this.changeValue(this.value.addYears(-10));
  }
  superNext() {
    this.changeValue(this.value.addYears(10));
  }
  getSelectors() {
    return [{
      className: `${this.prefixCls}-year-btn`,
      title: "",
      onClick: () => this.changeMode("decade"),
      label: `${this.startYear}-${this.endYear}`
    }];
  }
};
_YearHeaderComponent.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275YearHeaderComponent_BaseFactory;
  return function YearHeaderComponent_Factory(t) {
    return (\u0275YearHeaderComponent_BaseFactory || (\u0275YearHeaderComponent_BaseFactory = \u0275\u0275getInheritedFactory(_YearHeaderComponent)))(t || _YearHeaderComponent);
  };
})();
_YearHeaderComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _YearHeaderComponent,
  selectors: [["year-header"]],
  exportAs: ["yearHeader"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 12,
  vars: 30,
  consts: [["role", "button", "type", "button", "tabindex", "-1", 3, "click", "title"], [1, "ant-picker-super-prev-icon"], [1, "ant-picker-prev-icon"], ["role", "button", "type", "button", 3, "class", "title"], [1, "ant-picker-next-icon"], [1, "ant-picker-super-next-icon"], ["role", "button", "type", "button", 3, "click", "title"]],
  template: function YearHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div")(1, "button", 0);
      \u0275\u0275listener("click", function YearHeaderComponent_Template_button_click_1_listener() {
        return ctx.superPrevious();
      });
      \u0275\u0275element(2, "span", 1);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(3, "button", 0);
      \u0275\u0275listener("click", function YearHeaderComponent_Template_button_click_3_listener() {
        return ctx.previous();
      });
      \u0275\u0275element(4, "span", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "div");
      \u0275\u0275repeaterCreate(6, YearHeaderComponent_For_7_Template, 2, 5, "button", 3, \u0275\u0275repeaterTrackByIdentity);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "button", 0);
      \u0275\u0275listener("click", function YearHeaderComponent_Template_button_click_8_listener() {
        return ctx.next();
      });
      \u0275\u0275element(9, "span", 4);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(10, "button", 0);
      \u0275\u0275listener("click", function YearHeaderComponent_Template_button_click_10_listener() {
        return ctx.superNext();
      });
      \u0275\u0275element(11, "span", 5);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275classMap(ctx.prefixCls);
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superPreviousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.previousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-view");
      \u0275\u0275advance();
      \u0275\u0275repeater(ctx.selectors);
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.nextTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superNextTitle());
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var YearHeaderComponent = _YearHeaderComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(YearHeaderComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "year-header",
      exportAs: "yearHeader",
      standalone: true,
      imports: [NgForOf, NgIf, NgClass],
      template: `<div class="{{ prefixCls }}">
  <button
    [style.visibility]="showSuperPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-prev-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superPreviousTitle() }}"
    (click)="superPrevious()"
  >
    <span class="ant-picker-super-prev-icon"></span>
  </button>
  <button
    [style.visibility]="showPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-prev-btn"
    role="button"
    type="button"
    title="{{ previousTitle() }}"
    tabindex="-1"
    (click)="previous()"
  >
    <span class="ant-picker-prev-icon"></span>
  </button>

  <div class="{{ prefixCls }}-view">
    @for(selector of selectors; track selector) {
      <button
        class="{{ selector.className }}"
        role="button"
        type="button"
        title="{{ selector.title || null }}"
        (click)="selector.onClick()"
      >
        {{ selector.label }}
      </button>
    }
  </div>
  <button
    [style.visibility]="showNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ nextTitle() }}"
    (click)="next()"
  >
    <span class="ant-picker-next-icon"></span>
  </button>
  <button
    [style.visibility]="showSuperNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superNextTitle() }}"
    (click)="superNext()"
  >
    <span class="ant-picker-super-next-icon"></span>
  </button>
</div>
`
    }]
  }], null, null);
})();
var _YearTableComponent = class _YearTableComponent extends AbstractTable {
  constructor(dateHelper) {
    super();
    this.dateHelper = dateHelper;
    this.MAX_ROW = 4;
    this.MAX_COL = 3;
  }
  makeHeadRow() {
    return [];
  }
  makeBodyRows() {
    const currentYear = this.activeDate && this.activeDate.getYear();
    const startYear = parseInt(`${currentYear / 10}`, 10) * 10;
    const endYear = startYear + 9;
    const previousYear = startYear - 1;
    const years = [];
    let yearValue = 0;
    for (let rowIndex = 0; rowIndex < this.MAX_ROW; rowIndex++) {
      const row = {
        dateCells: [],
        trackByIndex: rowIndex
      };
      for (let colIndex = 0; colIndex < this.MAX_COL; colIndex++) {
        const yearNum = previousYear + yearValue;
        const year = this.activeDate.setYear(yearNum);
        const content = this.dateHelper.format(year.nativeDate, "yyyy");
        const isDisabled = this.isDisabledYear(year);
        const cell = {
          trackByIndex: colIndex,
          value: year.nativeDate,
          isDisabled,
          isSameDecade: yearNum >= startYear && yearNum <= endYear,
          isSelected: yearNum === (this.value && this.value.getYear()),
          content,
          title: content,
          classMap: {},
          isLastCellInPanel: year.getYear() === endYear,
          isFirstCellInPanel: year.getYear() === startYear,
          cellRender: valueFunctionProp(this.cellRender, year),
          // Customized content
          fullCellRender: valueFunctionProp(this.fullCellRender, year),
          onClick: () => this.chooseYear(cell.value.getFullYear()),
          // don't use yearValue here,
          onMouseEnter: () => this.cellHover.emit(year)
        };
        this.addCellProperty(cell, year);
        row.dateCells.push(cell);
        yearValue++;
      }
      years.push(row);
    }
    return years;
  }
  getClassMap(cell) {
    return __spreadProps(__spreadValues({}, super.getClassMap(cell)), {
      [`ant-picker-cell-in-view`]: !!cell.isSameDecade
    });
  }
  isDisabledYear(year) {
    if (!this.disabledDate) {
      return false;
    }
    const firstOfMonth = year.setMonth(0).setDate(1);
    for (let date = firstOfMonth; date.getYear() === year.getYear(); date = date.addDays(1)) {
      if (!this.disabledDate(date.nativeDate)) {
        return false;
      }
    }
    return true;
  }
  addCellProperty(cell, year) {
    if (this.hasRangeValue()) {
      const [startHover, endHover] = this.hoverValue;
      const [startSelected, endSelected] = this.selectedValue;
      if (startSelected?.isSameYear(year)) {
        cell.isSelectedStart = true;
        cell.isSelected = true;
      }
      if (endSelected?.isSameYear(year)) {
        cell.isSelectedEnd = true;
        cell.isSelected = true;
      }
      if (startHover && endHover) {
        cell.isHoverStart = startHover.isSameYear(year);
        cell.isHoverEnd = endHover.isSameYear(year);
        cell.isInHoverRange = startHover.isBeforeYear(year) && year.isBeforeYear(endHover);
      }
      cell.isStartSingle = startSelected && !endSelected;
      cell.isEndSingle = !startSelected && endSelected;
      cell.isInSelectedRange = startSelected?.isBeforeYear(year) && year?.isBeforeYear(endSelected);
      cell.isRangeStartNearHover = startSelected && cell.isInHoverRange;
      cell.isRangeEndNearHover = endSelected && cell.isInHoverRange;
    } else if (year.isSameYear(this.value)) {
      cell.isSelected = true;
    }
    cell.classMap = this.getClassMap(cell);
  }
  chooseYear(year) {
    this.value = this.activeDate.setYear(year);
    this.valueChange.emit(this.value);
    this.render();
  }
};
_YearTableComponent.\u0275fac = function YearTableComponent_Factory(t) {
  return new (t || _YearTableComponent)(\u0275\u0275directiveInject(DateHelperService));
};
_YearTableComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _YearTableComponent,
  selectors: [["year-table"]],
  exportAs: ["yearTable"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 5,
  vars: 1,
  consts: [["cellspacing", "0", "role", "grid", 1, "ant-picker-content"], ["role", "row", 3, "ngClass"], ["role", "row"], ["role", "columnheader"], ["role", "columnheader", 3, "title"], ["role", "gridcell", 3, "class"], ["role", "gridcell", 3, "title", "ngClass"], ["role", "gridcell"], ["role", "gridcell", 3, "click", "mouseenter", "title", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "innerHTML"]],
  template: function YearTableComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "table", 0);
      \u0275\u0275template(1, YearTableComponent_Conditional_1_Template, 5, 1, "thead");
      \u0275\u0275elementStart(2, "tbody");
      \u0275\u0275repeaterCreate(3, YearTableComponent_For_4_Template, 4, 2, "tr", 1, _forTrack02);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.headRow && ctx.headRow.length > 0 ? 1 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275repeater(ctx.bodyRows);
    }
  },
  dependencies: [NgClass, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var YearTableComponent = _YearTableComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(YearTableComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "year-table",
      exportAs: "yearTable",
      imports: [NgIf, NgForOf, NgClass, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgSwitchDefault],
      standalone: true,
      template: `<table class="ant-picker-content" cellspacing="0" role="grid">
  @if(headRow && headRow.length > 0) {
    <thead>
      <tr role="row">
        @if(showWeek) {
          <th role="columnheader"></th>
        }
        @for(cell of headRow; track cell) {
          <th role="columnheader" title="{{ cell.title }}"> {{ cell.content }} </th>
        }
      </tr>
    </thead>
  }

  <tbody>
    @for(row of bodyRows; track row.trackByIndex) {
      <tr [ngClass]="row.classMap!" role="row">
        @if(row.weekNum) {
          <td role="gridcell" class="{{ prefixCls }}-cell-week"> {{ row.weekNum }} </td>
        }
        @for(cell of row.dateCells; track cell.trackByIndex) {
          <td
            title="{{ cell.title }}"
            role="gridcell"
            [ngClass]="cell.classMap!"
            (click)="cell.isDisabled ? null : cell.onClick()"
            (mouseenter)="cell.onMouseEnter()"
          >
            @switch (prefixCls) {
              @case('ant-picker') {
                @if(cell.isTemplateRef) {
                  <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }" />
                }@else if(cell.isNonEmptyString) {
                  <span [innerHTML]="cell.cellRender"></span>
                }@else {
                  <div
                    class="{{ prefixCls }}-cell-inner"
                    [attr.aria-selected]="cell.isSelected"
                    [attr.aria-disabled]="cell.isDisabled"
                  >
                    {{ cell.content }}
                  </div>
                }
              }
              @case('ant-picker-calendar') {
                <div
                  class="{{ prefixCls }}-date ant-picker-cell-inner"
                  [class.ant-picker-calendar-date-today]="cell.isToday"
                >
                  @if(cell.fullCellRender) {
                    <ng-container *ngTemplateOutlet="$any(cell.fullCellRender); context: { $implicit: cell.value }" />
                  }@else() {
                    <div class="{{ prefixCls }}-date-value">{{ cell.content }}</div>
                    <div class="{{ prefixCls }}-date-content">
                      <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }">
                      </ng-container>
                    </div>
                  }
                </div>
              }
            }
          </td>
        }

      </tr>
    }
  </tbody>
</table>
`
    }]
  }], () => [{
    type: DateHelperService
  }], null);
})();
var _MonthHeaderComponent = class _MonthHeaderComponent extends AbstractPanelHeader {
  constructor(dateHelper) {
    super();
    this.dateHelper = dateHelper;
  }
  getSelectors() {
    return [{
      className: `${this.prefixCls}-month-btn`,
      title: this.locale.yearSelect,
      onClick: () => this.changeMode("year"),
      label: this.dateHelper.format(this.value.nativeDate, transCompatFormat(this.locale.yearFormat))
    }];
  }
};
_MonthHeaderComponent.\u0275fac = function MonthHeaderComponent_Factory(t) {
  return new (t || _MonthHeaderComponent)(\u0275\u0275directiveInject(DateHelperService));
};
_MonthHeaderComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _MonthHeaderComponent,
  selectors: [["month-header"]],
  exportAs: ["monthHeader"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 12,
  vars: 30,
  consts: [["role", "button", "type", "button", "tabindex", "-1", 3, "click", "title"], [1, "ant-picker-super-prev-icon"], [1, "ant-picker-prev-icon"], ["role", "button", "type", "button", 3, "class", "title"], [1, "ant-picker-next-icon"], [1, "ant-picker-super-next-icon"], ["role", "button", "type", "button", 3, "click", "title"]],
  template: function MonthHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div")(1, "button", 0);
      \u0275\u0275listener("click", function MonthHeaderComponent_Template_button_click_1_listener() {
        return ctx.superPrevious();
      });
      \u0275\u0275element(2, "span", 1);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(3, "button", 0);
      \u0275\u0275listener("click", function MonthHeaderComponent_Template_button_click_3_listener() {
        return ctx.previous();
      });
      \u0275\u0275element(4, "span", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "div");
      \u0275\u0275repeaterCreate(6, MonthHeaderComponent_For_7_Template, 2, 5, "button", 3, \u0275\u0275repeaterTrackByIdentity);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "button", 0);
      \u0275\u0275listener("click", function MonthHeaderComponent_Template_button_click_8_listener() {
        return ctx.next();
      });
      \u0275\u0275element(9, "span", 4);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(10, "button", 0);
      \u0275\u0275listener("click", function MonthHeaderComponent_Template_button_click_10_listener() {
        return ctx.superNext();
      });
      \u0275\u0275element(11, "span", 5);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275classMap(ctx.prefixCls);
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superPreviousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.previousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-view");
      \u0275\u0275advance();
      \u0275\u0275repeater(ctx.selectors);
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.nextTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superNextTitle());
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var MonthHeaderComponent = _MonthHeaderComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MonthHeaderComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "month-header",
      exportAs: "monthHeader",
      standalone: true,
      imports: [NgForOf, NgIf, NgClass],
      template: `<div class="{{ prefixCls }}">
  <button
    [style.visibility]="showSuperPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-prev-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superPreviousTitle() }}"
    (click)="superPrevious()"
  >
    <span class="ant-picker-super-prev-icon"></span>
  </button>
  <button
    [style.visibility]="showPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-prev-btn"
    role="button"
    type="button"
    title="{{ previousTitle() }}"
    tabindex="-1"
    (click)="previous()"
  >
    <span class="ant-picker-prev-icon"></span>
  </button>

  <div class="{{ prefixCls }}-view">
    @for(selector of selectors; track selector) {
      <button
        class="{{ selector.className }}"
        role="button"
        type="button"
        title="{{ selector.title || null }}"
        (click)="selector.onClick()"
      >
        {{ selector.label }}
      </button>
    }
  </div>
  <button
    [style.visibility]="showNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ nextTitle() }}"
    (click)="next()"
  >
    <span class="ant-picker-next-icon"></span>
  </button>
  <button
    [style.visibility]="showSuperNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superNextTitle() }}"
    (click)="superNext()"
  >
    <span class="ant-picker-super-next-icon"></span>
  </button>
</div>
`
    }]
  }], () => [{
    type: DateHelperService
  }], null);
})();
var _MonthTableComponent = class _MonthTableComponent extends AbstractTable {
  constructor(dateHelper) {
    super();
    this.dateHelper = dateHelper;
    this.MAX_ROW = 4;
    this.MAX_COL = 3;
  }
  makeHeadRow() {
    return [];
  }
  makeBodyRows() {
    const months = [];
    let monthValue = 0;
    for (let rowIndex = 0; rowIndex < this.MAX_ROW; rowIndex++) {
      const row = {
        dateCells: [],
        trackByIndex: rowIndex
      };
      for (let colIndex = 0; colIndex < this.MAX_COL; colIndex++) {
        const month = this.activeDate.setMonth(monthValue);
        const isDisabled = this.isDisabledMonth(month);
        const content = this.dateHelper.format(month.nativeDate, "MMM");
        const cell = {
          trackByIndex: colIndex,
          value: month.nativeDate,
          isDisabled,
          isSelected: month.isSameMonth(this.value),
          content,
          title: content,
          classMap: {},
          cellRender: valueFunctionProp(this.cellRender, month),
          // Customized content
          fullCellRender: valueFunctionProp(this.fullCellRender, month),
          onClick: () => this.chooseMonth(cell.value.getMonth()),
          // don't use monthValue here,
          onMouseEnter: () => this.cellHover.emit(month)
        };
        this.addCellProperty(cell, month);
        row.dateCells.push(cell);
        monthValue++;
      }
      months.push(row);
    }
    return months;
  }
  isDisabledMonth(month) {
    if (!this.disabledDate) {
      return false;
    }
    const firstOfMonth = month.setDate(1);
    for (let date = firstOfMonth; date.getMonth() === month.getMonth(); date = date.addDays(1)) {
      if (!this.disabledDate(date.nativeDate)) {
        return false;
      }
    }
    return true;
  }
  addCellProperty(cell, month) {
    if (this.hasRangeValue()) {
      const [startHover, endHover] = this.hoverValue;
      const [startSelected, endSelected] = this.selectedValue;
      if (startSelected?.isSameMonth(month)) {
        cell.isSelectedStart = true;
        cell.isSelected = true;
      }
      if (endSelected?.isSameMonth(month)) {
        cell.isSelectedEnd = true;
        cell.isSelected = true;
      }
      if (startHover && endHover) {
        cell.isHoverStart = startHover.isSameMonth(month);
        cell.isHoverEnd = endHover.isSameMonth(month);
        cell.isLastCellInPanel = month.getMonth() === 11;
        cell.isFirstCellInPanel = month.getMonth() === 0;
        cell.isInHoverRange = startHover.isBeforeMonth(month) && month.isBeforeMonth(endHover);
      }
      cell.isStartSingle = startSelected && !endSelected;
      cell.isEndSingle = !startSelected && endSelected;
      cell.isInSelectedRange = startSelected?.isBeforeMonth(month) && month?.isBeforeMonth(endSelected);
      cell.isRangeStartNearHover = startSelected && cell.isInHoverRange;
      cell.isRangeEndNearHover = endSelected && cell.isInHoverRange;
    } else if (month.isSameMonth(this.value)) {
      cell.isSelected = true;
    }
    cell.classMap = this.getClassMap(cell);
  }
  chooseMonth(month) {
    this.value = this.activeDate.setMonth(month);
    this.valueChange.emit(this.value);
  }
};
_MonthTableComponent.\u0275fac = function MonthTableComponent_Factory(t) {
  return new (t || _MonthTableComponent)(\u0275\u0275directiveInject(DateHelperService));
};
_MonthTableComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _MonthTableComponent,
  selectors: [["month-table"]],
  exportAs: ["monthTable"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 5,
  vars: 1,
  consts: [["cellspacing", "0", "role", "grid", 1, "ant-picker-content"], ["role", "row", 3, "ngClass"], ["role", "row"], ["role", "columnheader"], ["role", "columnheader", 3, "title"], ["role", "gridcell", 3, "class"], ["role", "gridcell", 3, "title", "ngClass"], ["role", "gridcell"], ["role", "gridcell", 3, "click", "mouseenter", "title", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "innerHTML"]],
  template: function MonthTableComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "table", 0);
      \u0275\u0275template(1, MonthTableComponent_Conditional_1_Template, 5, 1, "thead");
      \u0275\u0275elementStart(2, "tbody");
      \u0275\u0275repeaterCreate(3, MonthTableComponent_For_4_Template, 4, 2, "tr", 1, _forTrack02);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.headRow && ctx.headRow.length > 0 ? 1 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275repeater(ctx.bodyRows);
    }
  },
  dependencies: [NgClass, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var MonthTableComponent = _MonthTableComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MonthTableComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "month-table",
      exportAs: "monthTable",
      standalone: true,
      imports: [NgIf, NgForOf, NgClass, NgSwitch, NgSwitchCase, NgTemplateOutlet, NgSwitchDefault],
      template: `<table class="ant-picker-content" cellspacing="0" role="grid">
  @if(headRow && headRow.length > 0) {
    <thead>
      <tr role="row">
        @if(showWeek) {
          <th role="columnheader"></th>
        }
        @for(cell of headRow; track cell) {
          <th role="columnheader" title="{{ cell.title }}"> {{ cell.content }} </th>
        }
      </tr>
    </thead>
  }

  <tbody>
    @for(row of bodyRows; track row.trackByIndex) {
      <tr [ngClass]="row.classMap!" role="row">
        @if(row.weekNum) {
          <td role="gridcell" class="{{ prefixCls }}-cell-week"> {{ row.weekNum }} </td>
        }
        @for(cell of row.dateCells; track cell.trackByIndex) {
          <td
            title="{{ cell.title }}"
            role="gridcell"
            [ngClass]="cell.classMap!"
            (click)="cell.isDisabled ? null : cell.onClick()"
            (mouseenter)="cell.onMouseEnter()"
          >
            @switch (prefixCls) {
              @case('ant-picker') {
                @if(cell.isTemplateRef) {
                  <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }" />
                }@else if(cell.isNonEmptyString) {
                  <span [innerHTML]="cell.cellRender"></span>
                }@else {
                  <div
                    class="{{ prefixCls }}-cell-inner"
                    [attr.aria-selected]="cell.isSelected"
                    [attr.aria-disabled]="cell.isDisabled"
                  >
                    {{ cell.content }}
                  </div>
                }
              }
              @case('ant-picker-calendar') {
                <div
                  class="{{ prefixCls }}-date ant-picker-cell-inner"
                  [class.ant-picker-calendar-date-today]="cell.isToday"
                >
                  @if(cell.fullCellRender) {
                    <ng-container *ngTemplateOutlet="$any(cell.fullCellRender); context: { $implicit: cell.value }" />
                  }@else() {
                    <div class="{{ prefixCls }}-date-value">{{ cell.content }}</div>
                    <div class="{{ prefixCls }}-date-content">
                      <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }">
                      </ng-container>
                    </div>
                  }
                </div>
              }
            }
          </td>
        }

      </tr>
    }
  </tbody>
</table>
`
    }]
  }], () => [{
    type: DateHelperService
  }], null);
})();
var _DateHeaderComponent = class _DateHeaderComponent extends AbstractPanelHeader {
  constructor(dateHelper) {
    super();
    this.dateHelper = dateHelper;
  }
  getSelectors() {
    return [{
      className: `${this.prefixCls}-year-btn`,
      title: this.locale.yearSelect,
      onClick: () => this.changeMode("year"),
      label: this.dateHelper.format(this.value.nativeDate, transCompatFormat(this.locale.yearFormat))
    }, {
      className: `${this.prefixCls}-month-btn`,
      title: this.locale.monthSelect,
      onClick: () => this.changeMode("month"),
      label: this.dateHelper.format(this.value.nativeDate, this.locale.monthFormat || "MMM")
    }];
  }
};
_DateHeaderComponent.\u0275fac = function DateHeaderComponent_Factory(t) {
  return new (t || _DateHeaderComponent)(\u0275\u0275directiveInject(DateHelperService));
};
_DateHeaderComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _DateHeaderComponent,
  selectors: [["date-header"]],
  exportAs: ["dateHeader"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 12,
  vars: 30,
  consts: [["role", "button", "type", "button", "tabindex", "-1", 3, "click", "title"], [1, "ant-picker-super-prev-icon"], [1, "ant-picker-prev-icon"], ["role", "button", "type", "button", 3, "class", "title"], [1, "ant-picker-next-icon"], [1, "ant-picker-super-next-icon"], ["role", "button", "type", "button", 3, "click", "title"]],
  template: function DateHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div")(1, "button", 0);
      \u0275\u0275listener("click", function DateHeaderComponent_Template_button_click_1_listener() {
        return ctx.superPrevious();
      });
      \u0275\u0275element(2, "span", 1);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(3, "button", 0);
      \u0275\u0275listener("click", function DateHeaderComponent_Template_button_click_3_listener() {
        return ctx.previous();
      });
      \u0275\u0275element(4, "span", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(5, "div");
      \u0275\u0275repeaterCreate(6, DateHeaderComponent_For_7_Template, 2, 5, "button", 3, \u0275\u0275repeaterTrackByIdentity);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(8, "button", 0);
      \u0275\u0275listener("click", function DateHeaderComponent_Template_button_click_8_listener() {
        return ctx.next();
      });
      \u0275\u0275element(9, "span", 4);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(10, "button", 0);
      \u0275\u0275listener("click", function DateHeaderComponent_Template_button_click_10_listener() {
        return ctx.superNext();
      });
      \u0275\u0275element(11, "span", 5);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275classMap(ctx.prefixCls);
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superPreviousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-prev-btn");
      \u0275\u0275styleProp("visibility", ctx.showPreBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.previousTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-view");
      \u0275\u0275advance();
      \u0275\u0275repeater(ctx.selectors);
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.nextTitle());
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("", ctx.prefixCls, "-super-next-btn");
      \u0275\u0275styleProp("visibility", ctx.showSuperNextBtn ? "visible" : "hidden");
      \u0275\u0275propertyInterpolate("title", ctx.superNextTitle());
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var DateHeaderComponent = _DateHeaderComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateHeaderComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "date-header",
      exportAs: "dateHeader",
      standalone: true,
      imports: [NgForOf, NgIf, NgClass],
      template: `<div class="{{ prefixCls }}">
  <button
    [style.visibility]="showSuperPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-prev-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superPreviousTitle() }}"
    (click)="superPrevious()"
  >
    <span class="ant-picker-super-prev-icon"></span>
  </button>
  <button
    [style.visibility]="showPreBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-prev-btn"
    role="button"
    type="button"
    title="{{ previousTitle() }}"
    tabindex="-1"
    (click)="previous()"
  >
    <span class="ant-picker-prev-icon"></span>
  </button>

  <div class="{{ prefixCls }}-view">
    @for(selector of selectors; track selector) {
      <button
        class="{{ selector.className }}"
        role="button"
        type="button"
        title="{{ selector.title || null }}"
        (click)="selector.onClick()"
      >
        {{ selector.label }}
      </button>
    }
  </div>
  <button
    [style.visibility]="showNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ nextTitle() }}"
    (click)="next()"
  >
    <span class="ant-picker-next-icon"></span>
  </button>
  <button
    [style.visibility]="showSuperNextBtn ? 'visible' : 'hidden'"
    class="{{ prefixCls }}-super-next-btn"
    role="button"
    type="button"
    tabindex="-1"
    title="{{ superNextTitle() }}"
    (click)="superNext()"
  >
    <span class="ant-picker-super-next-icon"></span>
  </button>
</div>
`
    }]
  }], () => [{
    type: DateHelperService
  }], null);
})();
var _DateTableComponent = class _DateTableComponent extends AbstractTable {
  constructor(i18n, dateHelper) {
    super();
    this.i18n = i18n;
    this.dateHelper = dateHelper;
  }
  changeValueFromInside(value) {
    this.activeDate = this.activeDate.setYear(value.getYear()).setMonth(value.getMonth()).setDate(value.getDate());
    this.valueChange.emit(this.activeDate);
    if (!this.activeDate.isSameMonth(this.value)) {
      this.render();
    }
  }
  makeHeadRow() {
    const weekDays = [];
    const start = this.activeDate.calendarStart({
      weekStartsOn: this.dateHelper.getFirstDayOfWeek()
    });
    for (let colIndex = 0; colIndex < this.MAX_COL; colIndex++) {
      const day = start.addDays(colIndex);
      weekDays.push({
        trackByIndex: null,
        value: day.nativeDate,
        title: this.dateHelper.format(day.nativeDate, "E"),
        // eg. Tue
        content: this.dateHelper.format(day.nativeDate, this.getVeryShortWeekFormat()),
        // eg. Tu,
        isSelected: false,
        isDisabled: false,
        onClick() {
        },
        onMouseEnter() {
        }
      });
    }
    return weekDays;
  }
  getVeryShortWeekFormat() {
    return this.i18n.getLocaleId().toLowerCase().indexOf("zh") === 0 ? "EEEEE" : "EEEEEE";
  }
  makeBodyRows() {
    const weekRows = [];
    const firstDayOfMonth = this.activeDate.calendarStart({
      weekStartsOn: this.dateHelper.getFirstDayOfWeek()
    });
    for (let week = 0; week < this.MAX_ROW; week++) {
      const weekStart = firstDayOfMonth.addDays(week * 7);
      const row = {
        isActive: false,
        dateCells: [],
        trackByIndex: week
      };
      for (let day = 0; day < 7; day++) {
        const date = weekStart.addDays(day);
        const dateFormat = transCompatFormat(this.i18n.getLocaleData("DatePicker.lang.dateFormat", "YYYY-MM-DD"));
        const title = this.dateHelper.format(date.nativeDate, dateFormat);
        const label = this.dateHelper.format(date.nativeDate, "dd");
        const cell = {
          trackByIndex: day,
          value: date.nativeDate,
          label,
          isSelected: false,
          isDisabled: false,
          isToday: false,
          title,
          cellRender: valueFunctionProp(this.cellRender, date),
          // Customized content
          fullCellRender: valueFunctionProp(this.fullCellRender, date),
          content: `${date.getDate()}`,
          onClick: () => this.changeValueFromInside(date),
          onMouseEnter: () => this.cellHover.emit(date)
        };
        this.addCellProperty(cell, date);
        if (this.showWeek && !row.weekNum) {
          row.weekNum = this.dateHelper.getISOWeek(date.nativeDate);
        }
        if (date.isSameDay(this.value)) {
          row.isActive = date.isSameDay(this.value);
        }
        row.dateCells.push(cell);
      }
      row.classMap = {
        [`ant-picker-week-panel-row`]: this.canSelectWeek,
        [`ant-picker-week-panel-row-selected`]: this.canSelectWeek && row.isActive
      };
      weekRows.push(row);
    }
    return weekRows;
  }
  addCellProperty(cell, date) {
    cell.isTemplateRef = isTemplateRef(cell.cellRender);
    cell.isNonEmptyString = isNonEmptyString(cell.cellRender);
    if (this.hasRangeValue() && !this.canSelectWeek) {
      const [startHover, endHover] = this.hoverValue;
      const [startSelected, endSelected] = this.selectedValue;
      if (startSelected?.isSameDay(date)) {
        cell.isSelectedStart = true;
        cell.isSelected = true;
      }
      if (endSelected?.isSameDay(date)) {
        cell.isSelectedEnd = true;
        cell.isSelected = true;
      }
      if (startHover && endHover) {
        cell.isHoverStart = startHover.isSameDay(date);
        cell.isHoverEnd = endHover.isSameDay(date);
        cell.isLastCellInPanel = date.isLastDayOfMonth();
        cell.isFirstCellInPanel = date.isFirstDayOfMonth();
        cell.isInHoverRange = startHover.isBeforeDay(date) && date.isBeforeDay(endHover);
      }
      cell.isStartSingle = startSelected && !endSelected;
      cell.isEndSingle = !startSelected && endSelected;
      cell.isInSelectedRange = startSelected?.isBeforeDay(date) && date.isBeforeDay(endSelected);
      cell.isRangeStartNearHover = startSelected && cell.isInHoverRange;
      cell.isRangeEndNearHover = endSelected && cell.isInHoverRange;
    }
    cell.isToday = date.isToday();
    cell.isSelected = date.isSameDay(this.value);
    cell.isDisabled = !!this.disabledDate?.(date.nativeDate);
    cell.classMap = this.getClassMap(cell);
  }
  getClassMap(cell) {
    const date = new CandyDate(cell.value);
    return __spreadProps(__spreadValues({}, super.getClassMap(cell)), {
      [`ant-picker-cell-today`]: !!cell.isToday,
      [`ant-picker-cell-in-view`]: date.isSameMonth(this.activeDate)
    });
  }
};
_DateTableComponent.\u0275fac = function DateTableComponent_Factory(t) {
  return new (t || _DateTableComponent)(\u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(DateHelperService));
};
_DateTableComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _DateTableComponent,
  selectors: [["date-table"]],
  inputs: {
    locale: "locale"
  },
  exportAs: ["dateTable"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 5,
  vars: 1,
  consts: [["cellspacing", "0", "role", "grid", 1, "ant-picker-content"], ["role", "row", 3, "ngClass"], ["role", "row"], ["role", "columnheader"], ["role", "columnheader", 3, "title"], ["role", "gridcell", 3, "class"], ["role", "gridcell", 3, "title", "ngClass"], ["role", "gridcell"], ["role", "gridcell", 3, "click", "mouseenter", "title", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "innerHTML"]],
  template: function DateTableComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "table", 0);
      \u0275\u0275template(1, DateTableComponent_Conditional_1_Template, 5, 1, "thead");
      \u0275\u0275elementStart(2, "tbody");
      \u0275\u0275repeaterCreate(3, DateTableComponent_For_4_Template, 4, 2, "tr", 1, _forTrack02);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.headRow && ctx.headRow.length > 0 ? 1 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275repeater(ctx.bodyRows);
    }
  },
  dependencies: [NgClass, NgTemplateOutlet],
  encapsulation: 2,
  changeDetection: 0
});
var DateTableComponent = _DateTableComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateTableComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "date-table",
      exportAs: "dateTable",
      standalone: true,
      imports: [NgClass, NgSwitch, NgTemplateOutlet],
      template: `<table class="ant-picker-content" cellspacing="0" role="grid">
  @if(headRow && headRow.length > 0) {
    <thead>
      <tr role="row">
        @if(showWeek) {
          <th role="columnheader"></th>
        }
        @for(cell of headRow; track cell) {
          <th role="columnheader" title="{{ cell.title }}"> {{ cell.content }} </th>
        }
      </tr>
    </thead>
  }

  <tbody>
    @for(row of bodyRows; track row.trackByIndex) {
      <tr [ngClass]="row.classMap!" role="row">
        @if(row.weekNum) {
          <td role="gridcell" class="{{ prefixCls }}-cell-week"> {{ row.weekNum }} </td>
        }
        @for(cell of row.dateCells; track cell.trackByIndex) {
          <td
            title="{{ cell.title }}"
            role="gridcell"
            [ngClass]="cell.classMap!"
            (click)="cell.isDisabled ? null : cell.onClick()"
            (mouseenter)="cell.onMouseEnter()"
          >
            @switch (prefixCls) {
              @case('ant-picker') {
                @if(cell.isTemplateRef) {
                  <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }" />
                }@else if(cell.isNonEmptyString) {
                  <span [innerHTML]="cell.cellRender"></span>
                }@else {
                  <div
                    class="{{ prefixCls }}-cell-inner"
                    [attr.aria-selected]="cell.isSelected"
                    [attr.aria-disabled]="cell.isDisabled"
                  >
                    {{ cell.content }}
                  </div>
                }
              }
              @case('ant-picker-calendar') {
                <div
                  class="{{ prefixCls }}-date ant-picker-cell-inner"
                  [class.ant-picker-calendar-date-today]="cell.isToday"
                >
                  @if(cell.fullCellRender) {
                    <ng-container *ngTemplateOutlet="$any(cell.fullCellRender); context: { $implicit: cell.value }" />
                  }@else() {
                    <div class="{{ prefixCls }}-date-value">{{ cell.content }}</div>
                    <div class="{{ prefixCls }}-date-content">
                      <ng-container *ngTemplateOutlet="$any(cell.cellRender); context: { $implicit: cell.value }">
                      </ng-container>
                    </div>
                  }
                </div>
              }
            }
          </td>
        }

      </tr>
    }
  </tbody>
</table>
`
    }]
  }], () => [{
    type: NzI18nService
  }, {
    type: DateHelperService
  }], {
    locale: [{
      type: Input
    }]
  });
})();
var _LibPackerModule = class _LibPackerModule {
};
_LibPackerModule.\u0275fac = function LibPackerModule_Factory(t) {
  return new (t || _LibPackerModule)();
};
_LibPackerModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _LibPackerModule
});
_LibPackerModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var LibPackerModule = _LibPackerModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LibPackerModule, [{
    type: NgModule,
    args: [{
      imports: [DateHeaderComponent, DateTableComponent, DecadeHeaderComponent, DecadeTableComponent, MonthHeaderComponent, MonthTableComponent, YearHeaderComponent, YearTableComponent],
      exports: [DateHeaderComponent, DateTableComponent, DecadeHeaderComponent, DecadeTableComponent, MonthHeaderComponent, MonthTableComponent, YearHeaderComponent, YearTableComponent]
    }]
  }], null, null);
})();
var _InnerPopupComponent = class _InnerPopupComponent {
  constructor() {
    this.panelModeChange = new EventEmitter();
    this.headerChange = new EventEmitter();
    this.selectDate = new EventEmitter();
    this.selectTime = new EventEmitter();
    this.cellHover = new EventEmitter();
    this.prefixCls = PREFIX_CLASS;
  }
  /**
   * Hide "next" arrow in left panel,
   * hide "prev" arrow in right panel
   *
   * @param direction
   * @param panelMode
   */
  enablePrevNext(direction, panelMode) {
    return !(!this.showTimePicker && panelMode === this.endPanelMode && (this.partType === "left" && direction === "next" || this.partType === "right" && direction === "prev"));
  }
  onSelectTime(date) {
    this.selectTime.emit(new CandyDate(date));
  }
  // The value real changed to outside
  onSelectDate(date) {
    const value = date instanceof CandyDate ? date : new CandyDate(date);
    const timeValue = this.timeOptions && this.timeOptions.nzDefaultOpenValue;
    if (!this.value && timeValue) {
      value.setHms(timeValue.getHours(), timeValue.getMinutes(), timeValue.getSeconds());
    }
    this.selectDate.emit(value);
  }
  onChooseMonth(value) {
    this.activeDate = this.activeDate.setMonth(value.getMonth());
    if (this.endPanelMode === "month") {
      this.value = value;
      this.selectDate.emit(value);
    } else {
      this.headerChange.emit(value);
      this.panelModeChange.emit(this.endPanelMode);
    }
  }
  onChooseYear(value) {
    this.activeDate = this.activeDate.setYear(value.getYear());
    if (this.endPanelMode === "year") {
      this.value = value;
      this.selectDate.emit(value);
    } else {
      this.headerChange.emit(value);
      this.panelModeChange.emit(this.endPanelMode);
    }
  }
  onChooseDecade(value) {
    this.activeDate = this.activeDate.setYear(value.getYear());
    if (this.endPanelMode === "decade") {
      this.value = value;
      this.selectDate.emit(value);
    } else {
      this.headerChange.emit(value);
      this.panelModeChange.emit("year");
    }
  }
  ngOnChanges(changes) {
    if (changes.activeDate && !changes.activeDate.currentValue) {
      this.activeDate = new CandyDate();
    }
    if (changes.panelMode && changes.panelMode.currentValue === "time") {
      this.panelMode = "date";
    }
  }
};
_InnerPopupComponent.\u0275fac = function InnerPopupComponent_Factory(t) {
  return new (t || _InnerPopupComponent)();
};
_InnerPopupComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _InnerPopupComponent,
  selectors: [["inner-popup"]],
  inputs: {
    activeDate: "activeDate",
    endPanelMode: "endPanelMode",
    panelMode: "panelMode",
    showWeek: "showWeek",
    locale: "locale",
    showTimePicker: "showTimePicker",
    timeOptions: "timeOptions",
    disabledDate: "disabledDate",
    dateRender: "dateRender",
    selectedValue: "selectedValue",
    hoverValue: "hoverValue",
    value: "value",
    partType: "partType"
  },
  outputs: {
    panelModeChange: "panelModeChange",
    headerChange: "headerChange",
    selectDate: "selectDate",
    selectTime: "selectTime",
    cellHover: "cellHover"
  },
  exportAs: ["innerPopup"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 7,
  vars: 8,
  consts: [[3, "nzInDatePicker", "ngModel", "format", "nzHourStep", "nzMinuteStep", "nzSecondStep", "nzDisabledHours", "nzDisabledMinutes", "nzDisabledSeconds", "nzHideDisabledOptions", "nzDefaultOpenValue", "nzUse12Hours", "nzAddOn"], [3, "valueChange", "panelModeChange", "value", "locale", "showSuperPreBtn", "showSuperNextBtn", "showNextBtn", "showPreBtn"], [3, "valueChange", "activeDate", "value", "locale", "disabledDate"], [3, "valueChange", "cellHover", "activeDate", "value", "locale", "disabledDate", "selectedValue", "hoverValue"], [3, "valueChange", "cellHover", "value", "activeDate", "locale", "disabledDate", "selectedValue", "hoverValue"], [3, "valueChange", "panelModeChange", "value", "locale", "showSuperPreBtn", "showSuperNextBtn", "showPreBtn", "showNextBtn"], [3, "valueChange", "cellHover", "locale", "showWeek", "value", "activeDate", "disabledDate", "cellRender", "selectedValue", "hoverValue", "canSelectWeek"], [3, "ngModelChange", "nzInDatePicker", "ngModel", "format", "nzHourStep", "nzMinuteStep", "nzSecondStep", "nzDisabledHours", "nzDisabledMinutes", "nzDisabledSeconds", "nzHideDisabledOptions", "nzDefaultOpenValue", "nzUse12Hours", "nzAddOn"]],
  template: function InnerPopupComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div")(1, "div");
      \u0275\u0275template(2, InnerPopupComponent_Case_2_Template, 3, 13)(3, InnerPopupComponent_Case_3_Template, 3, 15)(4, InnerPopupComponent_Case_4_Template, 3, 15)(5, InnerPopupComponent_Case_5_Template, 3, 18);
      \u0275\u0275elementEnd();
      \u0275\u0275template(6, InnerPopupComponent_Conditional_6_Template, 1, 13, "nz-time-picker-panel", 0);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      let tmp_2_0;
      \u0275\u0275classProp("ant-picker-datetime-panel", ctx.showTimePicker);
      \u0275\u0275advance();
      \u0275\u0275classMapInterpolate2("", ctx.prefixCls, "-", ctx.panelMode, "-panel");
      \u0275\u0275advance();
      \u0275\u0275conditional(2, (tmp_2_0 = ctx.panelMode) === "decade" ? 2 : tmp_2_0 === "year" ? 3 : tmp_2_0 === "month" ? 4 : 5);
      \u0275\u0275advance(4);
      \u0275\u0275conditional(6, ctx.showTimePicker && ctx.timeOptions ? 6 : -1);
    }
  },
  dependencies: [LibPackerModule, DateHeaderComponent, DateTableComponent, DecadeHeaderComponent, DecadeTableComponent, MonthHeaderComponent, MonthTableComponent, YearHeaderComponent, YearTableComponent, NzTimePickerModule, NzTimePickerPanelComponent, FormsModule, NgControlStatus, NgModel],
  encapsulation: 2,
  changeDetection: 0
});
var InnerPopupComponent = _InnerPopupComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InnerPopupComponent, [{
    type: Component,
    args: [{
      // eslint-disable-next-line @angular-eslint/component-selector
      selector: "inner-popup",
      exportAs: "innerPopup",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `
    <div [class.ant-picker-datetime-panel]="showTimePicker">
      <div class="{{ prefixCls }}-{{ panelMode }}-panel">
        @switch (panelMode) {
          @case ('decade') {
            <decade-header
              [(value)]="activeDate"
              [locale]="locale"
              [showSuperPreBtn]="enablePrevNext('prev', 'decade')"
              [showSuperNextBtn]="enablePrevNext('next', 'decade')"
              [showNextBtn]="false"
              [showPreBtn]="false"
              (panelModeChange)="panelModeChange.emit($event)"
              (valueChange)="headerChange.emit($event)"
            />
            <div class="{{ prefixCls }}-body">
              <decade-table
                [activeDate]="activeDate"
                [value]="value"
                [locale]="locale"
                (valueChange)="onChooseDecade($event)"
                [disabledDate]="disabledDate"
              />
            </div>
          }
          @case ('year') {
            <year-header
              [(value)]="activeDate"
              [locale]="locale"
              [showSuperPreBtn]="enablePrevNext('prev', 'year')"
              [showSuperNextBtn]="enablePrevNext('next', 'year')"
              [showNextBtn]="false"
              [showPreBtn]="false"
              (panelModeChange)="panelModeChange.emit($event)"
              (valueChange)="headerChange.emit($event)"
            />
            <div class="{{ prefixCls }}-body">
              <year-table
                [activeDate]="activeDate"
                [value]="value"
                [locale]="locale"
                [disabledDate]="disabledDate"
                [selectedValue]="selectedValue"
                [hoverValue]="hoverValue"
                (valueChange)="onChooseYear($event)"
                (cellHover)="cellHover.emit($event)"
              />
            </div>
          }
          @case ('month') {
            <month-header
              [(value)]="activeDate"
              [locale]="locale"
              [showSuperPreBtn]="enablePrevNext('prev', 'month')"
              [showSuperNextBtn]="enablePrevNext('next', 'month')"
              [showNextBtn]="false"
              [showPreBtn]="false"
              (panelModeChange)="panelModeChange.emit($event)"
              (valueChange)="headerChange.emit($event)"
            />
            <div class="{{ prefixCls }}-body">
              <month-table
                [value]="value"
                [activeDate]="activeDate"
                [locale]="locale"
                [disabledDate]="disabledDate"
                [selectedValue]="selectedValue"
                [hoverValue]="hoverValue"
                (valueChange)="onChooseMonth($event)"
                (cellHover)="cellHover.emit($event)"
              />
            </div>
          }
          @default {
            <date-header
              [(value)]="activeDate"
              [locale]="locale"
              [showSuperPreBtn]="panelMode === 'week' ? enablePrevNext('prev', 'week') : enablePrevNext('prev', 'date')"
              [showSuperNextBtn]="
                panelMode === 'week' ? enablePrevNext('next', 'week') : enablePrevNext('next', 'date')
              "
              [showPreBtn]="panelMode === 'week' ? enablePrevNext('prev', 'week') : enablePrevNext('prev', 'date')"
              [showNextBtn]="panelMode === 'week' ? enablePrevNext('next', 'week') : enablePrevNext('next', 'date')"
              (panelModeChange)="panelModeChange.emit($event)"
              (valueChange)="headerChange.emit($event)"
            />
            <div class="{{ prefixCls }}-body">
              <date-table
                [locale]="locale"
                [showWeek]="showWeek"
                [value]="value"
                [activeDate]="activeDate"
                [disabledDate]="disabledDate"
                [cellRender]="dateRender"
                [selectedValue]="selectedValue"
                [hoverValue]="hoverValue"
                [canSelectWeek]="panelMode === 'week'"
                (valueChange)="onSelectDate($event)"
                (cellHover)="cellHover.emit($event)"
              />
            </div>
          }
        }
      </div>
      @if (showTimePicker && timeOptions) {
        <nz-time-picker-panel
          [nzInDatePicker]="true"
          [ngModel]="value?.nativeDate"
          (ngModelChange)="onSelectTime($event)"
          [format]="$any(timeOptions.nzFormat)"
          [nzHourStep]="$any(timeOptions.nzHourStep)"
          [nzMinuteStep]="$any(timeOptions.nzMinuteStep)"
          [nzSecondStep]="$any(timeOptions.nzSecondStep)"
          [nzDisabledHours]="$any(timeOptions.nzDisabledHours)"
          [nzDisabledMinutes]="$any(timeOptions.nzDisabledMinutes)"
          [nzDisabledSeconds]="$any(timeOptions.nzDisabledSeconds)"
          [nzHideDisabledOptions]="!!timeOptions.nzHideDisabledOptions"
          [nzDefaultOpenValue]="$any(timeOptions.nzDefaultOpenValue)"
          [nzUse12Hours]="!!timeOptions.nzUse12Hours"
          [nzAddOn]="$any(timeOptions.nzAddOn)"
        />
      }
    </div>
  `,
      imports: [LibPackerModule, NzTimePickerModule, FormsModule],
      standalone: true
    }]
  }], null, {
    activeDate: [{
      type: Input
    }],
    endPanelMode: [{
      type: Input
    }],
    panelMode: [{
      type: Input
    }],
    showWeek: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    showTimePicker: [{
      type: Input
    }],
    timeOptions: [{
      type: Input
    }],
    disabledDate: [{
      type: Input
    }],
    dateRender: [{
      type: Input
    }],
    selectedValue: [{
      type: Input
    }],
    hoverValue: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    partType: [{
      type: Input
    }],
    panelModeChange: [{
      type: Output
    }],
    headerChange: [{
      type: Output
    }],
    selectDate: [{
      type: Output
    }],
    selectTime: [{
      type: Output
    }],
    cellHover: [{
      type: Output
    }]
  });
})();
var _DateRangePopupComponent = class _DateRangePopupComponent {
  get hasTimePicker() {
    return !!this.showTime;
  }
  get hasFooter() {
    return this.showToday || this.hasTimePicker || !!this.extraFooter || !!this.ranges;
  }
  get arrowPosition() {
    return this.dir === "rtl" ? {
      right: `${this.datePickerService?.arrowLeft}px`
    } : {
      left: `${this.datePickerService?.arrowLeft}px`
    };
  }
  constructor(datePickerService, cdr, ngZone, host) {
    this.datePickerService = datePickerService;
    this.cdr = cdr;
    this.ngZone = ngZone;
    this.host = host;
    this.inline = false;
    this.dir = "ltr";
    this.panelModeChange = new EventEmitter();
    this.calendarChange = new EventEmitter();
    this.resultOk = new EventEmitter();
    this.prefixCls = PREFIX_CLASS;
    this.endPanelMode = "date";
    this.timeOptions = null;
    this.hoverValue = [];
    this.checkedPartArr = [false, false];
    this.destroy$ = new Subject();
    this.disabledStartTime = (value) => this.disabledTime && this.disabledTime(value, "start");
    this.disabledEndTime = (value) => this.disabledTime && this.disabledTime(value, "end");
  }
  ngOnInit() {
    merge(this.datePickerService.valueChange$, this.datePickerService.inputPartChange$).pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.updateActiveDate();
      this.cdr.markForCheck();
    });
    this.ngZone.runOutsideAngular(() => {
      fromEvent(this.host.nativeElement, "mousedown").pipe(takeUntil(this.destroy$)).subscribe((event) => event.preventDefault());
    });
  }
  ngOnChanges(changes) {
    if (changes.showTime || changes.disabledTime) {
      if (this.showTime) {
        this.buildTimeOptions();
      }
    }
    if (changes.panelMode) {
      this.endPanelMode = this.panelMode;
    }
    if (changes.defaultPickerValue) {
      this.updateActiveDate();
    }
  }
  ngOnDestroy() {
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  updateActiveDate() {
    const activeDate = this.datePickerService.hasValue() ? this.datePickerService.value : this.datePickerService.makeValue(this.defaultPickerValue);
    this.datePickerService.setActiveDate(activeDate, this.hasTimePicker, this.getPanelMode(this.endPanelMode));
  }
  onClickOk() {
    const inputIndex = {
      left: 0,
      right: 1
    }[this.datePickerService.activeInput];
    const value = this.isRange ? this.datePickerService.value[inputIndex] : this.datePickerService.value;
    this.changeValueFromSelect(value);
    this.resultOk.emit();
  }
  onClickToday(value) {
    this.changeValueFromSelect(value, !this.showTime);
  }
  onCellHover(value) {
    if (!this.isRange) {
      return;
    }
    const otherInputIndex = {
      left: 1,
      right: 0
    }[this.datePickerService.activeInput];
    const base = this.datePickerService.value[otherInputIndex];
    if (base) {
      if (base.isBeforeDay(value)) {
        this.hoverValue = [base, value];
      } else {
        this.hoverValue = [value, base];
      }
    }
  }
  onPanelModeChange(mode, partType) {
    if (this.isRange) {
      const index = this.datePickerService.getActiveIndex(partType);
      if (index === 0) {
        this.panelMode = [mode, this.panelMode[1]];
      } else {
        this.panelMode = [this.panelMode[0], mode];
      }
    } else {
      this.panelMode = mode;
    }
    this.panelModeChange.emit(this.panelMode);
  }
  onActiveDateChange(value, partType) {
    if (this.isRange) {
      const activeDate = [];
      activeDate[this.datePickerService.getActiveIndex(partType)] = value;
      this.datePickerService.setActiveDate(activeDate, this.hasTimePicker, this.getPanelMode(this.endPanelMode, partType));
    } else {
      this.datePickerService.setActiveDate(value);
    }
  }
  onSelectTime(value, partType) {
    if (this.isRange) {
      const newValue = cloneDate(this.datePickerService.value);
      const index = this.datePickerService.getActiveIndex(partType);
      newValue[index] = this.overrideHms(value, newValue[index]);
      this.datePickerService.setValue(newValue);
    } else {
      const newValue = this.overrideHms(value, this.datePickerService.value);
      this.datePickerService.setValue(newValue);
    }
    this.datePickerService.inputPartChange$.next(null);
    this.buildTimeOptions();
  }
  changeValueFromSelect(value, emitValue = true) {
    if (this.isRange) {
      const selectedValue = cloneDate(this.datePickerService.value);
      const checkedPart = this.datePickerService.activeInput;
      let nextPart = checkedPart;
      selectedValue[this.datePickerService.getActiveIndex(checkedPart)] = value;
      this.checkedPartArr[this.datePickerService.getActiveIndex(checkedPart)] = true;
      this.hoverValue = selectedValue;
      if (emitValue) {
        if (this.inline) {
          nextPart = this.reversedPart(checkedPart);
          if (nextPart === "right") {
            selectedValue[this.datePickerService.getActiveIndex(nextPart)] = null;
            this.checkedPartArr[this.datePickerService.getActiveIndex(nextPart)] = false;
          }
          this.datePickerService.setValue(selectedValue);
          this.calendarChange.emit(selectedValue);
          if (this.isBothAllowed(selectedValue) && this.checkedPartArr[0] && this.checkedPartArr[1]) {
            this.clearHoverValue();
            this.datePickerService.emitValue$.next();
          }
        } else {
          if (wrongSortOrder(selectedValue)) {
            nextPart = this.reversedPart(checkedPart);
            selectedValue[this.datePickerService.getActiveIndex(nextPart)] = null;
            this.checkedPartArr[this.datePickerService.getActiveIndex(nextPart)] = false;
          }
          this.datePickerService.setValue(selectedValue);
          if (this.isBothAllowed(selectedValue) && this.checkedPartArr[0] && this.checkedPartArr[1]) {
            this.calendarChange.emit(selectedValue);
            this.clearHoverValue();
            this.datePickerService.emitValue$.next();
          } else if (this.isAllowed(selectedValue)) {
            nextPart = this.reversedPart(checkedPart);
            this.calendarChange.emit([value.clone()]);
          }
        }
      } else {
        this.datePickerService.setValue(selectedValue);
      }
      this.datePickerService.inputPartChange$.next(nextPart);
    } else {
      this.datePickerService.setValue(value);
      this.datePickerService.inputPartChange$.next(null);
      if (emitValue && this.isAllowed(value)) {
        this.datePickerService.emitValue$.next();
      }
    }
    this.buildTimeOptions();
  }
  reversedPart(part) {
    return part === "left" ? "right" : "left";
  }
  getPanelMode(panelMode, partType) {
    if (this.isRange) {
      return panelMode[this.datePickerService.getActiveIndex(partType)];
    } else {
      return panelMode;
    }
  }
  // Get single value or part value of a range
  getValue(partType) {
    if (this.isRange) {
      return (this.datePickerService.value || [])[this.datePickerService.getActiveIndex(partType)];
    } else {
      return this.datePickerService.value;
    }
  }
  getActiveDate(partType) {
    if (this.isRange) {
      return this.datePickerService.activeDate[this.datePickerService.getActiveIndex(partType)];
    } else {
      return this.datePickerService.activeDate;
    }
  }
  isOneAllowed(selectedValue) {
    const index = this.datePickerService.getActiveIndex();
    const disabledTimeArr = [this.disabledStartTime, this.disabledEndTime];
    return isAllowedDate(selectedValue[index], this.disabledDate, disabledTimeArr[index]);
  }
  isBothAllowed(selectedValue) {
    return isAllowedDate(selectedValue[0], this.disabledDate, this.disabledStartTime) && isAllowedDate(selectedValue[1], this.disabledDate, this.disabledEndTime);
  }
  isAllowed(value, isBoth = false) {
    if (this.isRange) {
      return isBoth ? this.isBothAllowed(value) : this.isOneAllowed(value);
    } else {
      return isAllowedDate(value, this.disabledDate, this.disabledTime);
    }
  }
  getTimeOptions(partType) {
    if (this.showTime && this.timeOptions) {
      return this.timeOptions instanceof Array ? this.timeOptions[this.datePickerService.getActiveIndex(partType)] : this.timeOptions;
    }
    return null;
  }
  onClickPresetRange(val) {
    const value = typeof val === "function" ? val() : val;
    if (value) {
      this.datePickerService.setValue([new CandyDate(value[0]), new CandyDate(value[1])]);
      this.datePickerService.emitValue$.next();
    }
  }
  onPresetRangeMouseLeave() {
    this.clearHoverValue();
  }
  onHoverPresetRange(val) {
    if (typeof val !== "function") {
      this.hoverValue = [new CandyDate(val[0]), new CandyDate(val[1])];
    }
  }
  getObjectKeys(obj) {
    return obj ? Object.keys(obj) : [];
  }
  show(partType) {
    const hide = this.showTime && this.isRange && this.datePickerService.activeInput !== partType;
    return !hide;
  }
  clearHoverValue() {
    this.hoverValue = [];
  }
  buildTimeOptions() {
    if (this.showTime) {
      const showTime = typeof this.showTime === "object" ? this.showTime : {};
      if (this.isRange) {
        const value = this.datePickerService.value;
        this.timeOptions = [this.overrideTimeOptions(showTime, value[0], "start"), this.overrideTimeOptions(showTime, value[1], "end")];
      } else {
        this.timeOptions = this.overrideTimeOptions(showTime, this.datePickerService.value);
      }
    } else {
      this.timeOptions = null;
    }
  }
  overrideTimeOptions(origin, value, partial) {
    let disabledTimeFn;
    if (partial) {
      disabledTimeFn = partial === "start" ? this.disabledStartTime : this.disabledEndTime;
    } else {
      disabledTimeFn = this.disabledTime;
    }
    return __spreadValues(__spreadValues({}, origin), getTimeConfig(value, disabledTimeFn));
  }
  overrideHms(newValue, oldValue) {
    newValue = newValue || new CandyDate();
    oldValue = oldValue || new CandyDate();
    return oldValue.setHms(newValue.getHours(), newValue.getMinutes(), newValue.getSeconds());
  }
};
_DateRangePopupComponent.\u0275fac = function DateRangePopupComponent_Factory(t) {
  return new (t || _DateRangePopupComponent)(\u0275\u0275directiveInject(DatePickerService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef));
};
_DateRangePopupComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _DateRangePopupComponent,
  selectors: [["date-range-popup"]],
  inputs: {
    isRange: "isRange",
    inline: "inline",
    showWeek: "showWeek",
    locale: "locale",
    disabledDate: "disabledDate",
    disabledTime: "disabledTime",
    showToday: "showToday",
    showNow: "showNow",
    showTime: "showTime",
    extraFooter: "extraFooter",
    ranges: "ranges",
    dateRender: "dateRender",
    panelMode: "panelMode",
    defaultPickerValue: "defaultPickerValue",
    dir: "dir"
  },
  outputs: {
    panelModeChange: "panelModeChange",
    calendarChange: "calendarChange",
    resultOk: "resultOk"
  },
  exportAs: ["dateRangePopup"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 8,
  vars: 1,
  consts: [["tplInnerPopup", ""], ["tplFooter", ""], ["tplRangeQuickSelector", ""], [3, "class"], [3, "ngStyle"], [4, "ngTemplateOutlet"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["tabindex", "-1"], [3, "panelModeChange", "cellHover", "selectDate", "selectTime", "headerChange", "showWeek", "endPanelMode", "partType", "locale", "showTimePicker", "timeOptions", "panelMode", "activeDate", "value", "disabledDate", "dateRender", "selectedValue", "hoverValue"], [3, "locale", "isRange", "showToday", "showNow", "hasTimePicker", "okDisabled", "extraFooter", "rangeQuickSelector"], [3, "clickOk", "clickToday", "locale", "isRange", "showToday", "showNow", "hasTimePicker", "okDisabled", "extraFooter", "rangeQuickSelector"], [3, "click", "mouseenter", "mouseleave"], [1, "ant-tag", "ant-tag-blue"]],
  template: function DateRangePopupComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, DateRangePopupComponent_Conditional_0_Template, 7, 17, "div", 3)(1, DateRangePopupComponent_Conditional_1_Template, 4, 13)(2, DateRangePopupComponent_ng_template_2_Template, 2, 18, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(4, DateRangePopupComponent_ng_template_4_Template, 1, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(6, DateRangePopupComponent_ng_template_6_Template, 2, 0, "ng-template", null, 2, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.isRange ? 0 : 1);
    }
  },
  dependencies: [InnerPopupComponent, NgTemplateOutlet, CalendarFooterComponent, NgStyle],
  encapsulation: 2,
  changeDetection: 0
});
var DateRangePopupComponent = _DateRangePopupComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateRangePopupComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      // eslint-disable-next-line @angular-eslint/component-selector
      selector: "date-range-popup",
      exportAs: "dateRangePopup",
      template: `
    @if (isRange) {
      <div class="{{ prefixCls }}-range-wrapper {{ prefixCls }}-date-range-wrapper">
        <div class="{{ prefixCls }}-range-arrow" [ngStyle]="arrowPosition"></div>
        <div class="{{ prefixCls }}-panel-container {{ showWeek ? prefixCls + '-week-number' : '' }}">
          <div class="{{ prefixCls }}-panels">
            @if (hasTimePicker) {
              <ng-container *ngTemplateOutlet="tplInnerPopup; context: { partType: datePickerService.activeInput }" />
            } @else {
              <ng-container *ngTemplateOutlet="tplInnerPopup; context: { partType: 'left' }" />
              <ng-container *ngTemplateOutlet="tplInnerPopup; context: { partType: 'right' }" />
            }
          </div>
          <ng-container *ngTemplateOutlet="tplFooter" />
        </div>
      </div>
    } @else {
      <div
        class="{{ prefixCls }}-panel-container {{ showWeek ? prefixCls + '-week-number' : '' }} {{
          hasTimePicker ? prefixCls + '-time' : ''
        }} {{ isRange ? prefixCls + '-range' : '' }}"
      >
        <div class="{{ prefixCls }}-panel" [class.ant-picker-panel-rtl]="dir === 'rtl'" tabindex="-1">
          <!-- Single ONLY -->
          <ng-container *ngTemplateOutlet="tplInnerPopup" />
          <ng-container *ngTemplateOutlet="tplFooter" />
        </div>
      </div>
    }

    <ng-template #tplInnerPopup let-partType="partType">
      <div class="{{ prefixCls }}-panel" [class.ant-picker-panel-rtl]="dir === 'rtl'">
        <!-- TODO(@wenqi73) [selectedValue] [hoverValue] types-->
        <inner-popup
          [showWeek]="showWeek"
          [endPanelMode]="getPanelMode(endPanelMode, partType)"
          [partType]="partType"
          [locale]="locale!"
          [showTimePicker]="hasTimePicker"
          [timeOptions]="getTimeOptions(partType)"
          [panelMode]="getPanelMode(panelMode, partType)"
          (panelModeChange)="onPanelModeChange($event, partType)"
          [activeDate]="getActiveDate(partType)"
          [value]="getValue(partType)"
          [disabledDate]="disabledDate"
          [dateRender]="dateRender"
          [selectedValue]="$any(datePickerService?.value)"
          [hoverValue]="$any(hoverValue)"
          (cellHover)="onCellHover($event)"
          (selectDate)="changeValueFromSelect($event, !showTime)"
          (selectTime)="onSelectTime($event, partType)"
          (headerChange)="onActiveDateChange($event, partType)"
        />
      </div>
    </ng-template>

    <ng-template #tplFooter>
      @if (hasFooter) {
        <calendar-footer
          [locale]="locale!"
          [isRange]="isRange"
          [showToday]="showToday"
          [showNow]="showNow"
          [hasTimePicker]="hasTimePicker"
          [okDisabled]="!isAllowed($any(datePickerService?.value))"
          [extraFooter]="extraFooter"
          [rangeQuickSelector]="ranges ? tplRangeQuickSelector : null"
          (clickOk)="onClickOk()"
          (clickToday)="onClickToday($event)"
        />
      }
    </ng-template>

    <!-- Range ONLY: Range Quick Selector -->
    <ng-template #tplRangeQuickSelector>
      @for (name of getObjectKeys(ranges); track name) {
        <li
          class="{{ prefixCls }}-preset"
          (click)="onClickPresetRange(ranges![name])"
          (mouseenter)="onHoverPresetRange(ranges![name])"
          (mouseleave)="onPresetRangeMouseLeave()"
        >
          <span class="ant-tag ant-tag-blue">{{ name }}</span>
        </li>
      }
    </ng-template>
  `,
      imports: [InnerPopupComponent, NgTemplateOutlet, CalendarFooterComponent, NgStyle],
      standalone: true
    }]
  }], () => [{
    type: DatePickerService
  }, {
    type: ChangeDetectorRef
  }, {
    type: NgZone
  }, {
    type: ElementRef
  }], {
    isRange: [{
      type: Input
    }],
    inline: [{
      type: Input
    }],
    showWeek: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    disabledDate: [{
      type: Input
    }],
    disabledTime: [{
      type: Input
    }],
    showToday: [{
      type: Input
    }],
    showNow: [{
      type: Input
    }],
    showTime: [{
      type: Input
    }],
    extraFooter: [{
      type: Input
    }],
    ranges: [{
      type: Input
    }],
    dateRender: [{
      type: Input
    }],
    panelMode: [{
      type: Input
    }],
    defaultPickerValue: [{
      type: Input
    }],
    dir: [{
      type: Input
    }],
    panelModeChange: [{
      type: Output
    }],
    calendarChange: [{
      type: Output
    }],
    resultOk: [{
      type: Output
    }]
  });
})();
var POPUP_STYLE_PATCH = {
  position: "relative"
};
var NZ_CONFIG_MODULE_NAME7 = "datePicker";
var _NzDatePickerComponent = class _NzDatePickerComponent {
  get nzShowTime() {
    return this.showTime;
  }
  set nzShowTime(value) {
    this.showTime = typeof value === "object" ? value : toBoolean(value);
  }
  get realOpenState() {
    return this.isOpenHandledByUser() ? !!this.nzOpen : this.overlayOpen;
  }
  ngAfterViewInit() {
    if (this.nzAutoFocus) {
      this.focus();
    }
    if (this.isRange && this.platform.isBrowser) {
      this.nzResizeObserver.observe(this.elementRef).pipe(takeUntil(this.destroy$)).subscribe(() => {
        this.updateInputWidthAndArrowLeft();
      });
    }
    this.datePickerService.inputPartChange$.pipe(takeUntil(this.destroy$)).subscribe((partType) => {
      if (partType) {
        this.datePickerService.activeInput = partType;
      }
      this.focus();
      this.updateInputWidthAndArrowLeft();
    });
    if (this.platform.isBrowser) {
      this.ngZone.runOutsideAngular(() => (
        // prevent mousedown event to trigger focusout event when click in date picker
        // see: https://github.com/NG-ZORRO/ng-zorro-antd/issues/7450
        fromEvent(this.elementRef.nativeElement, "mousedown").pipe(takeUntil(this.destroy$)).subscribe((event) => {
          if (event.target.tagName.toLowerCase() !== "input") {
            event.preventDefault();
          }
        })
      ));
    }
  }
  updateInputWidthAndArrowLeft() {
    this.inputWidth = this.rangePickerInputs?.first?.nativeElement.offsetWidth || 0;
    const baseStyle = {
      position: "absolute",
      width: `${this.inputWidth}px`
    };
    this.datePickerService.arrowLeft = this.datePickerService.activeInput === "left" ? 0 : this.inputWidth + this.separatorElement?.nativeElement.offsetWidth || 0;
    if (this.dir === "rtl") {
      this.activeBarStyle = __spreadProps(__spreadValues({}, baseStyle), {
        right: `${this.datePickerService.arrowLeft}px`
      });
    } else {
      this.activeBarStyle = __spreadProps(__spreadValues({}, baseStyle), {
        left: `${this.datePickerService.arrowLeft}px`
      });
    }
    this.cdr.markForCheck();
  }
  getInput(partType) {
    if (this.nzInline) {
      return void 0;
    }
    return this.isRange ? partType === "left" ? this.rangePickerInputs?.first.nativeElement : this.rangePickerInputs?.last.nativeElement : this.pickerInput.nativeElement;
  }
  focus() {
    const activeInputElement = this.getInput(this.datePickerService.activeInput);
    if (this.document.activeElement !== activeInputElement) {
      activeInputElement?.focus();
    }
  }
  onFocus(event, partType) {
    event.preventDefault();
    if (partType) {
      this.datePickerService.inputPartChange$.next(partType);
    }
    this.renderClass(true);
  }
  // blur event has not the relatedTarget in IE11, use focusout instead.
  onFocusout(event) {
    event.preventDefault();
    this.onTouchedFn();
    if (!this.elementRef.nativeElement.contains(event.relatedTarget)) {
      this.checkAndClose();
    }
    this.renderClass(false);
  }
  // Show overlay content
  open() {
    if (this.nzInline) {
      return;
    }
    if (!this.realOpenState && !this.nzDisabled) {
      this.updateInputWidthAndArrowLeft();
      this.overlayOpen = true;
      this.nzOnOpenChange.emit(true);
      this.focus();
      this.cdr.markForCheck();
    }
  }
  close() {
    if (this.nzInline) {
      return;
    }
    if (this.realOpenState) {
      this.overlayOpen = false;
      this.nzOnOpenChange.emit(false);
    }
  }
  get showClear() {
    return !this.nzDisabled && !this.isEmptyValue(this.datePickerService.value) && this.nzAllowClear;
  }
  checkAndClose() {
    if (!this.realOpenState) {
      return;
    }
    if (this.panel.isAllowed(this.datePickerService.value, true)) {
      if (Array.isArray(this.datePickerService.value) && wrongSortOrder(this.datePickerService.value)) {
        const index = this.datePickerService.getActiveIndex();
        const value = this.datePickerService.value[index];
        this.panel.changeValueFromSelect(value, true);
        return;
      }
      this.updateInputValue();
      this.datePickerService.emitValue$.next();
    } else {
      this.datePickerService.setValue(this.datePickerService.initialValue);
      this.close();
    }
  }
  onClickInputBox(event) {
    event.stopPropagation();
    this.focus();
    if (!this.isOpenHandledByUser()) {
      this.open();
    }
  }
  onOverlayKeydown(event) {
    if (event.keyCode === ESCAPE) {
      this.datePickerService.initValue();
    }
  }
  // NOTE: A issue here, the first time position change, the animation will not be triggered.
  // Because the overlay's "positionChange" event is emitted after the content's full shown up.
  // All other components like "nz-dropdown" which depends on overlay also has the same issue.
  // See: https://github.com/NG-ZORRO/ng-zorro-antd/issues/1429
  onPositionChange(position) {
    this.currentPositionX = position.connectionPair.originX;
    this.currentPositionY = position.connectionPair.originY;
    this.cdr.detectChanges();
  }
  onClickClear(event) {
    event.preventDefault();
    event.stopPropagation();
    this.datePickerService.initValue(true);
    this.datePickerService.emitValue$.next();
  }
  updateInputValue() {
    const newValue = this.datePickerService.value;
    if (this.isRange) {
      this.inputValue = newValue ? newValue.map((v) => this.formatValue(v)) : ["", ""];
    } else {
      this.inputValue = this.formatValue(newValue);
    }
    this.cdr.markForCheck();
  }
  formatValue(value) {
    return this.dateHelper.format(value && value.nativeDate, this.nzFormat);
  }
  onInputChange(value, isEnter = false) {
    if (!this.platform.TRIDENT && this.document.activeElement === this.getInput(this.datePickerService.activeInput) && !this.realOpenState) {
      this.open();
      return;
    }
    const date = this.checkValidDate(value);
    if (date && this.realOpenState) {
      this.panel.changeValueFromSelect(date, isEnter);
    }
  }
  onKeyupEnter(event) {
    this.onInputChange(event.target.value, true);
  }
  checkValidDate(value) {
    const date = new CandyDate(this.dateHelper.parseDate(value, this.nzFormat));
    if (!date.isValid() || value !== this.dateHelper.format(date.nativeDate, this.nzFormat)) {
      return null;
    }
    return date;
  }
  getPlaceholder(partType) {
    return this.isRange ? this.nzPlaceHolder[this.datePickerService.getActiveIndex(partType)] : this.nzPlaceHolder;
  }
  isEmptyValue(value) {
    if (value === null) {
      return true;
    } else if (this.isRange) {
      return !value || !Array.isArray(value) || value.every((val) => !val);
    } else {
      return !value;
    }
  }
  // Whether open state is permanently controlled by user himself
  isOpenHandledByUser() {
    return this.nzOpen !== void 0;
  }
  // ------------------------------------------------------------------------
  // Input API End
  // ------------------------------------------------------------------------
  constructor(nzConfigService, datePickerService, i18n, cdr, renderer, ngZone, elementRef, dateHelper, nzResizeObserver, platform, destroy$, doc, directionality, noAnimation, nzFormStatusService, nzFormNoStatusService) {
    this.nzConfigService = nzConfigService;
    this.datePickerService = datePickerService;
    this.i18n = i18n;
    this.cdr = cdr;
    this.renderer = renderer;
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.dateHelper = dateHelper;
    this.nzResizeObserver = nzResizeObserver;
    this.platform = platform;
    this.destroy$ = destroy$;
    this.directionality = directionality;
    this.noAnimation = noAnimation;
    this.nzFormStatusService = nzFormStatusService;
    this.nzFormNoStatusService = nzFormNoStatusService;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME7;
    this.isRange = false;
    this.dir = "ltr";
    this.statusCls = {};
    this.status = "";
    this.hasFeedback = false;
    this.panelMode = "date";
    this.isCustomPlaceHolder = false;
    this.isCustomFormat = false;
    this.showTime = false;
    this.isNzDisableFirstChange = true;
    this.nzAllowClear = true;
    this.nzAutoFocus = false;
    this.nzDisabled = false;
    this.nzBorderless = false;
    this.nzInputReadOnly = false;
    this.nzInline = false;
    this.nzPlaceHolder = "";
    this.nzPopupStyle = POPUP_STYLE_PATCH;
    this.nzSize = "default";
    this.nzStatus = "";
    this.nzShowToday = true;
    this.nzMode = "date";
    this.nzShowNow = true;
    this.nzDefaultPickerValue = null;
    this.nzSeparator = void 0;
    this.nzSuffixIcon = "calendar";
    this.nzBackdrop = false;
    this.nzId = null;
    this.nzPlacement = "bottomLeft";
    this.nzShowWeekNumber = false;
    this.nzOnPanelChange = new EventEmitter();
    this.nzOnCalendarChange = new EventEmitter();
    this.nzOnOk = new EventEmitter();
    this.nzOnOpenChange = new EventEmitter();
    this.inputSize = 12;
    this.prefixCls = PREFIX_CLASS;
    this.activeBarStyle = {};
    this.overlayOpen = false;
    this.overlayPositions = [...DEFAULT_DATE_PICKER_POSITIONS];
    this.currentPositionX = "start";
    this.currentPositionY = "bottom";
    this.onChangeFn = () => void 0;
    this.onTouchedFn = () => void 0;
    this.document = doc;
    this.origin = new CdkOverlayOrigin(this.elementRef);
  }
  ngOnInit() {
    this.nzFormStatusService?.formStatusChanges.pipe(distinctUntilChanged((pre, cur) => {
      return pre.status === cur.status && pre.hasFeedback === cur.hasFeedback;
    }), withLatestFrom(this.nzFormNoStatusService ? this.nzFormNoStatusService.noFormStatus : of(false)), map(([{
      status,
      hasFeedback
    }, noStatus]) => ({
      status: noStatus ? "" : status,
      hasFeedback
    })), takeUntil(this.destroy$)).subscribe(({
      status,
      hasFeedback
    }) => {
      this.setStatusStyles(status, hasFeedback);
    });
    if (!this.nzLocale) {
      this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => this.setLocale());
    }
    this.datePickerService.isRange = this.isRange;
    this.datePickerService.initValue(true);
    this.datePickerService.emitValue$.pipe(takeUntil(this.destroy$)).subscribe(() => {
      const granularityComparaison = this.showTime ? "second" : "day";
      const value = this.datePickerService.value;
      const datePickerPreviousValue = this.datePickerService.initialValue;
      if (!this.isRange && value?.isSame(datePickerPreviousValue?.nativeDate, granularityComparaison)) {
        this.onTouchedFn();
        return this.close();
      }
      if (this.isRange) {
        const [previousStartDate, previousEndDate] = datePickerPreviousValue;
        const [currentStartDate, currentEndDate] = value;
        if (previousStartDate?.isSame(currentStartDate?.nativeDate, granularityComparaison) && previousEndDate?.isSame(currentEndDate?.nativeDate, granularityComparaison)) {
          this.onTouchedFn();
          return this.close();
        }
      }
      this.datePickerService.initialValue = cloneDate(value);
      if (this.isRange) {
        const vAsRange = value;
        if (vAsRange.length) {
          this.onChangeFn([vAsRange[0]?.nativeDate ?? null, vAsRange[1]?.nativeDate ?? null]);
        } else {
          this.onChangeFn([]);
        }
      } else {
        if (value) {
          this.onChangeFn(value.nativeDate);
        } else {
          this.onChangeFn(null);
        }
      }
      this.onTouchedFn();
      this.close();
    });
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    this.inputValue = this.isRange ? ["", ""] : "";
    this.setModeAndFormat();
    this.datePickerService.valueChange$.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.updateInputValue();
    });
  }
  ngOnChanges(changes) {
    const {
      nzStatus,
      nzPlacement
    } = changes;
    if (changes.nzPopupStyle) {
      this.nzPopupStyle = this.nzPopupStyle ? __spreadValues(__spreadValues({}, this.nzPopupStyle), POPUP_STYLE_PATCH) : POPUP_STYLE_PATCH;
    }
    if (changes.nzPlaceHolder?.currentValue) {
      this.isCustomPlaceHolder = true;
    }
    if (changes.nzFormat?.currentValue) {
      this.isCustomFormat = true;
    }
    if (changes.nzLocale) {
      this.setDefaultPlaceHolder();
    }
    if (changes.nzRenderExtraFooter) {
      this.extraFooter = valueFunctionProp(this.nzRenderExtraFooter);
    }
    if (changes.nzMode) {
      this.setDefaultPlaceHolder();
      this.setModeAndFormat();
    }
    if (nzStatus) {
      this.setStatusStyles(this.nzStatus, this.hasFeedback);
    }
    if (nzPlacement) {
      this.setPlacement(this.nzPlacement);
    }
  }
  setModeAndFormat() {
    const inputFormats = {
      year: "yyyy",
      month: "yyyy-MM",
      week: "YYYY-ww",
      date: this.nzShowTime ? "yyyy-MM-dd HH:mm:ss" : "yyyy-MM-dd"
    };
    if (!this.nzMode) {
      this.nzMode = "date";
    }
    this.panelMode = this.isRange ? [this.nzMode, this.nzMode] : this.nzMode;
    if (!this.isCustomFormat) {
      this.nzFormat = inputFormats[this.nzMode];
    }
    this.inputSize = Math.max(10, this.nzFormat.length) + 2;
    this.updateInputValue();
  }
  /**
   * Triggered when overlayOpen changes (different with realOpenState)
   *
   * @param open The overlayOpen in picker component
   */
  onOpenChange(open) {
    this.nzOnOpenChange.emit(open);
  }
  writeValue(value) {
    this.setValue(value);
    this.cdr.markForCheck();
  }
  registerOnChange(fn) {
    this.onChangeFn = fn;
  }
  registerOnTouched(fn) {
    this.onTouchedFn = fn;
  }
  setDisabledState(isDisabled) {
    this.nzDisabled = this.isNzDisableFirstChange && this.nzDisabled || isDisabled;
    this.cdr.markForCheck();
    this.isNzDisableFirstChange = false;
  }
  // ------------------------------------------------------------------------
  // | Internal methods
  // ------------------------------------------------------------------------
  // Reload locale from i18n with side effects
  setLocale() {
    this.nzLocale = this.i18n.getLocaleData("DatePicker", {});
    this.setDefaultPlaceHolder();
    this.cdr.markForCheck();
  }
  setDefaultPlaceHolder() {
    if (!this.isCustomPlaceHolder && this.nzLocale) {
      const defaultPlaceholder = {
        year: this.getPropertyOfLocale("yearPlaceholder"),
        month: this.getPropertyOfLocale("monthPlaceholder"),
        week: this.getPropertyOfLocale("weekPlaceholder"),
        date: this.getPropertyOfLocale("placeholder")
      };
      const defaultRangePlaceholder = {
        year: this.getPropertyOfLocale("rangeYearPlaceholder"),
        month: this.getPropertyOfLocale("rangeMonthPlaceholder"),
        week: this.getPropertyOfLocale("rangeWeekPlaceholder"),
        date: this.getPropertyOfLocale("rangePlaceholder")
      };
      this.nzPlaceHolder = this.isRange ? defaultRangePlaceholder[this.nzMode] : defaultPlaceholder[this.nzMode];
    }
  }
  getPropertyOfLocale(type) {
    return this.nzLocale.lang[type] || this.i18n.getLocaleData(`DatePicker.lang.${type}`);
  }
  // Safe way of setting value with default
  setValue(value) {
    const newValue = this.datePickerService.makeValue(value);
    this.datePickerService.setValue(newValue);
    this.datePickerService.initialValue = cloneDate(newValue);
    this.cdr.detectChanges();
  }
  renderClass(value) {
    if (value) {
      this.renderer.addClass(this.elementRef.nativeElement, "ant-picker-focused");
    } else {
      this.renderer.removeClass(this.elementRef.nativeElement, "ant-picker-focused");
    }
  }
  onPanelModeChange(panelMode) {
    this.nzOnPanelChange.emit(panelMode);
  }
  // Emit nzOnCalendarChange when select date by nz-range-picker
  onCalendarChange(value) {
    if (this.isRange && Array.isArray(value)) {
      const rangeValue = value.filter((x) => x instanceof CandyDate).map((x) => x.nativeDate);
      this.nzOnCalendarChange.emit(rangeValue);
    }
  }
  onResultOk() {
    if (this.isRange) {
      const value = this.datePickerService.value;
      if (value.length) {
        this.nzOnOk.emit([value[0]?.nativeDate || null, value[1]?.nativeDate || null]);
      } else {
        this.nzOnOk.emit([]);
      }
    } else {
      if (this.datePickerService.value) {
        this.nzOnOk.emit(this.datePickerService.value.nativeDate);
      } else {
        this.nzOnOk.emit(null);
      }
    }
  }
  // status
  setStatusStyles(status, hasFeedback) {
    this.status = status;
    this.hasFeedback = hasFeedback;
    this.cdr.markForCheck();
    this.statusCls = getStatusClassNames(this.prefixCls, status, hasFeedback);
    Object.keys(this.statusCls).forEach((status2) => {
      if (this.statusCls[status2]) {
        this.renderer.addClass(this.elementRef.nativeElement, status2);
      } else {
        this.renderer.removeClass(this.elementRef.nativeElement, status2);
      }
    });
  }
  setPlacement(placement) {
    const position = DATE_PICKER_POSITION_MAP[placement];
    this.overlayPositions = [position, ...DEFAULT_DATE_PICKER_POSITIONS];
    this.currentPositionX = position.originX;
    this.currentPositionY = position.originY;
  }
};
_NzDatePickerComponent.\u0275fac = function NzDatePickerComponent_Factory(t) {
  return new (t || _NzDatePickerComponent)(\u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(DatePickerService), \u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DateHelperService), \u0275\u0275directiveInject(NzResizeObserver), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(NzDestroyService), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(NzNoAnimationDirective, 9), \u0275\u0275directiveInject(NzFormStatusService, 8), \u0275\u0275directiveInject(NzFormNoStatusService, 8));
};
_NzDatePickerComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzDatePickerComponent,
  selectors: [["nz-date-picker"], ["nz-week-picker"], ["nz-month-picker"], ["nz-year-picker"], ["nz-range-picker"]],
  viewQuery: function NzDatePickerComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(CdkConnectedOverlay, 5);
      \u0275\u0275viewQuery(DateRangePopupComponent, 5);
      \u0275\u0275viewQuery(_c44, 5);
      \u0275\u0275viewQuery(_c52, 5);
      \u0275\u0275viewQuery(_c62, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cdkConnectedOverlay = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.panel = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.separatorElement = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.pickerInput = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.rangePickerInputs = _t);
    }
  },
  hostVars: 16,
  hostBindings: function NzDatePickerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function NzDatePickerComponent_click_HostBindingHandler($event) {
        return ctx.onClickInputBox($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275classProp("ant-picker", true)("ant-picker-range", ctx.isRange)("ant-picker-large", ctx.nzSize === "large")("ant-picker-small", ctx.nzSize === "small")("ant-picker-disabled", ctx.nzDisabled)("ant-picker-rtl", ctx.dir === "rtl")("ant-picker-borderless", ctx.nzBorderless)("ant-picker-inline", ctx.nzInline);
    }
  },
  inputs: {
    nzAllowClear: "nzAllowClear",
    nzAutoFocus: "nzAutoFocus",
    nzDisabled: "nzDisabled",
    nzBorderless: "nzBorderless",
    nzInputReadOnly: "nzInputReadOnly",
    nzInline: "nzInline",
    nzOpen: "nzOpen",
    nzDisabledDate: "nzDisabledDate",
    nzLocale: "nzLocale",
    nzPlaceHolder: "nzPlaceHolder",
    nzPopupStyle: "nzPopupStyle",
    nzDropdownClassName: "nzDropdownClassName",
    nzSize: "nzSize",
    nzStatus: "nzStatus",
    nzFormat: "nzFormat",
    nzDateRender: "nzDateRender",
    nzDisabledTime: "nzDisabledTime",
    nzRenderExtraFooter: "nzRenderExtraFooter",
    nzShowToday: "nzShowToday",
    nzMode: "nzMode",
    nzShowNow: "nzShowNow",
    nzRanges: "nzRanges",
    nzDefaultPickerValue: "nzDefaultPickerValue",
    nzSeparator: "nzSeparator",
    nzSuffixIcon: "nzSuffixIcon",
    nzBackdrop: "nzBackdrop",
    nzId: "nzId",
    nzPlacement: "nzPlacement",
    nzShowWeekNumber: "nzShowWeekNumber",
    nzShowTime: "nzShowTime"
  },
  outputs: {
    nzOnPanelChange: "nzOnPanelChange",
    nzOnCalendarChange: "nzOnCalendarChange",
    nzOnOk: "nzOnOk",
    nzOnOpenChange: "nzOnOpenChange"
  },
  exportAs: ["nzDatePicker"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzDestroyService, DatePickerService, {
    provide: NG_VALUE_ACCESSOR,
    multi: true,
    useExisting: forwardRef(() => _NzDatePickerComponent)
  }]), \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 9,
  vars: 6,
  consts: [["tplRangeInput", ""], ["tplRightRest", ""], ["inlineMode", ""], ["pickerInput", ""], ["separatorElement", ""], ["rangePickerInput", ""], ["cdkConnectedOverlay", "", "nzConnectedOverlay", "", 3, "positionChange", "detach", "overlayKeydown", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPositions", "cdkConnectedOverlayTransformOriginOn"], [3, "class"], ["autocomplete", "off", 3, "ngModelChange", "focus", "focusout", "keyup.enter", "disabled", "readOnly", "ngModel", "placeholder", "size"], [4, "ngTemplateOutlet"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "nzStringTemplateOutlet"], ["nz-icon", "", "nzType", "swap-right", "nzTheme", "outline"], [3, "ngTemplateOutlet"], ["autocomplete", "off", 3, "click", "focusout", "focus", "keyup.enter", "ngModelChange", "disabled", "readOnly", "size", "ngModel", "placeholder"], [3, "ngStyle"], [3, "status"], [3, "click"], ["nz-icon", "", "nzType", "close-circle", "nzTheme", "fill"], ["nz-icon", "", 3, "nzType"], [3, "panelModeChange", "calendarChange", "resultOk", "isRange", "inline", "defaultPickerValue", "showWeek", "panelMode", "locale", "showToday", "showNow", "showTime", "dateRender", "disabledDate", "disabledTime", "extraFooter", "ranges", "dir"], [1, "ant-picker-wrapper", 3, "nzNoAnimation"]],
  template: function NzDatePickerComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275template(0, NzDatePickerComponent_Conditional_0_Template, 2, 1)(1, NzDatePickerComponent_Conditional_1_Template, 1, 1)(2, NzDatePickerComponent_ng_template_2_Template, 2, 6, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(4, NzDatePickerComponent_ng_template_4_Template, 5, 10, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(6, NzDatePickerComponent_ng_template_6_Template, 2, 36, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(8, NzDatePickerComponent_ng_template_8_Template, 2, 5, "ng-template", 6);
      \u0275\u0275listener("positionChange", function NzDatePickerComponent_Template_ng_template_positionChange_8_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onPositionChange($event));
      })("detach", function NzDatePickerComponent_Template_ng_template_detach_8_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.close());
      })("overlayKeydown", function NzDatePickerComponent_Template_ng_template_overlayKeydown_8_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onOverlayKeydown($event));
      });
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, !ctx.nzInline ? 0 : 1);
      \u0275\u0275advance(8);
      \u0275\u0275property("cdkConnectedOverlayHasBackdrop", ctx.nzBackdrop)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayOpen", ctx.realOpenState)("cdkConnectedOverlayPositions", ctx.overlayPositions)("cdkConnectedOverlayTransformOriginOn", ".ant-picker-wrapper");
    }
  },
  dependencies: [FormsModule, DefaultValueAccessor, NgControlStatus, NgModel, NgTemplateOutlet, NzOutletModule, NzStringTemplateOutletDirective, NzIconModule, NzIconDirective, NgStyle, NzFormPatchModule, NzFormItemFeedbackIconComponent, DateRangePopupComponent, CdkConnectedOverlay, NzOverlayModule, NzConnectedOverlayDirective, NzNoAnimationDirective],
  encapsulation: 2,
  data: {
    animation: [slideMotion]
  },
  changeDetection: 0
});
var NzDatePickerComponent = _NzDatePickerComponent;
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzAllowClear", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzAutoFocus", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzDisabled", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzBorderless", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzInputReadOnly", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzInline", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzOpen", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzShowToday", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzShowNow", void 0);
__decorate([WithConfig()], NzDatePickerComponent.prototype, "nzSeparator", void 0);
__decorate([WithConfig()], NzDatePickerComponent.prototype, "nzSuffixIcon", void 0);
__decorate([WithConfig()], NzDatePickerComponent.prototype, "nzBackdrop", void 0);
__decorate([InputBoolean()], NzDatePickerComponent.prototype, "nzShowWeekNumber", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDatePickerComponent, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "nz-date-picker,nz-week-picker,nz-month-picker,nz-year-picker,nz-range-picker",
      exportAs: "nzDatePicker",
      template: `
    @if (!nzInline) {
      @if (!isRange) {
        <div class="{{ prefixCls }}-input">
          <input
            #pickerInput
            [attr.id]="nzId"
            [class.ant-input-disabled]="nzDisabled"
            [disabled]="nzDisabled"
            [readOnly]="nzInputReadOnly"
            [(ngModel)]="inputValue"
            placeholder="{{ getPlaceholder() }}"
            [size]="inputSize"
            autocomplete="off"
            (focus)="onFocus($event)"
            (focusout)="onFocusout($event)"
            (ngModelChange)="onInputChange($event)"
            (keyup.enter)="onKeyupEnter($event)"
          />
          <ng-container *ngTemplateOutlet="tplRightRest" />
        </div>
      } @else {
        <div class="{{ prefixCls }}-input">
          <ng-container *ngTemplateOutlet="tplRangeInput; context: { partType: 'left' }" />
        </div>
        <div #separatorElement class="{{ prefixCls }}-range-separator">
          <span class="{{ prefixCls }}-separator">
            <ng-container *nzStringTemplateOutlet="nzSeparator; let separator">
              @if (nzSeparator) {
                {{ nzSeparator }}
              } @else {
                <span nz-icon nzType="swap-right" nzTheme="outline"></span>
              }
            </ng-container>
          </span>
        </div>
        <div class="{{ prefixCls }}-input">
          <ng-container *ngTemplateOutlet="tplRangeInput; context: { partType: 'right' }" />
        </div>
        <ng-container *ngTemplateOutlet="tplRightRest" />
      }
    } @else {
      <ng-template [ngTemplateOutlet]="inlineMode" />
    }
    <!-- Input for Range ONLY -->
    <ng-template #tplRangeInput let-partType="partType">
      <input
        #rangePickerInput
        [attr.id]="nzId"
        [disabled]="nzDisabled"
        [readOnly]="nzInputReadOnly"
        [size]="inputSize"
        autocomplete="off"
        (click)="onClickInputBox($event)"
        (focusout)="onFocusout($event)"
        (focus)="onFocus($event, partType)"
        (keyup.enter)="onKeyupEnter($event)"
        [(ngModel)]="inputValue[datePickerService.getActiveIndex(partType)]"
        (ngModelChange)="onInputChange($event)"
        placeholder="{{ getPlaceholder(partType) }}"
      />
    </ng-template>

    <!-- Right operator icons -->
    <ng-template #tplRightRest>
      <div class="{{ prefixCls }}-active-bar" [ngStyle]="activeBarStyle"></div>
      @if (showClear) {
        <span class="{{ prefixCls }}-clear" (click)="onClickClear($event)">
          <span nz-icon nzType="close-circle" nzTheme="fill"></span>
        </span>
      }

      <span class="{{ prefixCls }}-suffix">
        <ng-container *nzStringTemplateOutlet="nzSuffixIcon; let suffixIcon">
          <span nz-icon [nzType]="suffixIcon"></span>
        </ng-container>
        @if (hasFeedback && !!status) {
          <nz-form-item-feedback-icon [status]="status" />
        }
      </span>
    </ng-template>

    <ng-template #inlineMode>
      <div
        class="{{ prefixCls }}-dropdown {{ nzDropdownClassName }}"
        [class.ant-picker-dropdown-rtl]="dir === 'rtl'"
        [class.ant-picker-dropdown-placement-bottomLeft]="currentPositionY === 'bottom' && currentPositionX === 'start'"
        [class.ant-picker-dropdown-placement-topLeft]="currentPositionY === 'top' && currentPositionX === 'start'"
        [class.ant-picker-dropdown-placement-bottomRight]="currentPositionY === 'bottom' && currentPositionX === 'end'"
        [class.ant-picker-dropdown-placement-topRight]="currentPositionY === 'top' && currentPositionX === 'end'"
        [class.ant-picker-dropdown-range]="isRange"
        [class.ant-picker-active-left]="datePickerService.activeInput === 'left'"
        [class.ant-picker-active-right]="datePickerService.activeInput === 'right'"
        [ngStyle]="nzPopupStyle"
      >
        <date-range-popup
          [isRange]="isRange"
          [inline]="nzInline"
          [defaultPickerValue]="nzDefaultPickerValue"
          [showWeek]="nzShowWeekNumber || nzMode === 'week'"
          [panelMode]="panelMode"
          (panelModeChange)="onPanelModeChange($event)"
          (calendarChange)="onCalendarChange($event)"
          [locale]="nzLocale?.lang!"
          [showToday]="nzMode === 'date' && nzShowToday && !isRange && !nzShowTime"
          [showNow]="nzMode === 'date' && nzShowNow && !isRange && !!nzShowTime"
          [showTime]="nzShowTime"
          [dateRender]="nzDateRender"
          [disabledDate]="nzDisabledDate"
          [disabledTime]="nzDisabledTime"
          [extraFooter]="extraFooter"
          [ranges]="nzRanges"
          [dir]="dir"
          (resultOk)="onResultOk()"
        />
      </div>
    </ng-template>

    <!-- Overlay -->
    <ng-template
      cdkConnectedOverlay
      nzConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="nzBackdrop"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="realOpenState"
      [cdkConnectedOverlayPositions]="overlayPositions"
      [cdkConnectedOverlayTransformOriginOn]="'.ant-picker-wrapper'"
      (positionChange)="onPositionChange($event)"
      (detach)="close()"
      (overlayKeydown)="onOverlayKeydown($event)"
    >
      <div
        class="ant-picker-wrapper"
        [nzNoAnimation]="!!noAnimation?.nzNoAnimation"
        [@slideMotion]="'enter'"
        [style.position]="'relative'"
      >
        <ng-container *ngTemplateOutlet="inlineMode"></ng-container>
      </div>
    </ng-template>
  `,
      host: {
        "[class.ant-picker]": `true`,
        "[class.ant-picker-range]": `isRange`,
        "[class.ant-picker-large]": `nzSize === 'large'`,
        "[class.ant-picker-small]": `nzSize === 'small'`,
        "[class.ant-picker-disabled]": `nzDisabled`,
        "[class.ant-picker-rtl]": `dir === 'rtl'`,
        "[class.ant-picker-borderless]": `nzBorderless`,
        "[class.ant-picker-inline]": `nzInline`,
        "(click)": "onClickInputBox($event)"
      },
      providers: [NzDestroyService, DatePickerService, {
        provide: NG_VALUE_ACCESSOR,
        multi: true,
        useExisting: forwardRef(() => NzDatePickerComponent)
      }],
      animations: [slideMotion],
      imports: [FormsModule, NgTemplateOutlet, NzOutletModule, NzIconModule, NgStyle, NzFormPatchModule, DateRangePopupComponent, CdkConnectedOverlay, NzOverlayModule, NzNoAnimationDirective],
      standalone: true
    }]
  }], () => [{
    type: NzConfigService
  }, {
    type: DatePickerService
  }, {
    type: NzI18nService
  }, {
    type: ChangeDetectorRef
  }, {
    type: Renderer2
  }, {
    type: NgZone
  }, {
    type: ElementRef
  }, {
    type: DateHelperService
  }, {
    type: NzResizeObserver
  }, {
    type: Platform
  }, {
    type: NzDestroyService
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NzNoAnimationDirective,
    decorators: [{
      type: Host
    }, {
      type: Optional
    }]
  }, {
    type: NzFormStatusService,
    decorators: [{
      type: Optional
    }]
  }, {
    type: NzFormNoStatusService,
    decorators: [{
      type: Optional
    }]
  }], {
    nzAllowClear: [{
      type: Input
    }],
    nzAutoFocus: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzBorderless: [{
      type: Input
    }],
    nzInputReadOnly: [{
      type: Input
    }],
    nzInline: [{
      type: Input
    }],
    nzOpen: [{
      type: Input
    }],
    nzDisabledDate: [{
      type: Input
    }],
    nzLocale: [{
      type: Input
    }],
    nzPlaceHolder: [{
      type: Input
    }],
    nzPopupStyle: [{
      type: Input
    }],
    nzDropdownClassName: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzStatus: [{
      type: Input
    }],
    nzFormat: [{
      type: Input
    }],
    nzDateRender: [{
      type: Input
    }],
    nzDisabledTime: [{
      type: Input
    }],
    nzRenderExtraFooter: [{
      type: Input
    }],
    nzShowToday: [{
      type: Input
    }],
    nzMode: [{
      type: Input
    }],
    nzShowNow: [{
      type: Input
    }],
    nzRanges: [{
      type: Input
    }],
    nzDefaultPickerValue: [{
      type: Input
    }],
    nzSeparator: [{
      type: Input
    }],
    nzSuffixIcon: [{
      type: Input
    }],
    nzBackdrop: [{
      type: Input
    }],
    nzId: [{
      type: Input
    }],
    nzPlacement: [{
      type: Input
    }],
    nzShowWeekNumber: [{
      type: Input
    }],
    nzOnPanelChange: [{
      type: Output
    }],
    nzOnCalendarChange: [{
      type: Output
    }],
    nzOnOk: [{
      type: Output
    }],
    nzOnOpenChange: [{
      type: Output
    }],
    nzShowTime: [{
      type: Input
    }],
    cdkConnectedOverlay: [{
      type: ViewChild,
      args: [CdkConnectedOverlay, {
        static: false
      }]
    }],
    panel: [{
      type: ViewChild,
      args: [DateRangePopupComponent, {
        static: false
      }]
    }],
    separatorElement: [{
      type: ViewChild,
      args: ["separatorElement", {
        static: false
      }]
    }],
    pickerInput: [{
      type: ViewChild,
      args: ["pickerInput", {
        static: false
      }]
    }],
    rangePickerInputs: [{
      type: ViewChildren,
      args: ["rangePickerInput"]
    }]
  });
})();
var _NzMonthPickerComponent = class _NzMonthPickerComponent {
  constructor(datePicker) {
    this.datePicker = datePicker;
    this.datePicker.nzMode = "month";
  }
};
_NzMonthPickerComponent.\u0275fac = function NzMonthPickerComponent_Factory(t) {
  return new (t || _NzMonthPickerComponent)(\u0275\u0275directiveInject(NzDatePickerComponent, 9));
};
_NzMonthPickerComponent.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzMonthPickerComponent,
  selectors: [["nz-month-picker"]],
  exportAs: ["nzMonthPicker"],
  standalone: true
});
var NzMonthPickerComponent = _NzMonthPickerComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzMonthPickerComponent, [{
    type: Directive,
    args: [{
      selector: "nz-month-picker",
      exportAs: "nzMonthPicker",
      standalone: true
    }]
  }], () => [{
    type: NzDatePickerComponent,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
var _NzRangePickerComponent = class _NzRangePickerComponent {
  constructor(datePicker) {
    this.datePicker = datePicker;
    this.datePicker.isRange = true;
  }
};
_NzRangePickerComponent.\u0275fac = function NzRangePickerComponent_Factory(t) {
  return new (t || _NzRangePickerComponent)(\u0275\u0275directiveInject(NzDatePickerComponent, 9));
};
_NzRangePickerComponent.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzRangePickerComponent,
  selectors: [["nz-range-picker"]],
  exportAs: ["nzRangePicker"],
  standalone: true
});
var NzRangePickerComponent = _NzRangePickerComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzRangePickerComponent, [{
    type: Directive,
    args: [{
      selector: "nz-range-picker",
      exportAs: "nzRangePicker",
      standalone: true
    }]
  }], () => [{
    type: NzDatePickerComponent,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
var _NzWeekPickerComponent = class _NzWeekPickerComponent {
  constructor(datePicker) {
    this.datePicker = datePicker;
    this.datePicker.nzMode = "week";
  }
};
_NzWeekPickerComponent.\u0275fac = function NzWeekPickerComponent_Factory(t) {
  return new (t || _NzWeekPickerComponent)(\u0275\u0275directiveInject(NzDatePickerComponent, 9));
};
_NzWeekPickerComponent.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzWeekPickerComponent,
  selectors: [["nz-week-picker"]],
  exportAs: ["nzWeekPicker"],
  standalone: true
});
var NzWeekPickerComponent = _NzWeekPickerComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzWeekPickerComponent, [{
    type: Directive,
    args: [{
      selector: "nz-week-picker",
      exportAs: "nzWeekPicker",
      standalone: true
    }]
  }], () => [{
    type: NzDatePickerComponent,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
var _NzYearPickerComponent = class _NzYearPickerComponent {
  constructor(datePicker) {
    this.datePicker = datePicker;
    this.datePicker.nzMode = "year";
  }
};
_NzYearPickerComponent.\u0275fac = function NzYearPickerComponent_Factory(t) {
  return new (t || _NzYearPickerComponent)(\u0275\u0275directiveInject(NzDatePickerComponent, 9));
};
_NzYearPickerComponent.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzYearPickerComponent,
  selectors: [["nz-year-picker"]],
  exportAs: ["nzYearPicker"],
  standalone: true
});
var NzYearPickerComponent = _NzYearPickerComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzYearPickerComponent, [{
    type: Directive,
    args: [{
      selector: "nz-year-picker",
      exportAs: "nzYearPicker",
      standalone: true
    }]
  }], () => [{
    type: NzDatePickerComponent,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
var _NzDatePickerModule = class _NzDatePickerModule {
};
_NzDatePickerModule.\u0275fac = function NzDatePickerModule_Factory(t) {
  return new (t || _NzDatePickerModule)();
};
_NzDatePickerModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzDatePickerModule
});
_NzDatePickerModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzDatePickerComponent, CalendarFooterComponent, InnerPopupComponent, DateRangePopupComponent]
});
var NzDatePickerModule = _NzDatePickerModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzDatePickerModule, [{
    type: NgModule,
    args: [{
      imports: [NzDatePickerComponent, NzMonthPickerComponent, NzYearPickerComponent, NzWeekPickerComponent, NzRangePickerComponent, CalendarFooterComponent, InnerPopupComponent, DateRangePopupComponent],
      exports: [NzDatePickerComponent, NzRangePickerComponent, NzMonthPickerComponent, NzYearPickerComponent, NzWeekPickerComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-popconfirm.mjs
var _c011 = ["okBtn"];
var _c17 = ["cancelBtn"];
function NzPopconfirmComponent_ng_template_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 6);
    \u0275\u0275element(1, "span", 14);
    \u0275\u0275elementEnd();
  }
}
function NzPopconfirmComponent_ng_template_0_ng_container_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "span", 16);
    \u0275\u0275element(2, "span", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const icon_r3 = ctx.$implicit;
    \u0275\u0275advance(2);
    \u0275\u0275property("nzType", icon_r3 || "exclamation-circle");
  }
}
function NzPopconfirmComponent_ng_template_0_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzPopconfirmComponent_ng_template_0_ng_container_7_ng_container_1_Template, 3, 1, "ng-container", 10);
    \u0275\u0275elementStart(2, "div", 15);
    \u0275\u0275text(3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r3.nzIcon);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(ctx_r3.nzTitle);
  }
}
function NzPopconfirmComponent_ng_template_0_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.nzCancelText, " ");
  }
}
function NzPopconfirmComponent_ng_template_0_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
    \u0275\u0275pipe(1, "nzI18n");
  }
  if (rf & 2) {
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind1(1, 1, "Modal.cancelText"), " ");
  }
}
function NzPopconfirmComponent_ng_template_0_Conditional_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275textInterpolate1(" ", ctx_r3.nzOkText, " ");
  }
}
function NzPopconfirmComponent_ng_template_0_Conditional_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
    \u0275\u0275pipe(1, "nzI18n");
  }
  if (rf & 2) {
    \u0275\u0275textInterpolate1(" ", \u0275\u0275pipeBind1(1, 1, "Modal.okText"), " ");
  }
}
function NzPopconfirmComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 4)(1, "div", 5);
    \u0275\u0275template(2, NzPopconfirmComponent_ng_template_0_Conditional_2_Template, 2, 0, "div", 6);
    \u0275\u0275elementStart(3, "div", 7)(4, "div")(5, "div", 8)(6, "div", 9);
    \u0275\u0275template(7, NzPopconfirmComponent_ng_template_0_ng_container_7_Template, 4, 2, "ng-container", 10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "div", 11)(9, "button", 12, 1);
    \u0275\u0275listener("click", function NzPopconfirmComponent_ng_template_0_Template_button_click_9_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onCancel());
    });
    \u0275\u0275template(11, NzPopconfirmComponent_ng_template_0_Conditional_11_Template, 1, 1)(12, NzPopconfirmComponent_ng_template_0_Conditional_12_Template, 2, 3);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "button", 13, 2);
    \u0275\u0275listener("click", function NzPopconfirmComponent_ng_template_0_Template_button_click_13_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onConfirm());
    });
    \u0275\u0275template(15, NzPopconfirmComponent_ng_template_0_Conditional_15_Template, 1, 1)(16, NzPopconfirmComponent_ng_template_0_Conditional_16_Template, 2, 3);
    \u0275\u0275elementEnd()()()()()()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275classProp("ant-popover-rtl", ctx_r3.dir === "rtl");
    \u0275\u0275property("cdkTrapFocusAutoCapture", ctx_r3.nzAutoFocus !== null)("ngClass", ctx_r3._classMap)("ngStyle", ctx_r3.nzOverlayStyle)("@.disabled", !!(ctx_r3.noAnimation == null ? null : ctx_r3.noAnimation.nzNoAnimation))("nzNoAnimation", ctx_r3.noAnimation == null ? null : ctx_r3.noAnimation.nzNoAnimation)("@zoomBigMotion", "active");
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, ctx_r3.nzPopconfirmShowArrow ? 2 : -1);
    \u0275\u0275advance(5);
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r3.nzTitle);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzSize", "small");
    \u0275\u0275attribute("cdkFocusInitial", ctx_r3.nzAutoFocus === "cancel" || null);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(11, ctx_r3.nzCancelText ? 11 : 12);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzSize", "small")("nzType", ctx_r3.nzOkType !== "danger" ? ctx_r3.nzOkType : "primary")("nzDanger", ctx_r3.nzOkDanger || ctx_r3.nzOkType === "danger")("nzLoading", ctx_r3.confirmLoading)("disabled", ctx_r3.nzOkDisabled);
    \u0275\u0275attribute("cdkFocusInitial", ctx_r3.nzAutoFocus === "ok" || null);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(15, ctx_r3.nzOkText ? 15 : 16);
  }
}
var NZ_CONFIG_MODULE_NAME8 = "popconfirm";
var _NzPopconfirmDirective = class _NzPopconfirmDirective extends NzTooltipBaseDirective {
  getProxyPropertyMap() {
    return __spreadValues({
      nzOkText: ["nzOkText", () => this.nzOkText],
      nzOkType: ["nzOkType", () => this.nzOkType],
      nzOkDanger: ["nzOkDanger", () => this.nzOkDanger],
      nzOkDisabled: ["nzOkDisabled", () => this.nzOkDisabled],
      nzCancelText: ["nzCancelText", () => this.nzCancelText],
      nzBeforeConfirm: ["nzBeforeConfirm", () => this.nzBeforeConfirm],
      nzCondition: ["nzCondition", () => this.nzCondition],
      nzIcon: ["nzIcon", () => this.nzIcon],
      nzPopconfirmShowArrow: ["nzPopconfirmShowArrow", () => this.nzPopconfirmShowArrow],
      nzPopconfirmBackdrop: ["nzBackdrop", () => this.nzPopconfirmBackdrop],
      nzAutoFocus: ["nzAutoFocus", () => this.nzAutofocus]
    }, super.getProxyPropertyMap());
  }
  constructor() {
    super(NzPopconfirmComponent);
    this._nzModuleName = NZ_CONFIG_MODULE_NAME8;
    this.trigger = "click";
    this.placement = "top";
    this.nzCondition = false;
    this.nzPopconfirmShowArrow = true;
    this.nzPopconfirmBackdrop = false;
    this.nzAutofocus = null;
    this.visibleChange = new EventEmitter();
    this.nzOnCancel = new EventEmitter();
    this.nzOnConfirm = new EventEmitter();
  }
  /**
   * @override
   */
  createComponent() {
    super.createComponent();
    this.component.nzOnCancel.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.nzOnCancel.emit();
    });
    this.component.nzOnConfirm.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.nzOnConfirm.emit();
    });
  }
};
_NzPopconfirmDirective.\u0275fac = function NzPopconfirmDirective_Factory(t) {
  return new (t || _NzPopconfirmDirective)();
};
_NzPopconfirmDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NzPopconfirmDirective,
  selectors: [["", "nz-popconfirm", ""]],
  hostVars: 2,
  hostBindings: function NzPopconfirmDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-popover-open", ctx.visible);
    }
  },
  inputs: {
    arrowPointAtCenter: [InputFlags.None, "nzPopconfirmArrowPointAtCenter", "arrowPointAtCenter"],
    title: [InputFlags.None, "nzPopconfirmTitle", "title"],
    directiveTitle: [InputFlags.None, "nz-popconfirm", "directiveTitle"],
    trigger: [InputFlags.None, "nzPopconfirmTrigger", "trigger"],
    placement: [InputFlags.None, "nzPopconfirmPlacement", "placement"],
    origin: [InputFlags.None, "nzPopconfirmOrigin", "origin"],
    mouseEnterDelay: [InputFlags.None, "nzPopconfirmMouseEnterDelay", "mouseEnterDelay"],
    mouseLeaveDelay: [InputFlags.None, "nzPopconfirmMouseLeaveDelay", "mouseLeaveDelay"],
    overlayClassName: [InputFlags.None, "nzPopconfirmOverlayClassName", "overlayClassName"],
    overlayStyle: [InputFlags.None, "nzPopconfirmOverlayStyle", "overlayStyle"],
    visible: [InputFlags.None, "nzPopconfirmVisible", "visible"],
    nzOkText: "nzOkText",
    nzOkType: "nzOkType",
    nzOkDisabled: "nzOkDisabled",
    nzOkDanger: "nzOkDanger",
    nzCancelText: "nzCancelText",
    nzBeforeConfirm: "nzBeforeConfirm",
    nzIcon: "nzIcon",
    nzCondition: "nzCondition",
    nzPopconfirmShowArrow: "nzPopconfirmShowArrow",
    nzPopconfirmBackdrop: "nzPopconfirmBackdrop",
    nzAutofocus: "nzAutofocus"
  },
  outputs: {
    visibleChange: "nzPopconfirmVisibleChange",
    nzOnCancel: "nzOnCancel",
    nzOnConfirm: "nzOnConfirm"
  },
  exportAs: ["nzPopconfirm"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature]
});
var NzPopconfirmDirective = _NzPopconfirmDirective;
__decorate([InputBoolean()], NzPopconfirmDirective.prototype, "arrowPointAtCenter", void 0);
__decorate([InputBoolean()], NzPopconfirmDirective.prototype, "nzOkDisabled", void 0);
__decorate([InputBoolean()], NzPopconfirmDirective.prototype, "nzOkDanger", void 0);
__decorate([InputBoolean()], NzPopconfirmDirective.prototype, "nzCondition", void 0);
__decorate([InputBoolean()], NzPopconfirmDirective.prototype, "nzPopconfirmShowArrow", void 0);
__decorate([WithConfig()], NzPopconfirmDirective.prototype, "nzPopconfirmBackdrop", void 0);
__decorate([WithConfig()], NzPopconfirmDirective.prototype, "nzAutofocus", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPopconfirmDirective, [{
    type: Directive,
    args: [{
      selector: "[nz-popconfirm]",
      exportAs: "nzPopconfirm",
      host: {
        "[class.ant-popover-open]": "visible"
      },
      standalone: true
    }]
  }], () => [], {
    arrowPointAtCenter: [{
      type: Input,
      args: ["nzPopconfirmArrowPointAtCenter"]
    }],
    title: [{
      type: Input,
      args: ["nzPopconfirmTitle"]
    }],
    directiveTitle: [{
      type: Input,
      args: ["nz-popconfirm"]
    }],
    trigger: [{
      type: Input,
      args: ["nzPopconfirmTrigger"]
    }],
    placement: [{
      type: Input,
      args: ["nzPopconfirmPlacement"]
    }],
    origin: [{
      type: Input,
      args: ["nzPopconfirmOrigin"]
    }],
    mouseEnterDelay: [{
      type: Input,
      args: ["nzPopconfirmMouseEnterDelay"]
    }],
    mouseLeaveDelay: [{
      type: Input,
      args: ["nzPopconfirmMouseLeaveDelay"]
    }],
    overlayClassName: [{
      type: Input,
      args: ["nzPopconfirmOverlayClassName"]
    }],
    overlayStyle: [{
      type: Input,
      args: ["nzPopconfirmOverlayStyle"]
    }],
    visible: [{
      type: Input,
      args: ["nzPopconfirmVisible"]
    }],
    nzOkText: [{
      type: Input
    }],
    nzOkType: [{
      type: Input
    }],
    nzOkDisabled: [{
      type: Input
    }],
    nzOkDanger: [{
      type: Input
    }],
    nzCancelText: [{
      type: Input
    }],
    nzBeforeConfirm: [{
      type: Input
    }],
    nzIcon: [{
      type: Input
    }],
    nzCondition: [{
      type: Input
    }],
    nzPopconfirmShowArrow: [{
      type: Input
    }],
    nzPopconfirmBackdrop: [{
      type: Input
    }],
    nzAutofocus: [{
      type: Input
    }],
    visibleChange: [{
      type: Output,
      args: ["nzPopconfirmVisibleChange"]
    }],
    nzOnCancel: [{
      type: Output
    }],
    nzOnConfirm: [{
      type: Output
    }]
  });
})();
var _NzPopconfirmComponent = class _NzPopconfirmComponent extends NzToolTipComponent {
  constructor(cdr, elementRef, directionality, document2, noAnimation) {
    super(cdr, directionality, noAnimation);
    this.elementRef = elementRef;
    this.nzCondition = false;
    this.nzPopconfirmShowArrow = true;
    this.nzOkType = "primary";
    this.nzOkDanger = false;
    this.nzOkDisabled = false;
    this.nzAutoFocus = null;
    this.nzBeforeConfirm = null;
    this.nzOnCancel = new Subject();
    this.nzOnConfirm = new Subject();
    this._trigger = "click";
    this.elementFocusedBeforeModalWasOpened = null;
    this._prefix = "ant-popover";
    this.confirmLoading = false;
    this.document = document2;
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.nzOnCancel.complete();
    this.nzOnConfirm.complete();
  }
  /**
   * @override
   */
  show() {
    if (!this.nzCondition) {
      this.capturePreviouslyFocusedElement();
      super.show();
    } else {
      this.onConfirm();
    }
  }
  hide() {
    super.hide();
    this.restoreFocus();
  }
  handleConfirm() {
    this.nzOnConfirm.next();
    super.hide();
  }
  onCancel() {
    this.nzOnCancel.next();
    super.hide();
  }
  onConfirm() {
    if (this.nzBeforeConfirm) {
      const observable = wrapIntoObservable(this.nzBeforeConfirm()).pipe(first());
      this.confirmLoading = true;
      observable.pipe(finalize(() => {
        this.confirmLoading = false;
        this.cdr.markForCheck();
      }), takeUntil(this.nzVisibleChange), takeUntil(this.destroy$)).subscribe((value) => {
        if (value) {
          this.handleConfirm();
        }
      });
    } else {
      this.handleConfirm();
    }
  }
  capturePreviouslyFocusedElement() {
    if (this.document) {
      this.elementFocusedBeforeModalWasOpened = this.document.activeElement;
    }
  }
  restoreFocus() {
    const toFocus = this.elementFocusedBeforeModalWasOpened;
    if (toFocus && typeof toFocus.focus === "function") {
      const activeElement = this.document.activeElement;
      const element = this.elementRef.nativeElement;
      if (!activeElement || activeElement === this.document.body || activeElement === element || element.contains(activeElement)) {
        toFocus.focus();
      }
    }
  }
};
_NzPopconfirmComponent.\u0275fac = function NzPopconfirmComponent_Factory(t) {
  return new (t || _NzPopconfirmComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(DOCUMENT, 8), \u0275\u0275directiveInject(NzNoAnimationDirective, 9));
};
_NzPopconfirmComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzPopconfirmComponent,
  selectors: [["nz-popconfirm"]],
  viewQuery: function NzPopconfirmComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c011, 5, ElementRef);
      \u0275\u0275viewQuery(_c17, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.okBtn = _t);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.cancelBtn = _t);
    }
  },
  exportAs: ["nzPopconfirmComponent"],
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 2,
  vars: 6,
  consts: [["overlay", "cdkConnectedOverlay"], ["cancelBtn", ""], ["okBtn", ""], ["cdkConnectedOverlay", "", "nzConnectedOverlay", "", 3, "overlayOutsideClick", "detach", "positionChange", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayOpen", "cdkConnectedOverlayPush", "nzArrowPointAtCenter"], ["cdkTrapFocus", "", 1, "ant-popover", 3, "cdkTrapFocusAutoCapture", "ngClass", "ngStyle", "nzNoAnimation"], [1, "ant-popover-content"], [1, "ant-popover-arrow"], [1, "ant-popover-inner"], [1, "ant-popover-inner-content"], [1, "ant-popover-message"], [4, "nzStringTemplateOutlet"], [1, "ant-popover-buttons"], ["nz-button", "", 3, "click", "nzSize"], ["nz-button", "", 3, "click", "nzSize", "nzType", "nzDanger", "nzLoading", "disabled"], [1, "ant-popover-arrow-content"], [1, "ant-popover-message-title"], [1, "ant-popover-message-icon"], ["nz-icon", "", "nzTheme", "fill", 3, "nzType"]],
  template: function NzPopconfirmComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275template(0, NzPopconfirmComponent_ng_template_0_Template, 17, 20, "ng-template", 3, 0, \u0275\u0275templateRefExtractor);
      \u0275\u0275listener("overlayOutsideClick", function NzPopconfirmComponent_Template_ng_template_overlayOutsideClick_0_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onClickOutside($event));
      })("detach", function NzPopconfirmComponent_Template_ng_template_detach_0_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.hide());
      })("positionChange", function NzPopconfirmComponent_Template_ng_template_positionChange_0_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onPositionChange($event));
      });
    }
    if (rf & 2) {
      \u0275\u0275property("cdkConnectedOverlayHasBackdrop", ctx.nzBackdrop)("cdkConnectedOverlayOrigin", ctx.origin)("cdkConnectedOverlayPositions", ctx._positions)("cdkConnectedOverlayOpen", ctx._visible)("cdkConnectedOverlayPush", ctx.cdkConnectedOverlayPush)("nzArrowPointAtCenter", ctx.nzArrowPointAtCenter);
    }
  },
  dependencies: [OverlayModule, CdkConnectedOverlay, NzOverlayModule, NzConnectedOverlayDirective, A11yModule, CdkTrapFocus, NgClass, NgStyle, NzNoAnimationDirective, NzOutletModule, NzStringTemplateOutletDirective, NzIconModule, NzIconDirective, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective, NzI18nModule, NzI18nPipe],
  encapsulation: 2,
  data: {
    animation: [zoomBigMotion]
  },
  changeDetection: 0
});
var NzPopconfirmComponent = _NzPopconfirmComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPopconfirmComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      selector: "nz-popconfirm",
      exportAs: "nzPopconfirmComponent",
      preserveWhitespaces: false,
      animations: [zoomBigMotion],
      template: `
    <ng-template
      #overlay="cdkConnectedOverlay"
      cdkConnectedOverlay
      nzConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="nzBackdrop"
      [cdkConnectedOverlayOrigin]="origin"
      (overlayOutsideClick)="onClickOutside($event)"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOpen]="_visible"
      [cdkConnectedOverlayPush]="cdkConnectedOverlayPush"
      [nzArrowPointAtCenter]="nzArrowPointAtCenter"
    >
      <div
        cdkTrapFocus
        [cdkTrapFocusAutoCapture]="nzAutoFocus !== null"
        class="ant-popover"
        [ngClass]="_classMap"
        [class.ant-popover-rtl]="dir === 'rtl'"
        [ngStyle]="nzOverlayStyle"
        [@.disabled]="!!noAnimation?.nzNoAnimation"
        [nzNoAnimation]="noAnimation?.nzNoAnimation"
        [@zoomBigMotion]="'active'"
      >
        <div class="ant-popover-content">
          @if (nzPopconfirmShowArrow) {
            <div class="ant-popover-arrow">
              <span class="ant-popover-arrow-content"></span>
            </div>
          }
          <div class="ant-popover-inner">
            <div>
              <div class="ant-popover-inner-content">
                <div class="ant-popover-message">
                  <ng-container *nzStringTemplateOutlet="nzTitle">
                    <ng-container *nzStringTemplateOutlet="nzIcon; let icon">
                      <span class="ant-popover-message-icon">
                        <span nz-icon [nzType]="icon || 'exclamation-circle'" nzTheme="fill"></span>
                      </span>
                    </ng-container>
                    <div class="ant-popover-message-title">{{ nzTitle }}</div>
                  </ng-container>
                </div>
                <div class="ant-popover-buttons">
                  <button
                    nz-button
                    #cancelBtn
                    [nzSize]="'small'"
                    (click)="onCancel()"
                    [attr.cdkFocusInitial]="nzAutoFocus === 'cancel' || null"
                  >
                    @if (nzCancelText) {
                      {{ nzCancelText }}
                    } @else {
                      {{ 'Modal.cancelText' | nzI18n }}
                    }
                  </button>
                  <button
                    nz-button
                    #okBtn
                    [nzSize]="'small'"
                    [nzType]="nzOkType !== 'danger' ? nzOkType : 'primary'"
                    [nzDanger]="nzOkDanger || nzOkType === 'danger'"
                    [nzLoading]="confirmLoading"
                    [disabled]="nzOkDisabled"
                    (click)="onConfirm()"
                    [attr.cdkFocusInitial]="nzAutoFocus === 'ok' || null"
                  >
                    @if (nzOkText) {
                      {{ nzOkText }}
                    } @else {
                      {{ 'Modal.okText' | nzI18n }}
                    }
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ng-template>
  `,
      imports: [OverlayModule, NzOverlayModule, A11yModule, NgClass, NgStyle, NzNoAnimationDirective, NzOutletModule, NzIconModule, NzButtonModule, NzI18nModule],
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: NzNoAnimationDirective,
    decorators: [{
      type: Host
    }, {
      type: Optional
    }]
  }], {
    okBtn: [{
      type: ViewChildren,
      args: ["okBtn", {
        read: ElementRef
      }]
    }],
    cancelBtn: [{
      type: ViewChildren,
      args: ["cancelBtn", {
        read: ElementRef
      }]
    }]
  });
})();
var _NzPopconfirmModule = class _NzPopconfirmModule {
};
_NzPopconfirmModule.\u0275fac = function NzPopconfirmModule_Factory(t) {
  return new (t || _NzPopconfirmModule)();
};
_NzPopconfirmModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzPopconfirmModule
});
_NzPopconfirmModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzPopconfirmComponent]
});
var NzPopconfirmModule = _NzPopconfirmModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzPopconfirmModule, [{
    type: NgModule,
    args: [{
      imports: [NzPopconfirmComponent, NzPopconfirmDirective],
      exports: [NzPopconfirmComponent, NzPopconfirmDirective]
    }]
  }], null, null);
})();

// node_modules/@delon/abc/fesm2022/st.mjs
var _c012 = (a0, a1, a2) => ({
  $implicit: a0,
  col: a1,
  handle: a2
});
function STFilterComponent_Case_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 5)(1, "input", 6);
    \u0275\u0275twoWayListener("ngModelChange", function STFilterComponent_Case_5_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.f.menus[0].value, $event) || (ctx_r2.f.menus[0].value = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function STFilterComponent_Case_5_Template_input_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.n.emit($event));
    })("keyup.enter", function STFilterComponent_Case_5_Template_input_keyup_enter_1_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.confirm());
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.f.menus[0].value);
    \u0275\u0275attribute("placeholder", ctx_r2.f.placeholder);
  }
}
function STFilterComponent_Case_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 7)(1, "nz-input-number", 8);
    \u0275\u0275twoWayListener("ngModelChange", function STFilterComponent_Case_6_Template_nz_input_number_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r2.f.menus[0].value, $event) || (ctx_r2.f.menus[0].value = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function STFilterComponent_Case_6_Template_nz_input_number_ngModelChange_1_listener($event) {
      \u0275\u0275restoreView(_r4);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.n.emit($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.f.menus[0].value);
    \u0275\u0275property("nzMin", ctx_r2.f.number.min)("nzMax", ctx_r2.f.number.max)("nzStep", ctx_r2.f.number.step)("nzPrecision", ctx_r2.f.number.precision)("nzPlaceHolder", ctx_r2.f.placeholder);
  }
}
function STFilterComponent_Case_7_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-range-picker", 11);
    \u0275\u0275twoWayListener("ngModelChange", function STFilterComponent_Case_7_Conditional_1_Template_nz_range_picker_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r2.f.menus[0].value, $event) || (ctx_r2.f.menus[0].value = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function STFilterComponent_Case_7_Conditional_1_Template_nz_range_picker_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.n.emit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzMode", ctx_r2.f.date.mode);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.f.menus[0].value);
    \u0275\u0275property("nzShowNow", ctx_r2.f.date.showNow)("nzShowToday", ctx_r2.f.date.showToday)("nzDisabledDate", ctx_r2.f.date.disabledDate)("nzDisabledTime", ctx_r2.f.date.disabledTime);
  }
}
function STFilterComponent_Case_7_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-date-picker", 11);
    \u0275\u0275twoWayListener("ngModelChange", function STFilterComponent_Case_7_Conditional_2_Template_nz_date_picker_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext(2);
      \u0275\u0275twoWayBindingSet(ctx_r2.f.menus[0].value, $event) || (ctx_r2.f.menus[0].value = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function STFilterComponent_Case_7_Conditional_2_Template_nz_date_picker_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r6);
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.n.emit($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzMode", ctx_r2.f.date.mode);
    \u0275\u0275twoWayProperty("ngModel", ctx_r2.f.menus[0].value);
    \u0275\u0275property("nzShowNow", ctx_r2.f.date.showNow)("nzShowToday", ctx_r2.f.date.showToday)("nzDisabledDate", ctx_r2.f.date.disabledDate)("nzDisabledTime", ctx_r2.f.date.disabledTime);
  }
}
function STFilterComponent_Case_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9);
    \u0275\u0275template(1, STFilterComponent_Case_7_Conditional_1_Template, 1, 6, "nz-range-picker", 10)(2, STFilterComponent_Case_7_Conditional_2_Template, 1, 6);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r2.f.date.range ? 1 : 2);
  }
}
function STFilterComponent_Case_8_ng_template_1_Template(rf, ctx) {
}
function STFilterComponent_Case_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 12);
    \u0275\u0275template(1, STFilterComponent_Case_8_ng_template_1_Template, 0, 0, "ng-template", 13);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r2.f.custom)("ngTemplateOutletContext", \u0275\u0275pureFunction3(2, _c012, ctx_r2.f, ctx_r2.col, ctx_r2));
  }
}
function STFilterComponent_Case_9_For_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 17);
    \u0275\u0275twoWayListener("ngModelChange", function STFilterComponent_Case_9_For_2_Conditional_1_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r7);
      const filter_r8 = \u0275\u0275nextContext().$implicit;
      \u0275\u0275twoWayBindingSet(filter_r8.checked, $event) || (filter_r8.checked = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function STFilterComponent_Case_9_For_2_Conditional_1_Template_label_ngModelChange_0_listener() {
      \u0275\u0275restoreView(_r7);
      const ctx_r2 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r2.checkboxChange());
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const filter_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275twoWayProperty("ngModel", filter_r8.checked);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", filter_r8.text, " ");
  }
}
function STFilterComponent_Case_9_For_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 18);
    \u0275\u0275listener("ngModelChange", function STFilterComponent_Case_9_For_2_Conditional_2_Template_label_ngModelChange_0_listener() {
      \u0275\u0275restoreView(_r9);
      const filter_r8 = \u0275\u0275nextContext().$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.radioChange(filter_r8));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const filter_r8 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngModel", filter_r8.checked);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", filter_r8.text, " ");
  }
}
function STFilterComponent_Case_9_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "li", 15);
    \u0275\u0275template(1, STFilterComponent_Case_9_For_2_Conditional_1_Template, 2, 2, "label", 16)(2, STFilterComponent_Case_9_For_2_Conditional_2_Template, 2, 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r2.f.multiple ? 1 : 2);
  }
}
function STFilterComponent_Case_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "ul", 14);
    \u0275\u0275repeaterCreate(1, STFilterComponent_Case_9_For_2_Template, 3, 1, "li", 15, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r2.f.menus);
  }
}
function STFilterComponent_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 4)(1, "a", 19);
    \u0275\u0275listener("click", function STFilterComponent_Conditional_10_Template_a_click_1_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.confirm());
    });
    \u0275\u0275elementStart(2, "span");
    \u0275\u0275text(3);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(4, "a", 20);
    \u0275\u0275listener("click", function STFilterComponent_Conditional_10_Template_a_click_4_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r2 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r2.reset());
    });
    \u0275\u0275elementStart(5, "span");
    \u0275\u0275text(6);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.f.confirmText || ctx_r2.locale.filterConfirm);
    \u0275\u0275advance(3);
    \u0275\u0275textInterpolate(ctx_r2.f.clearText || ctx_r2.locale.filterReset);
  }
}
var _c18 = ["table"];
var _c27 = ["contextmenuTpl"];
var _c35 = (a0, a1) => ({
  $implicit: a0,
  index: a1
});
var _c45 = () => ({
  $implicit: false
});
var _c53 = () => ({
  $implicit: true
});
var _c63 = (a0) => ({
  $implicit: a0
});
function STComponent_ng_template_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "small", 13);
  }
  if (rf & 2) {
    const i_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("innerHTML", i_r2.optional, \u0275\u0275sanitizeHtml);
  }
}
function STComponent_ng_template_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 14);
  }
  if (rf & 2) {
    const i_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("nzTooltipTitle", i_r2.optionalHelp);
  }
}
function STComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 12);
    \u0275\u0275template(1, STComponent_ng_template_0_Conditional_1_Template, 1, 1, "small", 13)(2, STComponent_ng_template_0_Conditional_2_Template, 1, 1, "i", 14);
  }
  if (rf & 2) {
    const i_r2 = ctx.$implicit;
    \u0275\u0275property("innerHTML", i_r2._text, \u0275\u0275sanitizeHtml);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, i_r2.optional ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(2, i_r2.optionalHelp ? 2 : -1);
  }
}
function STComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 15);
    \u0275\u0275twoWayListener("ngModelChange", function STComponent_ng_template_2_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r3 = \u0275\u0275nextContext();
      \u0275\u0275twoWayBindingSet(ctx_r3._allChecked, $event) || (ctx_r3._allChecked = $event);
      return \u0275\u0275resetView($event);
    });
    \u0275\u0275listener("ngModelChange", function STComponent_ng_template_2_Template_label_ngModelChange_0_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.checkAll());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const custom_r5 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275classProp("ant-table-selection-select-all-custom", custom_r5);
    \u0275\u0275property("nzDisabled", ctx_r3._allCheckedDisabled);
    \u0275\u0275twoWayProperty("ngModel", ctx_r3._allChecked);
    \u0275\u0275property("nzIndeterminate", ctx_r3._indeterminate);
  }
}
function STComponent_Conditional_6_For_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "th", 16);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275property("rowSpan", ctx_r3._headers.length);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-resize-handle", 22);
    \u0275\u0275listener("click", function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_1_Template_nz_resize_handle_click_0_listener($event) {
      \u0275\u0275restoreView(_r8);
      const ctx_r3 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r3._stopPropagation($event));
    });
    \u0275\u0275element(1, "i");
    \u0275\u0275elementEnd();
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_2_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_2_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const _c_r7 = \u0275\u0275nextContext().let;
    const ctx_r8 = \u0275\u0275nextContext();
    const h_r10 = ctx_r8.$implicit;
    const index_r11 = ctx_r8.$index;
    \u0275\u0275property("ngTemplateOutlet", _c_r7.__renderTitle)("ngTemplateOutletContext", \u0275\u0275pureFunction2(2, _c35, h_r10.column, index_r11));
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_0_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_0_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    \u0275\u0275nextContext(7);
    const chkAllTpl_r12 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", chkAllTpl_r12)("ngTemplateOutletContext", \u0275\u0275pureFunction0(2, _c45));
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_ng_template_1_Template(rf, ctx) {
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 24)(1, "div", 27);
    \u0275\u0275element(2, "i", 28);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const selectionMenu_r13 = \u0275\u0275reference(4);
    \u0275\u0275advance();
    \u0275\u0275property("nzDropdownMenu", selectionMenu_r13);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_For_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 29);
    \u0275\u0275listener("click", function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_For_7_Template_li_click_0_listener() {
      const rw_r15 = \u0275\u0275restoreView(_r14).$implicit;
      const ctx_r3 = \u0275\u0275nextContext(8);
      return \u0275\u0275resetView(ctx_r3._rowSelection(rw_r15));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const rw_r15 = ctx.$implicit;
    \u0275\u0275property("innerHTML", rw_r15.text, \u0275\u0275sanitizeHtml);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 23);
    \u0275\u0275template(1, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_ng_template_1_Template, 0, 0, "ng-template", 9)(2, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_Conditional_2_Template, 3, 1, "div", 24);
    \u0275\u0275elementStart(3, "nz-dropdown-menu", null, 6)(5, "ul", 25);
    \u0275\u0275repeaterCreate(6, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_For_7_Template, 1, 1, "li", 26, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const _c_r7 = \u0275\u0275nextContext(3).let;
    \u0275\u0275nextContext(4);
    const chkAllTpl_r12 = \u0275\u0275reference(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", chkAllTpl_r12)("ngTemplateOutletContext", \u0275\u0275pureFunction0(3, _c53));
    \u0275\u0275advance();
    \u0275\u0275conditional(2, _c_r7.selections.length ? 2 : -1);
    \u0275\u0275advance(4);
    \u0275\u0275repeater(_c_r7.selections);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_0_Template, 1, 3, null, 9)(1, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Conditional_1_Template, 8, 4);
  }
  if (rf & 2) {
    const _c_r7 = \u0275\u0275nextContext(2).let;
    \u0275\u0275conditional(0, _c_r7.selections.length === 0 ? 0 : 1);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_1_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_1_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const _c_r7 = \u0275\u0275nextContext(2).let;
    \u0275\u0275nextContext(4);
    const titleTpl_r16 = \u0275\u0275reference(1);
    \u0275\u0275property("ngTemplateOutlet", titleTpl_r16)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c63, _c_r7.title));
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_0_Template, 2, 1)(1, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Case_1_Template, 1, 4);
  }
  if (rf & 2) {
    let tmp_30_0;
    const _c_r7 = \u0275\u0275nextContext().let;
    \u0275\u0275conditional(0, (tmp_30_0 = _c_r7.type) === "checkbox" ? 0 : 1);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "st-filter", 30);
    \u0275\u0275listener("n", function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_4_Template_st_filter_n_0_listener($event) {
      \u0275\u0275restoreView(_r17);
      const ctx_r3 = \u0275\u0275nextContext(5);
      return \u0275\u0275resetView(ctx_r3.handleFilterNotify($event));
    })("handle", function STComponent_Conditional_6_For_2_For_3_th_0_Conditional_4_Template_st_filter_handle_0_listener($event) {
      \u0275\u0275restoreView(_r17);
      const _c_r7 = \u0275\u0275nextContext().let;
      const ctx_r3 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r3._handleFilter(_c_r7, $event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const _c_r7 = \u0275\u0275nextContext().let;
    const h_r10 = \u0275\u0275nextContext().$implicit;
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275property("col", h_r10.column)("f", _c_r7.filter)("locale", ctx_r3.locale);
  }
}
function STComponent_Conditional_6_For_2_For_3_th_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "th", 19);
    \u0275\u0275listener("nzSortOrderChange", function STComponent_Conditional_6_For_2_For_3_th_0_Template_th_nzSortOrderChange_0_listener($event) {
      const _c_r7 = \u0275\u0275restoreView(_r6).let;
      const ctx_r3 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r3.sort(_c_r7, $event));
    })("nzResizeEnd", function STComponent_Conditional_6_For_2_For_3_th_0_Template_th_nzResizeEnd_0_listener($event) {
      const _c_r7 = \u0275\u0275restoreView(_r6).let;
      const ctx_r3 = \u0275\u0275nextContext(4);
      return \u0275\u0275resetView(ctx_r3.colResize($event, _c_r7));
    });
    \u0275\u0275template(1, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_1_Template, 2, 0, "nz-resize-handle", 20)(2, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_2_Template, 1, 5, null, 9)(3, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_3_Template, 2, 1)(4, STComponent_Conditional_6_For_2_For_3_th_0_Conditional_4_Template, 1, 3, "st-filter", 21);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const _c_r7 = ctx.let;
    const ctx_r8 = \u0275\u0275nextContext();
    const h_r10 = ctx_r8.$implicit;
    const index_r11 = ctx_r8.$index;
    const \u0275index_26_r18 = ctx_r8.$index;
    const \u0275$count_26_r19 = ctx_r8.$count;
    \u0275\u0275classProp("st__has-filter", _c_r7.filter);
    \u0275\u0275property("colSpan", h_r10.colSpan)("rowSpan", h_r10.rowSpan)("nzWidth", _c_r7.width)("nzLeft", _c_r7._left)("nzRight", _c_r7._right)("ngClass", _c_r7._className)("nzShowSort", _c_r7._sort.enabled)("nzSortOrder", _c_r7._sort.default)("nzCustomFilter", !!_c_r7.filter)("nzDisabled", \u0275index_26_r18 === \u0275$count_26_r19 - 1 || _c_r7.resizable.disabled)("nzMaxWidth", _c_r7.resizable.maxWidth)("nzMinWidth", _c_r7.resizable.minWidth)("nzBounds", _c_r7.resizable.bounds)("nzPreview", _c_r7.resizable.preview);
    \u0275\u0275attribute("data-col", _c_r7.indexKey)("data-col-index", index_r11);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, !(\u0275index_26_r18 === \u0275$count_26_r19 - 1) && !_c_r7.resizable.disabled ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(2, _c_r7.__renderTitle ? 2 : 3);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(4, _c_r7.filter ? 4 : -1);
  }
}
function STComponent_Conditional_6_For_2_For_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_6_For_2_For_3_th_0_Template, 5, 21, "th", 18);
  }
  if (rf & 2) {
    const h_r10 = ctx.$implicit;
    \u0275\u0275property("let", h_r10.column);
  }
}
function STComponent_Conditional_6_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr");
    \u0275\u0275template(1, STComponent_Conditional_6_For_2_Conditional_1_Template, 1, 1, "th", 16);
    \u0275\u0275repeaterCreate(2, STComponent_Conditional_6_For_2_For_3_Template, 1, 1, "th", 17, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const row_r20 = ctx.$implicit;
    const \u0275$index_20_r21 = ctx.$index;
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, \u0275$index_20_r21 === 0 && ctx_r3.expand ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(row_r20);
  }
}
function STComponent_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "thead");
    \u0275\u0275repeaterCreate(1, STComponent_Conditional_6_For_2_Template, 4, 1, "tr", null, \u0275\u0275repeaterTrackByIdentity);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r3._headers);
  }
}
function STComponent_Conditional_8_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_8_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("ngTemplateOutlet", ctx_r3.bodyHeader)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c63, ctx_r3._statistical));
  }
}
function STComponent_ng_template_9_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r27 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 34);
    \u0275\u0275listener("nzExpandChange", function STComponent_ng_template_9_Conditional_1_Template_td_nzExpandChange_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const i_r24 = \u0275\u0275nextContext().$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3._expandChange(i_r24, $event));
    })("click", function STComponent_ng_template_9_Conditional_1_Template_td_click_0_listener($event) {
      \u0275\u0275restoreView(_r27);
      const ctx_r3 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r3._stopPropagation($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r24 = \u0275\u0275nextContext().$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("nzShowExpand", ctx_r3.expand && i_r24.showExpand !== false)("nzExpand", i_r24.expand);
  }
}
function STComponent_ng_template_9_For_3_Conditional_0_Conditional_1_ng_template_1_Template(rf, ctx) {
}
function STComponent_ng_template_9_For_3_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 36);
    \u0275\u0275template(1, STComponent_ng_template_9_For_3_Conditional_0_Conditional_1_ng_template_1_Template, 0, 0, "ng-template", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const c_r29 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275nextContext(2);
    const titleTpl_r16 = \u0275\u0275reference(1);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", titleTpl_r16)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c63, c_r29.title));
  }
}
function STComponent_ng_template_9_For_3_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r28 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "td", 35);
    \u0275\u0275template(1, STComponent_ng_template_9_For_3_Conditional_0_Conditional_1_Template, 2, 4, "span", 36);
    \u0275\u0275elementStart(2, "st-td", 37);
    \u0275\u0275listener("n", function STComponent_ng_template_9_For_3_Conditional_0_Template_st_td_n_2_listener($event) {
      \u0275\u0275restoreView(_r28);
      const ctx_r3 = \u0275\u0275nextContext(3);
      return \u0275\u0275resetView(ctx_r3._handleTd($event));
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r29 = \u0275\u0275nextContext();
    const c_r29 = ctx_r29.$implicit;
    const cIdx_r31 = ctx_r29.$index;
    const ctx_r31 = \u0275\u0275nextContext();
    const i_r24 = ctx_r31.$implicit;
    const index_r25 = ctx_r31.index;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("nzLeft", !!c_r29._left)("nzRight", !!c_r29._right)("ngClass", c_r29._className);
    \u0275\u0275attribute("data-col-index", cIdx_r31)("colspan", (i_r24._values[cIdx_r31].props == null ? null : i_r24._values[cIdx_r31].props.colSpan) === 1 ? null : i_r24._values[cIdx_r31].props == null ? null : i_r24._values[cIdx_r31].props.colSpan)("rowspan", (i_r24._values[cIdx_r31].props == null ? null : i_r24._values[cIdx_r31].props.rowSpan) === 1 ? null : i_r24._values[cIdx_r31].props == null ? null : i_r24._values[cIdx_r31].props.rowSpan);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r3.responsive ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("data", ctx_r3._data)("i", i_r24)("index", index_r25)("c", c_r29)("cIdx", cIdx_r31);
  }
}
function STComponent_ng_template_9_For_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_ng_template_9_For_3_Conditional_0_Template, 3, 12, "td", 35);
  }
  if (rf & 2) {
    const cIdx_r31 = ctx.$index;
    const i_r24 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275conditional(0, (i_r24._values[cIdx_r31].props == null ? null : i_r24._values[cIdx_r31].props.colSpan) > 0 && (i_r24._values[cIdx_r31].props == null ? null : i_r24._values[cIdx_r31].props.rowSpan) > 0 ? 0 : -1);
  }
}
function STComponent_ng_template_9_ng_template_5_Template(rf, ctx) {
}
function STComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "tr", 31);
    \u0275\u0275listener("click", function STComponent_ng_template_9_Template_tr_click_0_listener($event) {
      const ctx_r22 = \u0275\u0275restoreView(_r22);
      const i_r24 = ctx_r22.$implicit;
      const index_r25 = ctx_r22.index;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3._rowClick($event, i_r24, index_r25, false));
    })("dblclick", function STComponent_ng_template_9_Template_tr_dblclick_0_listener($event) {
      const ctx_r25 = \u0275\u0275restoreView(_r22);
      const i_r24 = ctx_r25.$implicit;
      const index_r25 = ctx_r25.index;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3._rowClick($event, i_r24, index_r25, true));
    });
    \u0275\u0275template(1, STComponent_ng_template_9_Conditional_1_Template, 1, 2, "td", 32);
    \u0275\u0275repeaterCreate(2, STComponent_ng_template_9_For_3_Template, 1, 1, null, null, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "tr", 33);
    \u0275\u0275template(5, STComponent_ng_template_9_ng_template_5_Template, 0, 0, "ng-template", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r24 = ctx.$implicit;
    const index_r25 = ctx.index;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", i_r24._rowClassName);
    \u0275\u0275attribute("data-index", index_r25);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r3.expand ? 1 : -1);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r3._columns);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzExpand", i_r24.expand);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r3.expand)("ngTemplateOutletContext", \u0275\u0275pureFunction2(6, _c35, i_r24, index_r25));
  }
}
function STComponent_Conditional_11_ng_template_0_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_11_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_11_ng_template_0_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const i_r33 = ctx.$implicit;
    const index_r34 = ctx.index;
    \u0275\u0275nextContext(2);
    const bodyTpl_r35 = \u0275\u0275reference(10);
    \u0275\u0275property("ngTemplateOutlet", bodyTpl_r35)("ngTemplateOutletContext", \u0275\u0275pureFunction2(2, _c35, i_r33, index_r34));
  }
}
function STComponent_Conditional_11_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_11_ng_template_0_Template, 1, 5, "ng-template", 10);
  }
}
function STComponent_Conditional_12_For_1_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_12_For_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_12_For_1_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const i_r36 = ctx.$implicit;
    const $index_r37 = ctx.$index;
    \u0275\u0275nextContext(2);
    const bodyTpl_r35 = \u0275\u0275reference(10);
    \u0275\u0275property("ngTemplateOutlet", bodyTpl_r35)("ngTemplateOutletContext", \u0275\u0275pureFunction2(2, _c35, i_r36, $index_r37));
  }
}
function STComponent_Conditional_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, STComponent_Conditional_12_For_1_Template, 1, 5, null, 9, \u0275\u0275componentInstance().trackBy, true);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275repeater(ctx_r3._data);
  }
}
function STComponent_Conditional_13_ng_template_0_Template(rf, ctx) {
}
function STComponent_Conditional_13_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_Conditional_13_ng_template_0_Template, 0, 0, "ng-template", 9);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("ngTemplateOutlet", ctx_r3.body)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c63, ctx_r3._statistical));
  }
}
function STComponent_ng_template_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const range_r38 = ctx.range;
    const total_r39 = ctx.$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275textInterpolate(ctx_r3.renderTotal(total_r39, range_r38));
  }
}
function STComponent_For_20_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r40 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 29);
    \u0275\u0275listener("click", function STComponent_For_20_Conditional_0_Template_li_click_0_listener() {
      \u0275\u0275restoreView(_r40);
      const i_r41 = \u0275\u0275nextContext().$implicit;
      return \u0275\u0275resetView(i_r41.fn(i_r41));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r41 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("innerHTML", i_r41.text, \u0275\u0275sanitizeHtml);
  }
}
function STComponent_For_20_Conditional_1_For_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r42 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "li", 29);
    \u0275\u0275listener("click", function STComponent_For_20_Conditional_1_For_3_Template_li_click_0_listener() {
      const ci_r43 = \u0275\u0275restoreView(_r42).$implicit;
      return \u0275\u0275resetView(ci_r43.fn(ci_r43));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ci_r43 = ctx.$implicit;
    \u0275\u0275property("innerHTML", ci_r43.text, \u0275\u0275sanitizeHtml);
  }
}
function STComponent_For_20_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "li", 38)(1, "ul");
    \u0275\u0275repeaterCreate(2, STComponent_For_20_Conditional_1_For_3_Template, 1, 1, "li", 26, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const i_r41 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("nzTitle", i_r41.text);
    \u0275\u0275advance(2);
    \u0275\u0275repeater(i_r41.children);
  }
}
function STComponent_For_20_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STComponent_For_20_Conditional_0_Template, 1, 1, "li", 26)(1, STComponent_For_20_Conditional_1_Template, 4, 1);
  }
  if (rf & 2) {
    const i_r41 = ctx.$implicit;
    \u0275\u0275conditional(0, i_r41.children.length === 0 ? 0 : 1);
  }
}
var _c72 = (a0) => ({
  "pl-xs": a0
});
var _c82 = (a0, a1, a2) => ({
  $implicit: a0,
  index: a1,
  column: a2
});
var _c92 = (a0) => ({
  $implicit: a0,
  child: true
});
var _c102 = (a0) => ({
  $implicit: a0,
  child: false
});
function STTdComponent_ng_template_0_Conditional_0_ng_template_1_Template(rf, ctx) {
}
function STTdComponent_ng_template_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 6);
    \u0275\u0275template(1, STTdComponent_ng_template_0_Conditional_0_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const i_r2 = ctx_r0.$implicit;
    const child_r3 = ctx_r0.child;
    \u0275\u0275nextContext();
    const btnItemTpl_r4 = \u0275\u0275reference(3);
    \u0275\u0275classProp("d-block", child_r3)("width-100", child_r3);
    \u0275\u0275property("nzTooltipTitle", i_r2.tooltip);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", btnItemTpl_r4)("ngTemplateOutletContext", \u0275\u0275pureFunction1(7, _c63, i_r2));
  }
}
function STTdComponent_ng_template_0_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function STTdComponent_ng_template_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_ng_template_0_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    const i_r2 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275nextContext();
    const btnItemTpl_r4 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", btnItemTpl_r4)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c63, i_r2));
  }
}
function STTdComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_ng_template_0_Conditional_0_Template, 2, 9, "span", 5)(1, STTdComponent_ng_template_0_Conditional_1_Template, 1, 4);
  }
  if (rf & 2) {
    const i_r2 = ctx.$implicit;
    \u0275\u0275conditional(0, i_r2.tooltip ? 0 : 1);
  }
}
function STTdComponent_ng_template_2_Conditional_0_ng_template_1_Template(rf, ctx) {
}
function STTdComponent_ng_template_2_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 8);
    \u0275\u0275listener("nzOnConfirm", function STTdComponent_ng_template_2_Conditional_0_Template_a_nzOnConfirm_0_listener() {
      \u0275\u0275restoreView(_r5);
      const i_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r6 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r6._btn(i_r6));
    })("click", function STTdComponent_ng_template_2_Conditional_0_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r5);
      const ctx_r6 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r6._stopPropagation($event));
    });
    \u0275\u0275template(1, STTdComponent_ng_template_2_Conditional_0_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275nextContext();
    const btnTextTpl_r8 = \u0275\u0275reference(5);
    \u0275\u0275property("nzPopconfirmTitle", i_r6.pop.title)("nzIcon", i_r6.pop.icon)("nzCondition", i_r6.pop.condition(i_r6))("nzCancelText", i_r6.pop.cancelText)("nzOkText", i_r6.pop.okText)("nzOkType", i_r6.pop.okType)("ngClass", i_r6._className);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", btnTextTpl_r8)("ngTemplateOutletContext", \u0275\u0275pureFunction1(9, _c63, i_r6));
  }
}
function STTdComponent_ng_template_2_Conditional_1_ng_template_1_Template(rf, ctx) {
}
function STTdComponent_ng_template_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 9);
    \u0275\u0275listener("click", function STTdComponent_ng_template_2_Conditional_1_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const i_r6 = \u0275\u0275nextContext().$implicit;
      const ctx_r6 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r6._btn(i_r6, $event));
    });
    \u0275\u0275template(1, STTdComponent_ng_template_2_Conditional_1_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275nextContext();
    const btnTextTpl_r8 = \u0275\u0275reference(5);
    \u0275\u0275property("ngClass", i_r6._className);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", btnTextTpl_r8)("ngTemplateOutletContext", \u0275\u0275pureFunction1(3, _c63, i_r6));
  }
}
function STTdComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_ng_template_2_Conditional_0_Template, 2, 11, "a", 7)(1, STTdComponent_ng_template_2_Conditional_1_Template, 2, 5);
  }
  if (rf & 2) {
    const i_r6 = ctx.$implicit;
    \u0275\u0275conditional(0, i_r6.pop ? 0 : 1);
  }
}
function STTdComponent_ng_template_4_Conditional_0_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 11);
  }
  if (rf & 2) {
    const i_r10 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("nzIconfont", i_r10._icon.iconfont);
  }
}
function STTdComponent_ng_template_4_Conditional_0_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 12);
  }
  if (rf & 2) {
    const i_r10 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("nzType", i_r10._icon.type)("nzTheme", i_r10._icon.theme)("nzSpin", i_r10._icon.spin)("nzTwotoneColor", i_r10._icon.twoToneColor);
  }
}
function STTdComponent_ng_template_4_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_ng_template_4_Conditional_0_Conditional_0_Template, 1, 1, "i", 11)(1, STTdComponent_ng_template_4_Conditional_0_Conditional_1_Template, 1, 4);
  }
  if (rf & 2) {
    const i_r10 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275conditional(0, i_r10._icon.iconfont ? 0 : 1);
  }
}
function STTdComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_ng_template_4_Conditional_0_Template, 2, 1);
    \u0275\u0275element(1, "span", 10);
  }
  if (rf & 2) {
    const i_r10 = ctx.$implicit;
    \u0275\u0275conditional(0, i_r10._icon ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", i_r10._text, \u0275\u0275sanitizeHtml)("ngClass", \u0275\u0275pureFunction1(3, _c72, i_r10._icon));
  }
}
function STTdComponent_Conditional_6_ng_template_0_Template(rf, ctx) {
}
function STTdComponent_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_Conditional_6_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext();
    \u0275\u0275property("ngTemplateOutlet", ctx_r6.c.__render)("ngTemplateOutletContext", \u0275\u0275pureFunction3(2, _c82, ctx_r6.i, ctx_r6.index, ctx_r6.c));
  }
}
function STTdComponent_Conditional_7_Case_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 13);
    \u0275\u0275listener("ngModelChange", function STTdComponent_Conditional_7_Case_0_Template_label_ngModelChange_0_listener($event) {
      \u0275\u0275restoreView(_r11);
      const ctx_r6 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r6._checkbox($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzDisabled", ctx_r6.i.disabled)("ngModel", ctx_r6.i.checked);
  }
}
function STTdComponent_Conditional_7_Case_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "label", 14);
    \u0275\u0275listener("ngModelChange", function STTdComponent_Conditional_7_Case_1_Template_label_ngModelChange_0_listener() {
      \u0275\u0275restoreView(_r12);
      const ctx_r6 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r6._radio());
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzDisabled", ctx_r6.i.disabled)("ngModel", ctx_r6.i.checked);
  }
}
function STTdComponent_Conditional_7_Case_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 15);
    \u0275\u0275listener("click", function STTdComponent_Conditional_7_Case_2_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r13);
      const ctx_r6 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r6._link($event));
    });
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("innerHTML", ctx_r6.i._values[ctx_r6.cIdx]._text, \u0275\u0275sanitizeHtml);
    \u0275\u0275attribute("title", ctx_r6.i._values[ctx_r6.cIdx].text);
  }
}
function STTdComponent_Conditional_7_Case_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-tag", 16);
    \u0275\u0275element(1, "span", 17);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzColor", ctx_r6.i._values[ctx_r6.cIdx].color)("nz-tooltip", ctx_r6.i._values[ctx_r6.cIdx].tooltip);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", ctx_r6.i._values[ctx_r6.cIdx]._text, \u0275\u0275sanitizeHtml);
  }
}
function STTdComponent_Conditional_7_Case_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-badge", 18);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("nzStatus", ctx_r6.i._values[ctx_r6.cIdx].color)("nzText", ctx_r6.i._values[ctx_r6.cIdx].text)("nz-tooltip", ctx_r6.i._values[ctx_r6.cIdx].tooltip);
  }
}
function STTdComponent_Conditional_7_Case_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "cell", 19);
  }
  if (rf & 2) {
    let tmp_6_0;
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("value", ctx_r6.i._values[ctx_r6.cIdx].text)("options", (tmp_6_0 = ctx_r6.i._values[ctx_r6.cIdx].cell) !== null && tmp_6_0 !== void 0 ? tmp_6_0 : ctx_r6.c.cell);
  }
}
function STTdComponent_Conditional_7_Case_6_ng_template_0_Template(rf, ctx) {
}
function STTdComponent_Conditional_7_Case_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_Conditional_7_Case_6_ng_template_0_Template, 0, 0, "ng-template", 20);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275property("record", ctx_r6.i)("column", ctx_r6.c);
  }
}
function STTdComponent_Conditional_7_Case_7_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 21);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(3);
    \u0275\u0275property("innerText", ctx_r6.i._values[ctx_r6.cIdx]._text);
    \u0275\u0275attribute("title", ctx_r6.c._isTruncate ? ctx_r6.i._values[ctx_r6.cIdx].text : null);
  }
}
function STTdComponent_Conditional_7_Case_7_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 17);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(3);
    \u0275\u0275property("innerHTML", ctx_r6.i._values[ctx_r6.cIdx]._text, \u0275\u0275sanitizeHtml);
    \u0275\u0275attribute("title", ctx_r6.c._isTruncate ? ctx_r6.i._values[ctx_r6.cIdx].text : null);
  }
}
function STTdComponent_Conditional_7_Case_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_Conditional_7_Case_7_Conditional_0_Template, 1, 2, "span", 21)(1, STTdComponent_Conditional_7_Case_7_Conditional_1_Template, 1, 2);
  }
  if (rf & 2) {
    const ctx_r6 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(0, ctx_r6.c.safeType === "text" ? 0 : 1);
  }
}
function STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "li", 26);
  }
}
function STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Conditional_1_ng_template_1_Template(rf, ctx) {
}
function STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "li", 27);
    \u0275\u0275template(1, STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Conditional_1_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const subBtn_r14 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275nextContext(4);
    const btnTpl_r15 = \u0275\u0275reference(1);
    \u0275\u0275classProp("st__btn-disabled", subBtn_r14._disabled);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", btnTpl_r15)("ngTemplateOutletContext", \u0275\u0275pureFunction1(4, _c92, subBtn_r14));
  }
}
function STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Conditional_0_Template, 1, 0, "li", 26)(1, STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Conditional_1_Template, 2, 6);
  }
  if (rf & 2) {
    const subBtn_r14 = ctx.$implicit;
    \u0275\u0275conditional(0, subBtn_r14.type === "divider" ? 0 : 1);
  }
}
function STTdComponent_Conditional_7_For_9_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 23);
    \u0275\u0275element(1, "span", 17)(2, "i", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "nz-dropdown-menu", null, 3)(5, "ul", 25);
    \u0275\u0275repeaterCreate(6, STTdComponent_Conditional_7_For_9_Conditional_0_For_7_Template, 2, 1, null, null, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const btnMenu_r16 = \u0275\u0275reference(4);
    const btn_r17 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("nzDropdownMenu", btnMenu_r16);
    \u0275\u0275advance();
    \u0275\u0275property("innerHTML", btn_r17._text, \u0275\u0275sanitizeHtml);
    \u0275\u0275advance(5);
    \u0275\u0275repeater(btn_r17.children);
  }
}
function STTdComponent_Conditional_7_For_9_Conditional_1_ng_template_1_Template(rf, ctx) {
}
function STTdComponent_Conditional_7_For_9_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, STTdComponent_Conditional_7_For_9_Conditional_1_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const btn_r17 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275nextContext(2);
    const btnTpl_r15 = \u0275\u0275reference(1);
    \u0275\u0275classProp("st__btn-disabled", btn_r17._disabled);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", btnTpl_r15)("ngTemplateOutletContext", \u0275\u0275pureFunction1(4, _c102, btn_r17));
  }
}
function STTdComponent_Conditional_7_For_9_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-divider", 22);
  }
}
function STTdComponent_Conditional_7_For_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_Conditional_7_For_9_Conditional_0_Template, 8, 2)(1, STTdComponent_Conditional_7_For_9_Conditional_1_Template, 2, 6)(2, STTdComponent_Conditional_7_For_9_Conditional_2_Template, 1, 0, "nz-divider", 22);
  }
  if (rf & 2) {
    const btn_r17 = ctx.$implicit;
    const \u0275$index_68_r18 = ctx.$index;
    const \u0275$count_68_r19 = ctx.$count;
    \u0275\u0275conditional(0, btn_r17.children.length > 0 ? 0 : 1);
    \u0275\u0275advance(2);
    \u0275\u0275conditional(2, !(\u0275$index_68_r18 === \u0275$count_68_r19 - 1) ? 2 : -1);
  }
}
function STTdComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, STTdComponent_Conditional_7_Case_0_Template, 1, 2)(1, STTdComponent_Conditional_7_Case_1_Template, 1, 2)(2, STTdComponent_Conditional_7_Case_2_Template, 1, 2)(3, STTdComponent_Conditional_7_Case_3_Template, 2, 3)(4, STTdComponent_Conditional_7_Case_4_Template, 1, 3)(5, STTdComponent_Conditional_7_Case_5_Template, 1, 2)(6, STTdComponent_Conditional_7_Case_6_Template, 1, 2)(7, STTdComponent_Conditional_7_Case_7_Template, 2, 1);
    \u0275\u0275repeaterCreate(8, STTdComponent_Conditional_7_For_9_Template, 3, 2, null, null, \u0275\u0275repeaterTrackByIndex);
  }
  if (rf & 2) {
    let tmp_4_0;
    const ctx_r6 = \u0275\u0275nextContext();
    \u0275\u0275conditional(0, (tmp_4_0 = ctx_r6.c.type) === "checkbox" ? 0 : tmp_4_0 === "radio" ? 1 : tmp_4_0 === "link" ? 2 : tmp_4_0 === "tag" ? 3 : tmp_4_0 === "badge" ? 4 : tmp_4_0 === "cell" ? 5 : tmp_4_0 === "widget" ? 6 : 7);
    \u0275\u0275advance(8);
    \u0275\u0275repeater(ctx_r6.i._values[ctx_r6.cIdx].buttons);
  }
}
var _STRowSource = class _STRowSource {
  constructor() {
    this.titles = {};
    this.rows = {};
  }
  add(type, path, ref) {
    this[type === "title" ? "titles" : "rows"][path] = ref;
  }
  getTitle(path) {
    return this.titles[path];
  }
  getRow(path) {
    return this.rows[path];
  }
};
_STRowSource.\u0275fac = function STRowSource_Factory(t) {
  return new (t || _STRowSource)();
};
_STRowSource.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _STRowSource,
  factory: _STRowSource.\u0275fac
});
var STRowSource = _STRowSource;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STRowSource, [{
    type: Injectable
  }], null, null);
})();
var _STRowDirective = class _STRowDirective {
  constructor() {
    this.source = inject(STRowSource, {
      host: true
    });
    this.ref = inject(TemplateRef);
  }
  ngOnInit() {
    this.source.add(this.type, this.id, this.ref);
  }
};
_STRowDirective.\u0275fac = function STRowDirective_Factory(t) {
  return new (t || _STRowDirective)();
};
_STRowDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _STRowDirective,
  selectors: [["", "st-row", ""]],
  inputs: {
    id: [InputFlags.None, "st-row", "id"],
    type: "type"
  }
});
var STRowDirective = _STRowDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STRowDirective, [{
    type: Directive,
    args: [{
      selector: "[st-row]"
    }]
  }], null, {
    id: [{
      type: Input,
      args: ["st-row"]
    }],
    type: [{
      type: Input
    }]
  });
})();
var _STWidgetRegistry = class _STWidgetRegistry {
  constructor() {
    this._widgets = {};
  }
  get widgets() {
    return this._widgets;
  }
  register(type, widget) {
    this._widgets[type] = widget;
  }
  has(type) {
    return this._widgets.hasOwnProperty(type);
  }
  get(type) {
    return this._widgets[type];
  }
};
_STWidgetRegistry.\u0275fac = function STWidgetRegistry_Factory(t) {
  return new (t || _STWidgetRegistry)();
};
_STWidgetRegistry.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _STWidgetRegistry,
  factory: _STWidgetRegistry.\u0275fac,
  providedIn: "root"
});
var STWidgetRegistry = _STWidgetRegistry;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STWidgetRegistry, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _STColumnSource = class _STColumnSource {
  constructor(dom, rowSource, acl, i18nSrv, stWidgetRegistry) {
    this.dom = dom;
    this.rowSource = rowSource;
    this.acl = acl;
    this.i18nSrv = i18nSrv;
    this.stWidgetRegistry = stWidgetRegistry;
  }
  setCog(val) {
    this.cog = val;
  }
  fixPop(i, def) {
    if (i.pop == null || i.pop === false) {
      i.pop = false;
      return;
    }
    let pop = __spreadValues({}, def);
    if (typeof i.pop === "string") {
      pop.title = i.pop;
    } else if (typeof i.pop === "object") {
      pop = __spreadValues(__spreadValues({}, pop), i.pop);
    }
    if (typeof pop.condition !== "function") {
      pop.condition = () => false;
    }
    i.pop = pop;
  }
  btnCoerce(list) {
    if (!list)
      return [];
    const ret = [];
    const {
      modal,
      drawer,
      pop,
      btnIcon
    } = this.cog;
    for (const item of list) {
      if (this.acl && item.acl && !this.acl.can(item.acl)) {
        continue;
      }
      if (item.type === "modal" || item.type === "static") {
        if (item.modal == null || item.modal.component == null) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            console.warn(`[st] Should specify modal parameter when type is modal or static`);
          }
          item.type = "none";
        } else {
          item.modal = __spreadValues(__spreadValues(__spreadValues({}, {
            paramsName: "record",
            size: "lg"
          }), modal), item.modal);
        }
      }
      if (item.type === "drawer") {
        if (item.drawer == null || item.drawer.component == null) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            console.warn(`[st] Should specify drawer parameter when type is drawer`);
          }
          item.type = "none";
        } else {
          item.drawer = __spreadValues(__spreadValues(__spreadValues({}, {
            paramsName: "record",
            size: "lg"
          }), drawer), item.drawer);
        }
      }
      if (item.type === "del" && typeof item.pop === "undefined") {
        item.pop = true;
      }
      this.fixPop(item, pop);
      if (typeof item.icon !== "function") {
        item.icon = __spreadValues(__spreadValues({}, btnIcon), typeof item.icon === "string" ? {
          type: item.icon
        } : item.icon);
      }
      item.children = item.children && item.children.length > 0 ? this.btnCoerce(item.children) : [];
      if (item.i18n && this.i18nSrv) {
        item.text = this.i18nSrv.fanyi(item.i18n);
      }
      ret.push(item);
    }
    this.btnCoerceIf(ret);
    return ret;
  }
  btnCoerceIf(list) {
    for (const item of list) {
      item.iifBehavior = item.iifBehavior || this.cog.iifBehavior;
      if (item.children && item.children.length > 0) {
        this.btnCoerceIf(item.children);
      } else {
        item.children = [];
      }
    }
  }
  fixedCoerce(list) {
    const countReduce = (a, b) => a + +b.width.toString().replace("px", "");
    list.filter((w) => w.fixed && w.fixed === "left" && w.width).forEach((item, idx) => item._left = `${list.slice(0, idx).reduce(countReduce, 0)}px`);
    list.filter((w) => w.fixed && w.fixed === "right" && w.width).reverse().forEach((item, idx) => item._right = `${idx > 0 ? list.slice(-idx).reduce(countReduce, 0) : 0}px`);
  }
  sortCoerce(item) {
    const res = this.fixSortCoerce(item);
    res.reName = __spreadValues(__spreadValues({}, this.cog.sortReName), res.reName);
    return res;
  }
  fixSortCoerce(item) {
    if (typeof item.sort === "undefined") {
      return {
        enabled: false
      };
    }
    let res = {};
    if (typeof item.sort === "string") {
      res.key = item.sort;
    } else if (typeof item.sort !== "boolean") {
      res = item.sort;
    } else if (typeof item.sort === "boolean") {
      res.compare = (a, b) => a[item.indexKey] - b[item.indexKey];
    }
    if (!res.key) {
      res.key = item.indexKey;
    }
    res.enabled = true;
    return res;
  }
  filterCoerce(item) {
    if (item.filter == null) {
      return null;
    }
    let res = item.filter;
    res.type = res.type || "default";
    res.showOPArea = res.showOPArea !== false;
    let icon = "filter";
    let iconTheme = "fill";
    let fixMenus = true;
    let value = void 0;
    switch (res.type) {
      case "keyword":
        icon = "search";
        iconTheme = "outline";
        break;
      case "number":
        icon = "search";
        iconTheme = "outline";
        res.number = __spreadValues({
          step: 1,
          min: -Infinity,
          max: Infinity
        }, res.number);
        break;
      case "date":
        icon = "calendar";
        iconTheme = "outline";
        res.date = __spreadValues({
          range: false,
          mode: "date",
          showToday: true,
          showNow: false
        }, res.date);
        break;
      case "custom":
        break;
      default:
        fixMenus = false;
        break;
    }
    if (fixMenus && (res.menus == null || res.menus.length === 0)) {
      res.menus = [{
        value
      }];
    }
    if (res.menus?.length === 0) {
      return null;
    }
    if (typeof res.multiple === "undefined") {
      res.multiple = true;
    }
    res.confirmText = res.confirmText || this.cog.filterConfirmText;
    res.clearText = res.clearText || this.cog.filterClearText;
    res.key = res.key || item.indexKey;
    res.icon = res.icon || icon;
    const baseIcon = {
      type: icon,
      theme: iconTheme
    };
    if (typeof res.icon === "string") {
      res.icon = __spreadProps(__spreadValues({}, baseIcon), {
        type: res.icon
      });
    } else {
      res.icon = __spreadValues(__spreadValues({}, baseIcon), res.icon);
    }
    this.updateDefault(res);
    if (this.acl) {
      res.menus = res.menus?.filter((w) => this.acl.can(w.acl));
    }
    return res.menus?.length === 0 ? null : res;
  }
  restoreRender(item) {
    if (item.renderTitle) {
      item.__renderTitle = typeof item.renderTitle === "string" ? this.rowSource.getTitle(item.renderTitle) : item.renderTitle;
    }
    if (item.render) {
      item.__render = typeof item.render === "string" ? this.rowSource.getRow(item.render) : item.render;
    }
  }
  widgetCoerce(item) {
    if (item.type !== "widget")
      return;
    if (item.widget == null || !this.stWidgetRegistry.has(item.widget.type)) {
      delete item.type;
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        warn(`st: No widget for type "${item.widget?.type}"`);
      }
    }
  }
  genHeaders(rootColumns) {
    const rows = [];
    const widths = [];
    const fillRowCells = (columns, colIndex, rowIndex = 0) => {
      rows[rowIndex] = rows[rowIndex] || [];
      let currentColIndex = colIndex;
      const colSpans = columns.map((column) => {
        const cell = {
          column,
          colStart: currentColIndex,
          hasSubColumns: false
        };
        let colSpan = 1;
        const subColumns = column.children;
        if (Array.isArray(subColumns) && subColumns.length > 0) {
          colSpan = fillRowCells(subColumns, currentColIndex, rowIndex + 1).reduce((total, count) => total + count, 0);
          cell.hasSubColumns = true;
        } else {
          widths.push(cell.column.width || "");
        }
        if ("colSpan" in column) {
          colSpan = column.colSpan;
        }
        if ("rowSpan" in column) {
          cell.rowSpan = column.rowSpan;
        }
        cell.colSpan = colSpan;
        cell.colEnd = cell.colStart + colSpan - 1;
        rows[rowIndex].push(cell);
        currentColIndex += colSpan;
        return colSpan;
      });
      return colSpans;
    };
    fillRowCells(rootColumns, 0);
    const rowCount = rows.length;
    for (let rowIndex = 0; rowIndex < rowCount; rowIndex += 1) {
      rows[rowIndex].forEach((cell) => {
        if (!("rowSpan" in cell) && !cell.hasSubColumns) {
          cell.rowSpan = rowCount - rowIndex;
        }
      });
    }
    return {
      headers: rows,
      headerWidths: rowCount > 1 ? widths : null
    };
  }
  cleanCond(list) {
    const res = [];
    const copyList = deepCopy(list);
    for (const item of copyList) {
      if (typeof item.iif === "function" && !item.iif(item)) {
        continue;
      }
      if (this.acl && item.acl && !this.acl.can(item.acl)) {
        continue;
      }
      if (Array.isArray(item.children) && item.children.length > 0) {
        item.children = this.cleanCond(item.children);
      }
      res.push(item);
    }
    return res;
  }
  mergeClass(item) {
    const builtInClassNames = [];
    if (item._isTruncate) {
      builtInClassNames.push("text-truncate");
    }
    const rawClassName = item.className;
    if (!rawClassName) {
      const typeClass = {
        number: "text-right",
        currency: "text-right",
        date: "text-center"
      }[item.type];
      if (typeClass) {
        builtInClassNames.push(typeClass);
      }
      item._className = builtInClassNames;
      return;
    }
    const rawClassNameIsArray = Array.isArray(rawClassName);
    if (!rawClassNameIsArray && typeof rawClassName === "object") {
      const objClassNames = rawClassName;
      builtInClassNames.forEach((key) => objClassNames[key] = true);
      item._className = objClassNames;
      return;
    }
    const arrayClassNames = rawClassNameIsArray ? Array.from(rawClassName) : [rawClassName];
    arrayClassNames.splice(0, 0, ...builtInClassNames);
    item._className = [...new Set(arrayClassNames)].filter((w) => !!w);
  }
  process(list, options) {
    if (!list || list.length === 0) {
      return {
        columns: [],
        headers: [],
        headerWidths: null
      };
    }
    const {
      noIndex
    } = this.cog;
    let checkboxCount = 0;
    let radioCount = 0;
    let point = 0;
    const columns = [];
    const processItem = (item) => {
      if (item.index) {
        if (!Array.isArray(item.index)) {
          item.index = item.index.toString().split(".");
        }
        item.indexKey = item.index.join(".");
      }
      const tit = (typeof item.title === "string" ? {
        text: item.title
      } : item.title) || {};
      if (tit.i18n && this.i18nSrv) {
        tit.text = this.i18nSrv.fanyi(tit.i18n);
      }
      if (tit.text) {
        tit._text = this.dom.bypassSecurityTrustHtml(tit.text);
      }
      item.title = tit;
      if (item.type === "no") {
        item.noIndex = item.noIndex == null ? noIndex : item.noIndex;
      }
      if (item.selections == null) {
        item.selections = [];
      }
      if (item.type === "checkbox") {
        ++checkboxCount;
        if (!item.width) {
          item.width = `${item.selections.length > 0 ? 62 : 50}px`;
        }
      }
      if (this.acl) {
        item.selections = item.selections.filter((w) => this.acl.can(w.acl));
      }
      if (item.type === "radio") {
        ++radioCount;
        item.selections = [];
        if (!item.width) {
          item.width = "50px";
        }
      }
      if (item.cell != null) {
        item.type = "cell";
      }
      if (item.type === "yn") {
        item.yn = __spreadValues(__spreadValues({
          truth: true
        }, this.cog.yn), item.yn);
      }
      if (item.type === "date") {
        item.dateFormat = item.dateFormat || this.cog.date?.format;
      }
      if (item.type === "link" && typeof item.click !== "function" || item.type === "badge" && item.badge == null || item.type === "tag" && item.tag == null || item.type === "enum" && item.enum == null) {
        item.type = "";
      }
      item._isTruncate = !!item.width && options.widthMode.strictBehavior === "truncate" && item.type !== "img";
      this.mergeClass(item);
      if (typeof item.width === "number") {
        item._width = item.width;
        item.width = `${item.width}px`;
      }
      item._left = false;
      item._right = false;
      item.safeType = item.safeType ?? options.safeType;
      item._sort = this.sortCoerce(item);
      item.filter = this.filterCoerce(item);
      item.buttons = this.btnCoerce(item.buttons);
      this.widgetCoerce(item);
      this.restoreRender(item);
      item.resizable = __spreadValues(__spreadValues({
        disabled: true,
        bounds: "window",
        minWidth: 60,
        maxWidth: 360,
        preview: true
      }, options.resizable), typeof item.resizable === "boolean" ? {
        disabled: !item.resizable
      } : item.resizable);
      item.__point = point++;
      return item;
    };
    const processList = (data) => {
      for (const item of data) {
        columns.push(processItem(item));
        if (Array.isArray(item.children)) {
          processList(item.children);
        }
      }
    };
    const copyList = this.cleanCond(list);
    processList(copyList);
    if (checkboxCount > 1) {
      throw new Error(`[st]: just only one column checkbox`);
    }
    if (radioCount > 1) {
      throw new Error(`[st]: just only one column radio`);
    }
    this.fixedCoerce(columns);
    return __spreadValues({
      columns: columns.filter((w) => !Array.isArray(w.children) || w.children.length === 0)
    }, this.genHeaders(copyList));
  }
  restoreAllRender(columns) {
    columns.forEach((i) => this.restoreRender(i));
  }
  updateDefault(filter2) {
    if (filter2.menus == null)
      return this;
    if (filter2.type === "default") {
      filter2.default = filter2.menus.findIndex((w) => w.checked) !== -1;
    } else {
      filter2.default = !!filter2.menus[0].value;
    }
    return this;
  }
  cleanFilter(col) {
    const f = col.filter;
    f.default = false;
    if (f.type === "default") {
      f.menus.forEach((i) => i.checked = false);
    } else {
      f.menus[0].value = void 0;
    }
    return this;
  }
};
_STColumnSource.\u0275fac = function STColumnSource_Factory(t) {
  return new (t || _STColumnSource)(\u0275\u0275inject(DomSanitizer), \u0275\u0275inject(STRowSource, 1), \u0275\u0275inject(ACLService, 8), \u0275\u0275inject(ALAIN_I18N_TOKEN, 8), \u0275\u0275inject(STWidgetRegistry));
};
_STColumnSource.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _STColumnSource,
  factory: _STColumnSource.\u0275fac
});
var STColumnSource = _STColumnSource;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STColumnSource, [{
    type: Injectable
  }], () => [{
    type: DomSanitizer
  }, {
    type: STRowSource,
    decorators: [{
      type: Host
    }]
  }, {
    type: ACLService,
    decorators: [{
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ALAIN_I18N_TOKEN]
    }]
  }, {
    type: STWidgetRegistry
  }], null);
})();
var _STDataSource = class _STDataSource {
  constructor(http, datePipe, ynPipe, numberPipe, currencySrv, dom) {
    this.http = http;
    this.datePipe = datePipe;
    this.ynPipe = ynPipe;
    this.numberPipe = numberPipe;
    this.currencySrv = currencySrv;
    this.dom = dom;
    this.sortTick = 0;
  }
  setCog(val) {
    this.cog = val;
  }
  process(options) {
    let data$;
    let isRemote = false;
    const {
      data,
      res,
      total,
      page,
      pi,
      ps,
      paginator,
      columns,
      headers
    } = options;
    let retTotal;
    let retPs;
    let retList;
    let retPi;
    let rawData;
    let showPage = page.show;
    if (typeof data === "string") {
      isRemote = true;
      data$ = this.getByRemote(data, options).pipe(map((result) => {
        rawData = result;
        let ret;
        if (Array.isArray(result)) {
          ret = result;
          retTotal = ret.length;
          retPs = retTotal;
          showPage = false;
        } else {
          const reName = res.reName;
          if (typeof reName === "function") {
            const fnRes = reName(result, {
              pi,
              ps,
              total
            });
            ret = fnRes.list;
            retTotal = fnRes.total;
          } else {
            ret = deepGet(result, reName.list, []);
            if (ret == null || !Array.isArray(ret)) {
              ret = [];
            }
            const resultTotal = reName.total && deepGet(result, reName.total, null);
            retTotal = resultTotal == null ? total || 0 : +resultTotal;
          }
        }
        return deepCopy(ret);
      }));
    } else if (data == null || Array.isArray(data)) {
      data$ = of(data ?? []);
    } else {
      data$ = data;
    }
    if (!isRemote) {
      data$ = data$.pipe(
        // sort
        map((result) => {
          rawData = result;
          let copyResult = deepCopy(result);
          const sorterFn = this.getSorterFn(headers);
          if (sorterFn) {
            copyResult = copyResult.sort(sorterFn);
          }
          return copyResult;
        }),
        // filter
        map((result) => {
          columns.filter((w) => w.filter).forEach((c) => {
            const filter2 = c.filter;
            const values = this.getFilteredData(filter2);
            if (values.length === 0)
              return;
            const onFilter = filter2.fn;
            if (typeof onFilter !== "function") {
              if (typeof ngDevMode === "undefined" || ngDevMode) {
                console.warn(`[st] Muse provide the fn function in filter`);
              }
              return;
            }
            result = result.filter((record) => values.some((v) => onFilter(v, record)));
          });
          return result;
        }),
        // paging
        map((result) => {
          if (paginator && page.front) {
            const maxPageIndex = Math.ceil(result.length / ps);
            retPi = Math.max(1, pi > maxPageIndex ? maxPageIndex : pi);
            retTotal = result.length;
            if (page.show === true) {
              return result.slice((retPi - 1) * ps, retPi * ps);
            }
          }
          return result;
        })
      );
    }
    if (typeof res.process === "function") {
      data$ = data$.pipe(map((result) => res.process(result, rawData)));
    }
    data$ = data$.pipe(map((result) => this.optimizeData({
      result,
      columns,
      rowClassName: options.rowClassName
    })));
    return data$.pipe(map((result) => {
      retList = result;
      const realTotal = retTotal || total;
      const realPs = retPs || ps;
      return {
        pi: retPi,
        ps: retPs,
        total: retTotal,
        list: retList,
        statistical: this.genStatistical(columns, retList, rawData),
        pageShow: typeof showPage === "undefined" ? realTotal > realPs : showPage
      };
    }));
  }
  get(item, col, idx) {
    try {
      const safeHtml = col.safeType === "safeHtml";
      if (col.format) {
        const formatRes = col.format(item, col, idx) || "";
        return {
          text: formatRes,
          _text: safeHtml ? this.dom.bypassSecurityTrustHtml(formatRes) : formatRes,
          org: formatRes,
          safeType: col.safeType
        };
      }
      const value = deepGet(item, col.index, col.default);
      let text = value;
      let color;
      let tooltip;
      switch (col.type) {
        case "no":
          text = this.getNoIndex(item, col, idx);
          break;
        case "img":
          text = value ? `<img src="${value}" class="img">` : "";
          break;
        case "number":
          text = this.numberPipe.transform(value, col.numberDigits);
          break;
        case "currency":
          text = this.currencySrv.format(value, col.currency?.format);
          break;
        case "date":
          text = value === col.default ? col.default : this.datePipe.transform(value, col.dateFormat);
          break;
        case "yn":
          text = this.ynPipe.transform(value === col.yn.truth, col.yn.yes, col.yn.no, col.yn.mode, false);
          break;
        case "enum":
          text = col.enum[value];
          break;
        case "tag":
        case "badge":
          const data = col.type === "tag" ? col.tag : col.badge;
          if (data && data[text]) {
            const dataItem = data[text];
            text = dataItem.text;
            color = dataItem.color;
            tooltip = dataItem.tooltip;
          } else {
            text = "";
          }
          break;
      }
      if (text == null)
        text = "";
      return {
        text,
        _text: safeHtml ? this.dom.bypassSecurityTrustHtml(text) : text,
        org: value,
        color,
        tooltip,
        safeType: col.safeType,
        buttons: []
      };
    } catch (ex) {
      const text = `INVALID DATA`;
      console.error(`Failed to get data`, item, col, ex);
      return {
        text,
        _text: text,
        org: text,
        buttons: [],
        safeType: "text"
      };
    }
  }
  getByRemote(url, options) {
    const {
      req,
      page,
      paginator,
      pi,
      ps,
      singleSort,
      multiSort,
      columns,
      headers
    } = options;
    const method = (req.method || "GET").toUpperCase();
    let params = {};
    const reName = req.reName;
    if (paginator) {
      if (req.type === "page") {
        params = {
          [reName.pi]: page.zeroIndexed ? pi - 1 : pi,
          [reName.ps]: ps
        };
      } else {
        params = {
          [reName.skip]: (pi - 1) * ps,
          [reName.limit]: ps
        };
      }
    }
    params = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, params), req.params), this.getReqSortMap(singleSort, multiSort, headers)), this.getReqFilterMap(columns));
    if (options.req.ignoreParamNull == true) {
      Object.keys(params).forEach((key) => {
        if (params[key] == null)
          delete params[key];
      });
    }
    let reqOptions = {
      params,
      body: req.body,
      headers: req.headers
    };
    if (method === "POST" && req.allInBody === true) {
      reqOptions = {
        body: __spreadValues(__spreadValues({}, req.body), params),
        headers: req.headers
      };
    }
    if (typeof req.process === "function") {
      reqOptions = req.process(reqOptions);
    }
    if (!(reqOptions.params instanceof HttpParams)) {
      reqOptions.params = new HttpParams({
        fromObject: reqOptions.params
      });
    }
    if (typeof options.customRequest === "function") {
      return options.customRequest({
        method,
        url,
        options: reqOptions
      });
    }
    return this.http.request(method, url, reqOptions);
  }
  getCell(c, item, idx) {
    const onCellResult = typeof c.onCell === "function" ? c.onCell(item, idx) : null;
    const mergedColSpan = onCellResult?.colSpan ?? 1;
    const mergedRowSpan = onCellResult?.rowSpan ?? 1;
    return {
      colSpan: mergedColSpan <= 0 ? null : mergedColSpan,
      rowSpan: mergedRowSpan <= 0 ? null : mergedRowSpan
    };
  }
  optimizeData(options) {
    const {
      result,
      columns,
      rowClassName
    } = options;
    for (let i = 0, len = result.length; i < len; i++) {
      result[i]._values = columns.map((c) => {
        const props = this.getCell(c, result[i], i);
        if (Array.isArray(c.buttons) && c.buttons.length > 0) {
          return {
            buttons: this.genButtons(c.buttons, result[i], c),
            _text: "",
            props
          };
        }
        let cell;
        if (typeof c.cell === "function") {
          cell = c.cell(result[i], c);
        }
        return __spreadProps(__spreadValues({}, this.get(result[i], c, i)), {
          props,
          cell
        });
      });
      result[i]._rowClassName = [rowClassName ? rowClassName(result[i], i) : null, result[i].className].filter((w) => !!w).join(" ");
    }
    return result;
  }
  getNoIndex(item, col, idx) {
    return typeof col.noIndex === "function" ? col.noIndex(item, col, idx) : col.noIndex + idx;
  }
  genButtons(_btns, item, col) {
    const fn = (btns) => {
      return deepCopy(btns).filter((btn) => {
        const result = typeof btn.iif === "function" ? btn.iif(item, btn, col) : true;
        const isRenderDisabled = btn.iifBehavior === "disabled";
        btn._result = result;
        btn._disabled = !result && isRenderDisabled;
        if (btn.children?.length) {
          btn.children = fn(btn.children);
        }
        return result || isRenderDisabled;
      });
    };
    const res = fn(_btns);
    const fnText = (btns) => {
      for (const btn of btns) {
        btn._text = typeof btn.text === "function" ? btn.text(item, btn) : btn.text || "";
        btn._className = typeof btn.className === "function" ? btn.className(item, btn) : btn.className;
        btn._icon = typeof btn.icon === "function" ? btn.icon(item, btn) : btn.icon;
        if (btn.children?.length) {
          btn.children = fnText(btn.children);
        }
      }
      return btns;
    };
    return this.fixMaxMultiple(fnText(res), col);
  }
  fixMaxMultiple(btns, col) {
    const curCog = col.maxMultipleButton;
    const btnSize = btns.length;
    if (curCog == null || btnSize <= 0)
      return btns;
    const cog = __spreadValues(__spreadValues({}, this.cog.maxMultipleButton), typeof curCog === "number" ? {
      count: curCog
    } : curCog);
    if (cog.count >= btnSize)
      return btns;
    const newBtns = btns.slice(0, cog.count);
    newBtns.push({
      _text: cog.text,
      children: btns.slice(cog.count)
    });
    return newBtns;
  }
  // #region sort
  getValidSort(headers) {
    return headers.reduce((a, header) => {
      const ls = header.map((i) => i.column).filter((item) => item._sort && item._sort.enabled && item._sort.default).map((item) => item._sort);
      return a.concat(...ls);
    }, []);
  }
  getSorterFn(headers) {
    const sortList = this.getValidSort(headers);
    if (sortList.length === 0) {
      return;
    }
    const sortItem = sortList[0];
    if (sortItem.compare === null) {
      return;
    }
    if (typeof sortItem.compare !== "function") {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        console.warn(`[st] Muse provide the compare function in sort`);
      }
      return;
    }
    return (a, b) => {
      const result = sortItem.compare(a, b);
      if (result !== 0) {
        return sortItem.default === "descend" ? -result : result;
      }
      return 0;
    };
  }
  get nextSortTick() {
    return ++this.sortTick;
  }
  getReqSortMap(singleSort, multiSort, headers) {
    let ret = {};
    const sortList = this.getValidSort(headers);
    if (multiSort) {
      const ms = __spreadValues({
        key: "sort",
        separator: "-",
        nameSeparator: ".",
        keepEmptyKey: true,
        arrayParam: false
      }, multiSort);
      const sortMap = sortList.sort((a, b) => a.tick - b.tick).map((item) => item.key + ms.nameSeparator + ((item.reName || {})[item.default] || item.default));
      ret = {
        [ms.key]: ms.arrayParam ? sortMap : sortMap.join(ms.separator)
      };
      return sortMap.length === 0 && ms.keepEmptyKey === false ? {} : ret;
    }
    if (sortList.length === 0)
      return ret;
    const mapData = sortList[0];
    let sortFiled = mapData.key;
    let sortValue = (sortList[0].reName || {})[mapData.default] || mapData.default;
    if (singleSort) {
      sortValue = sortFiled + (singleSort.nameSeparator || ".") + sortValue;
      sortFiled = singleSort.key || "sort";
    }
    ret[sortFiled] = sortValue;
    return ret;
  }
  // #endregion
  // #region filter
  getFilteredData(filter2) {
    return filter2.type === "default" ? filter2.menus.filter((f) => f.checked === true) : filter2.menus.slice(0, 1);
  }
  getReqFilterMap(columns) {
    let ret = {};
    columns.filter((w) => w.filter && w.filter.default === true).forEach((col) => {
      const filter2 = col.filter;
      const values = this.getFilteredData(filter2);
      let obj = {};
      if (filter2.reName) {
        obj = filter2.reName(filter2.menus, col);
      } else {
        obj[filter2.key] = values.map((i) => i.value).join(",");
      }
      ret = __spreadValues(__spreadValues({}, ret), obj);
    });
    return ret;
  }
  // #endregion
  // #region statistical
  genStatistical(columns, list, rawData) {
    const res = {};
    columns.forEach((col, index) => {
      res[col.key || col.indexKey || index] = col.statistical == null ? {} : this.getStatistical(col, index, list, rawData);
    });
    return res;
  }
  getStatistical(col, index, list, rawData) {
    const val = col.statistical;
    const item = __spreadValues({
      digits: 2,
      currency: void 0
    }, typeof val === "string" ? {
      type: val
    } : val);
    let res = {
      value: 0
    };
    let currency = false;
    if (typeof item.type === "function") {
      res = item.type(this.getValues(index, list), col, list, rawData);
      currency = true;
    } else {
      switch (item.type) {
        case "count":
          res.value = list.length;
          break;
        case "distinctCount":
          res.value = this.getValues(index, list).filter((value, idx, self) => self.indexOf(value) === idx).length;
          break;
        case "sum":
          res.value = this.toFixed(this.getSum(index, list), item.digits);
          currency = true;
          break;
        case "average":
          res.value = this.toFixed(this.getSum(index, list) / list.length, item.digits);
          currency = true;
          break;
        case "max":
          res.value = Math.max(...this.getValues(index, list));
          currency = true;
          break;
        case "min":
          res.value = Math.min(...this.getValues(index, list));
          currency = true;
          break;
      }
    }
    if (item.currency === true || item.currency == null && currency === true) {
      res.text = this.currencySrv.format(res.value, col.currency?.format);
    } else {
      res.text = String(res.value);
    }
    return res;
  }
  toFixed(val, digits) {
    if (isNaN(val) || !isFinite(val)) {
      return 0;
    }
    return parseFloat(val.toFixed(digits));
  }
  getValues(index, list) {
    return list.map((i) => i._values[index].org).map((i) => i === "" || i == null ? 0 : i);
  }
  getSum(index, list) {
    return this.getValues(index, list).reduce((p, i) => p += parseFloat(String(i)), 0);
  }
};
_STDataSource.\u0275fac = function STDataSource_Factory(t) {
  return new (t || _STDataSource)(\u0275\u0275inject(_HttpClient), \u0275\u0275inject(DatePipe, 1), \u0275\u0275inject(YNPipe, 1), \u0275\u0275inject(DecimalPipe, 1), \u0275\u0275inject(CurrencyService), \u0275\u0275inject(DomSanitizer));
};
_STDataSource.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _STDataSource,
  factory: _STDataSource.\u0275fac
});
var STDataSource = _STDataSource;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STDataSource, [{
    type: Injectable
  }], () => [{
    type: _HttpClient
  }, {
    type: DatePipe,
    decorators: [{
      type: Host
    }]
  }, {
    type: YNPipe,
    decorators: [{
      type: Host
    }]
  }, {
    type: DecimalPipe,
    decorators: [{
      type: Host
    }]
  }, {
    type: CurrencyService
  }, {
    type: DomSanitizer
  }], null);
})();
var _STExport = class _STExport {
  constructor() {
    this.xlsxSrv = inject(XlsxService, {
      optional: true
    });
  }
  _stGet(item, col, index, colIndex) {
    const ret = {
      t: "s",
      v: ""
    };
    if (col.format) {
      ret.v = col.format(item, col, index);
    } else {
      const val = item._values ? item._values[colIndex].text : deepGet(item, col.index, "");
      ret.v = val;
      if (val != null) {
        switch (col.type) {
          case "currency":
            ret.t = "n";
            break;
          case "date":
            if (`${val}`.length > 0) {
              ret.t = "d";
              ret.z = col.dateFormat;
            }
            break;
          case "yn":
            const yn2 = col.yn;
            ret.v = val === yn2.truth ? yn2.yes : yn2.no;
            break;
        }
      }
    }
    ret.v = ret.v ?? "";
    return ret;
  }
  genSheet(opt) {
    const sheets = {};
    const sheet = sheets[opt.sheetname || "Sheet1"] = {};
    const dataLen = opt.data.length;
    const columns = opt.columens;
    let validColCount = 0;
    let wpx = false;
    const invalidFn = (col) => col.exported === false || !col.index || !(!col.buttons || col.buttons.length === 0);
    for (const [idx, col] of columns.entries()) {
      if (invalidFn(col))
        continue;
      if (!wpx && col._width != null)
        wpx = true;
      ++validColCount;
      const columnName = this.xlsxSrv.numberToSchema(validColCount);
      sheet[`${columnName}1`] = {
        t: "s",
        v: typeof col.title === "object" ? col.title.text : col.title
      };
      for (let dataIdx = 0; dataIdx < dataLen; dataIdx++) {
        sheet[`${columnName}${dataIdx + 2}`] = this._stGet(opt.data[dataIdx], col, dataIdx, idx);
      }
    }
    if (wpx) {
      sheet["!cols"] = columns.filter((col) => !invalidFn(col)).map((col) => ({
        wpx: col._width
      }));
    }
    if (validColCount > 0 && dataLen > 0) {
      sheet["!ref"] = `A1:${this.xlsxSrv.numberToSchema(validColCount)}${dataLen + 1}`;
    }
    return sheets;
  }
  export(opt) {
    return __async(this, null, function* () {
      if (this.xlsxSrv == null) {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          console.warn(`XlsxService service not found`);
        }
        return Promise.reject();
      }
      const sheets = this.genSheet(opt);
      return this.xlsxSrv.export({
        sheets,
        filename: opt.filename,
        callback: opt.callback
      });
    });
  }
};
_STExport.\u0275fac = function STExport_Factory(t) {
  return new (t || _STExport)();
};
_STExport.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _STExport,
  factory: _STExport.\u0275fac
});
var STExport = _STExport;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STExport, [{
    type: Injectable
  }], null, null);
})();
var _STWidgetHostDirective = class _STWidgetHostDirective {
  constructor() {
    this.stWidgetRegistry = inject(STWidgetRegistry);
    this.viewContainerRef = inject(ViewContainerRef);
  }
  ngOnInit() {
    const widget = this.column.widget;
    const componentType = this.stWidgetRegistry.get(widget.type);
    this.viewContainerRef.clear();
    const componentRef = this.viewContainerRef.createComponent(componentType);
    const {
      record,
      column
    } = this;
    const data = widget.params ? widget.params({
      record,
      column
    }) : {
      record
    };
    Object.keys(data).forEach((key) => {
      componentRef.instance[key] = data[key];
    });
  }
};
_STWidgetHostDirective.\u0275fac = function STWidgetHostDirective_Factory(t) {
  return new (t || _STWidgetHostDirective)();
};
_STWidgetHostDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _STWidgetHostDirective,
  selectors: [["", "st-widget-host", ""]],
  inputs: {
    record: "record",
    column: "column"
  }
});
var STWidgetHostDirective = _STWidgetHostDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STWidgetHostDirective, [{
    type: Directive,
    args: [{
      selector: "[st-widget-host]"
    }]
  }], null, {
    record: [{
      type: Input
    }],
    column: [{
      type: Input
    }]
  });
})();
var ST_DEFAULT_CONFIG = {
  pi: 1,
  ps: 10,
  size: "default",
  responsive: true,
  responsiveHideHeaderFooter: false,
  req: {
    type: "page",
    method: "GET",
    allInBody: false,
    lazyLoad: false,
    ignoreParamNull: false,
    reName: {
      pi: "pi",
      ps: "ps",
      skip: "skip",
      limit: "limit"
    }
  },
  res: {
    reName: {
      list: ["list"],
      total: ["total"]
    }
  },
  page: {
    front: true,
    zeroIndexed: false,
    position: "bottom",
    placement: "right",
    show: true,
    showSize: false,
    pageSizes: [10, 20, 30, 40, 50],
    showQuickJumper: false,
    total: true,
    toTop: true,
    toTopOffset: 100,
    itemRender: null,
    simple: false
  },
  modal: {
    paramsName: "record",
    size: "lg",
    exact: true
  },
  drawer: {
    paramsName: "record",
    size: "md",
    footer: true,
    footerHeight: 55
  },
  pop: {
    title: "\u786E\u8BA4\u5220\u9664\u5417\uFF1F",
    trigger: "click",
    placement: "top"
  },
  btnIcon: {
    theme: "outline",
    spin: false
  },
  noIndex: 1,
  expandRowByClick: false,
  expandAccordion: false,
  widthMode: {
    type: "default",
    strictBehavior: "truncate"
  },
  virtualItemSize: 54,
  virtualMaxBufferPx: 200,
  virtualMinBufferPx: 100,
  iifBehavior: "hide",
  loadingDelay: 0,
  safeType: "safeHtml",
  date: {
    format: `yyyy-MM-dd HH:mm`
  },
  yn: {
    truth: true,
    yes: "\u662F",
    mode: "icon"
  },
  maxMultipleButton: {
    text: "\u66F4\u591A",
    count: 2
  }
};
var _STFilterComponent = class _STFilterComponent {
  constructor() {
    this.cdr = inject(ChangeDetectorRef);
    this.visible = false;
    this.locale = {};
    this.n = new EventEmitter();
    this.handle = new EventEmitter();
  }
  get icon() {
    return this.f.icon;
  }
  stopPropagation($event) {
    $event.stopPropagation();
  }
  checkboxChange() {
    this.n.emit(this.f.menus?.filter((w) => w.checked));
  }
  radioChange(item) {
    this.f.menus.forEach((i) => i.checked = false);
    item.checked = !item.checked;
    this.n.emit(item);
  }
  close(result) {
    if (result != null)
      this.handle.emit(result);
    this.visible = false;
    this.cdr.detectChanges();
  }
  confirm() {
    this.handle.emit(true);
    return this;
  }
  reset() {
    this.handle.emit(false);
    return this;
  }
};
_STFilterComponent.\u0275fac = function STFilterComponent_Factory(t) {
  return new (t || _STFilterComponent)();
};
_STFilterComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _STFilterComponent,
  selectors: [["st-filter"]],
  hostVars: 6,
  hostBindings: function STFilterComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-table-filter-trigger-container", true)("st__filter", true)("ant-table-filter-trigger-container-open", ctx.visible);
    }
  },
  inputs: {
    col: "col",
    locale: "locale",
    f: "f"
  },
  outputs: {
    n: "n",
    handle: "handle"
  },
  decls: 11,
  vars: 9,
  consts: [["filterMenu", "nzDropdownMenu"], ["nz-dropdown", "", "nzTrigger", "click", "nzOverlayClassName", "st__filter-wrap", 1, "ant-table-filter-trigger", 3, "nzVisibleChange", "click", "nzDropdownMenu", "nzClickHide", "nzVisible"], ["nz-icon", "", 3, "nzType", "nzTheme"], [1, "ant-table-filter-dropdown"], [1, "ant-table-filter-dropdown-btns"], [1, "st__filter-keyword"], ["type", "text", "nz-input", "", 3, "ngModelChange", "keyup.enter", "ngModel"], [1, "p-sm", "st__filter-number"], [1, "width-100", 3, "ngModelChange", "ngModel", "nzMin", "nzMax", "nzStep", "nzPrecision", "nzPlaceHolder"], [1, "p-sm", "st__filter-date"], ["nzInline", "", 3, "nzMode", "ngModel", "nzShowNow", "nzShowToday", "nzDisabledDate", "nzDisabledTime"], ["nzInline", "", 3, "ngModelChange", "nzMode", "ngModel", "nzShowNow", "nzShowToday", "nzDisabledDate", "nzDisabledTime"], [1, "st__filter-custom"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["nz-menu", ""], ["nz-menu-item", ""], ["nz-checkbox", "", 3, "ngModel"], ["nz-checkbox", "", 3, "ngModelChange", "ngModel"], ["nz-radio", "", 3, "ngModelChange", "ngModel"], [1, "ant-table-filter-dropdown-link", "confirm", 3, "click"], [1, "ant-table-filter-dropdown-link", "clear", 3, "click"]],
  template: function STFilterComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275elementStart(0, "span", 1);
      \u0275\u0275twoWayListener("nzVisibleChange", function STFilterComponent_Template_span_nzVisibleChange_0_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.visible, $event) || (ctx.visible = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("click", function STFilterComponent_Template_span_click_0_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.stopPropagation($event));
      });
      \u0275\u0275element(1, "i", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(2, "nz-dropdown-menu", null, 0)(4, "div", 3);
      \u0275\u0275template(5, STFilterComponent_Case_5_Template, 2, 2)(6, STFilterComponent_Case_6_Template, 2, 6)(7, STFilterComponent_Case_7_Template, 3, 1)(8, STFilterComponent_Case_8_Template, 2, 6)(9, STFilterComponent_Case_9_Template, 3, 0)(10, STFilterComponent_Conditional_10_Template, 7, 2, "div", 4);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      let tmp_7_0;
      const filterMenu_r11 = \u0275\u0275reference(3);
      \u0275\u0275classProp("active", ctx.visible || ctx.f.default);
      \u0275\u0275property("nzDropdownMenu", filterMenu_r11)("nzClickHide", false);
      \u0275\u0275twoWayProperty("nzVisible", ctx.visible);
      \u0275\u0275advance();
      \u0275\u0275property("nzType", ctx.icon.type)("nzTheme", ctx.icon.theme);
      \u0275\u0275advance(4);
      \u0275\u0275conditional(5, (tmp_7_0 = ctx.f.type) === "keyword" ? 5 : tmp_7_0 === "number" ? 6 : tmp_7_0 === "date" ? 7 : tmp_7_0 === "custom" ? 8 : 9);
      \u0275\u0275advance(5);
      \u0275\u0275conditional(10, ctx.f.showOPArea ? 10 : -1);
    }
  },
  dependencies: [NgTemplateOutlet, DefaultValueAccessor, NgControlStatus, NgModel, NzIconDirective, NzCheckboxComponent, NzMenuDirective, NzMenuItemComponent, NzDropDownDirective, NzDropdownMenuComponent, NzRadioComponent, NzInputDirective, NzInputNumberComponent, NzDatePickerComponent, NzRangePickerComponent],
  encapsulation: 2,
  changeDetection: 0
});
var STFilterComponent = _STFilterComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STFilterComponent, [{
    type: Component,
    args: [{
      selector: "st-filter",
      template: `
    <span
      class="ant-table-filter-trigger"
      [class.active]="visible || f.default"
      nz-dropdown
      [nzDropdownMenu]="filterMenu"
      nzTrigger="click"
      [nzClickHide]="false"
      [(nzVisible)]="visible"
      nzOverlayClassName="st__filter-wrap"
      (click)="stopPropagation($event)"
    >
      <i nz-icon [nzType]="icon.type" [nzTheme]="icon.theme!"></i>
    </span>
    <nz-dropdown-menu #filterMenu="nzDropdownMenu">
      <div class="ant-table-filter-dropdown">
        @switch (f.type) {
          @case ('keyword') {
            <div class="st__filter-keyword">
              <input
                type="text"
                nz-input
                [attr.placeholder]="f.placeholder"
                [(ngModel)]="f.menus![0]!.value"
                (ngModelChange)="n.emit($event)"
                (keyup.enter)="confirm()"
              />
            </div>
          }
          @case ('number') {
            <div class="p-sm st__filter-number">
              <nz-input-number
                [(ngModel)]="f.menus![0]!.value"
                (ngModelChange)="n.emit($event)"
                [nzMin]="f.number!.min!"
                [nzMax]="f.number!.max!"
                [nzStep]="f.number!.step!"
                [nzPrecision]="f.number!.precision"
                [nzPlaceHolder]="f.placeholder!"
                class="width-100"
              />
            </div>
          }
          @case ('date') {
            <div class="p-sm st__filter-date">
              @if (f.date!.range) {
                <nz-range-picker
                  nzInline
                  [nzMode]="f.date!.mode"
                  [(ngModel)]="f.menus![0]!.value"
                  (ngModelChange)="n.emit($event)"
                  [nzShowNow]="f.date!.showNow"
                  [nzShowToday]="f.date!.showToday"
                  [nzDisabledDate]="f.date!.disabledDate"
                  [nzDisabledTime]="f.date!.disabledTime"
                />
              } @else {
                <nz-date-picker
                  nzInline
                  [nzMode]="f.date!.mode"
                  [(ngModel)]="f.menus![0]!.value"
                  (ngModelChange)="n.emit($event)"
                  [nzShowNow]="f.date!.showNow"
                  [nzShowToday]="f.date!.showToday"
                  [nzDisabledDate]="f.date!.disabledDate"
                  [nzDisabledTime]="f.date!.disabledTime"
                />
              }
            </div>
          }
          @case ('custom') {
            <div class="st__filter-custom">
              <ng-template
                [ngTemplateOutlet]="f.custom!"
                [ngTemplateOutletContext]="{ $implicit: f, col: col, handle: this }"
              />
            </div>
          }
          @default {
            <ul nz-menu>
              @for (filter of f.menus; track $index) {
                <li nz-menu-item>
                  @if (f.multiple) {
                    <label nz-checkbox [(ngModel)]="filter.checked" (ngModelChange)="checkboxChange()">
                      {{ filter.text }}
                    </label>
                  } @else {
                    <label nz-radio [ngModel]="filter.checked" (ngModelChange)="radioChange(filter)">
                      {{ filter.text }}
                    </label>
                  }
                </li>
              }
            </ul>
          }
        }
        @if (f.showOPArea) {
          <div class="ant-table-filter-dropdown-btns">
            <a class="ant-table-filter-dropdown-link confirm" (click)="confirm()">
              <span>{{ f.confirmText || locale.filterConfirm }}</span>
            </a>
            <a class="ant-table-filter-dropdown-link clear" (click)="reset()">
              <span>{{ f.clearText || locale.filterReset }}</span>
            </a>
          </div>
        }
      </div>
    </nz-dropdown-menu>
  `,
      host: {
        "[class.ant-table-filter-trigger-container]": `true`,
        "[class.st__filter]": `true`,
        "[class.ant-table-filter-trigger-container-open]": `visible`
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None
    }]
  }], null, {
    col: [{
      type: Input
    }],
    locale: [{
      type: Input
    }],
    f: [{
      type: Input
    }],
    n: [{
      type: Output
    }],
    handle: [{
      type: Output
    }]
  });
})();
var _STComponent = class _STComponent {
  get req() {
    return this._req;
  }
  set req(value) {
    this._req = deepMergeKey({}, true, this.cog.req, value);
  }
  /** 返回体配置 */
  get res() {
    return this._res;
  }
  set res(value) {
    const item = this._res = deepMergeKey({}, true, this.cog.res, value);
    const reName = item.reName;
    if (typeof reName !== "function") {
      if (!Array.isArray(reName.list))
        reName.list = reName.list.split(".");
      if (!Array.isArray(reName.total))
        reName.total = reName.total.split(".");
    }
    this._res = item;
  }
  get page() {
    return this._page;
  }
  set page(value) {
    this._page = __spreadValues(__spreadValues({}, this.cog.page), value);
    this.updateTotalTpl();
  }
  get multiSort() {
    return this._multiSort;
  }
  set multiSort(value) {
    if (typeof value === "boolean" && !booleanAttribute(value) || typeof value === "object" && Object.keys(value).length === 0) {
      this._multiSort = void 0;
      return;
    }
    this._multiSort = __spreadValues({}, typeof value === "object" ? value : {});
  }
  set widthMode(value) {
    this._widthMode = __spreadValues(__spreadValues({}, this.cog.widthMode), value);
  }
  get widthMode() {
    return this._widthMode;
  }
  set widthConfig(val) {
    this._widthConfig = val;
    this.customWidthConfig = val && val.length > 0;
  }
  set resizable(val) {
    this._resizable = typeof val === "object" ? val : {
      disabled: !booleanAttribute(val)
    };
  }
  /**
   * Get the number of the current page
   */
  get count() {
    return this._data.length;
  }
  /**
   * Get the data of the current page
   */
  get list() {
    return this._data;
  }
  get noColumns() {
    return this.columns == null;
  }
  constructor(configSrv) {
    this.i18nSrv = inject(ALAIN_I18N_TOKEN, {
      optional: true
    });
    this.el = inject(ElementRef).nativeElement;
    this.cdr = inject(ChangeDetectorRef);
    this.doc = inject(DOCUMENT);
    this.exportSrv = inject(STExport);
    this.columnSource = inject(STColumnSource);
    this.dataSource = inject(STDataSource);
    this.delonI18n = inject(DelonLocaleService);
    this.cms = inject(NzContextMenuService);
    this.destroy$ = inject(DestroyRef);
    this.totalTpl = ``;
    this.inied = false;
    this.customWidthConfig = false;
    this._widthConfig = [];
    this.locale = {};
    this._loading = false;
    this._data = [];
    this._statistical = {};
    this._isPagination = true;
    this._allChecked = false;
    this._allCheckedDisabled = false;
    this._indeterminate = false;
    this._headers = [];
    this._columns = [];
    this.contextmenuList = [];
    this.ps = 10;
    this.pi = 1;
    this.total = 0;
    this.loading = null;
    this.loadingDelay = 0;
    this.loadingIndicator = null;
    this.bordered = false;
    this.scroll = {
      x: null,
      y: null
    };
    this.showHeader = true;
    this.expandRowByClick = false;
    this.expandAccordion = false;
    this.expand = null;
    this.responsive = true;
    this.error = new EventEmitter();
    this.change = new EventEmitter();
    this.virtualScroll = false;
    this.virtualItemSize = 54;
    this.virtualMaxBufferPx = 200;
    this.virtualMinBufferPx = 100;
    this.virtualForTrackBy = (index) => index;
    this.trackBy = (_, item) => item;
    this.delonI18n.change.pipe(takeUntilDestroyed()).subscribe(() => {
      this.locale = this.delonI18n.getData("st");
      if (this._columns.length > 0) {
        this.updateTotalTpl();
        this.cd();
      }
    });
    this.i18nSrv?.change.pipe(takeUntilDestroyed(), filter(() => this._columns.length > 0)).subscribe(() => this.refreshColumns());
    this.setCog(configSrv.merge("st", ST_DEFAULT_CONFIG));
  }
  setCog(cog) {
    const copyMultiSort = __spreadValues({}, cog.multiSort);
    delete cog.multiSort;
    this.cog = cog;
    Object.assign(this, cog);
    if (copyMultiSort.global !== false) {
      this.multiSort = copyMultiSort;
    }
    this.columnSource.setCog(cog);
    this.dataSource.setCog(cog);
  }
  cd() {
    this.cdr.detectChanges();
    return this;
  }
  refreshData() {
    this._data = [...this._data];
    return this.cd();
  }
  renderTotal(total, range) {
    return this.totalTpl ? this.totalTpl.replace("{{total}}", total).replace("{{range[0]}}", range[0]).replace("{{range[1]}}", range[1]) : "";
  }
  changeEmit(type, data) {
    const res = {
      type,
      pi: this.pi,
      ps: this.ps,
      total: this.total
    };
    if (data != null) {
      res[type] = data;
    }
    this.change.emit(res);
  }
  // #region data
  /**
   * 获取过滤后所有数据
   * - 本地数据：包含排序、过滤后不分页数据
   * - 远程数据：不传递 `pi`、`ps` 两个参数
   */
  get filteredData() {
    return this.loadData({
      paginator: false
    }).pipe(map((res) => res.list));
  }
  updateTotalTpl() {
    const {
      total
    } = this.page;
    if (typeof total === "string" && total.length) {
      this.totalTpl = total;
    } else if (booleanAttribute(total)) {
      this.totalTpl = this.locale.total;
    } else {
      this.totalTpl = "";
    }
  }
  setLoading(val) {
    if (this.loading == null) {
      this._loading = val;
      this.cdr.detectChanges();
    }
  }
  loadData(options) {
    const {
      pi,
      ps,
      data,
      req,
      res,
      page,
      total,
      singleSort,
      multiSort,
      rowClassName,
      _columns,
      _headers
    } = this;
    return this.dataSource.process(__spreadValues({
      pi,
      ps,
      total,
      data,
      req,
      res,
      page,
      columns: _columns,
      headers: _headers,
      singleSort,
      multiSort,
      rowClassName,
      paginator: true,
      customRequest: this.customRequest || this.cog.customRequest
    }, options)).pipe(takeUntilDestroyed(this.destroy$));
  }
  loadPageData() {
    this.setLoading(true);
    return this.loadData().pipe(finalize(() => this.setLoading(false)), catchError((error) => {
      this.error.emit({
        type: "req",
        error
      });
      return throwError(() => error);
    }), map((result) => {
      const undefinedString = "undefined";
      if (typeof result.pi !== undefinedString) {
        this.pi = result.pi;
      }
      if (typeof result.ps !== undefinedString) {
        this.ps = result.ps;
      }
      if (typeof result.total !== undefinedString) {
        this.total = result.total;
      }
      if (typeof result.pageShow !== undefinedString) {
        this._isPagination = result.pageShow;
      }
      this._data = result.list ?? [];
      this._statistical = result.statistical;
      if (this.cdkVirtualScrollViewport != null) {
        Promise.resolve().then(() => this.cdkVirtualScrollViewport?.checkViewportSize());
      }
      this._refCheck();
      this.changeEmit("loaded", result.list);
      return this;
    }));
  }
  /** 清空所有数据 */
  clear(cleanStatus = true) {
    if (cleanStatus) {
      this.clearStatus();
    }
    this._data = [];
    return this.cd();
  }
  /** 清空所有状态 */
  clearStatus() {
    return this.clearCheck().clearRadio().clearFilter().clearSort();
  }
  /**
   * 根据页码重新加载数据
   *
   * @param pi 指定当前页码，默认：`1`
   * @param extraParams 重新指定 `extraParams` 值
   * @param options 选项
   */
  load(pi = 1, extraParams, options) {
    if (pi !== -1)
      this.pi = pi;
    if (typeof extraParams !== "undefined") {
      this.req.params = options && options.merge ? __spreadValues(__spreadValues({}, this.req.params), extraParams) : extraParams;
    }
    this._change("pi", options);
    return this;
  }
  /**
   * 重新刷新当前页
   *
   * @param extraParams 重新指定 `extraParams` 值
   */
  reload(extraParams, options) {
    return this.load(-1, extraParams, options);
  }
  /**
   * 重置且重新设置 `pi` 为 `1`，包含以下值：
   * - `check` 数据
   * - `radio` 数据
   * - `sort` 数据
   * - `fileter` 数据
   *
   * @param extraParams 重新指定 `extraParams` 值
   */
  reset(extraParams, options) {
    this.clearStatus().load(1, extraParams, options);
    return this;
  }
  _toTop(enforce) {
    if (!(enforce == null ? this.page.toTop : enforce))
      return;
    const el = this.el;
    el.scrollIntoView();
    this.doc.documentElement.scrollTop -= this.page.toTopOffset;
    if (this.scroll) {
      if (this.cdkVirtualScrollViewport) {
        this.cdkVirtualScrollViewport.scrollTo({
          top: 0,
          left: 0
        });
      } else {
        el.querySelector(".ant-table-body, .ant-table-content")?.scrollTo(0, 0);
      }
    }
  }
  _change(type, options) {
    if (type === "pi" || type === "ps" && this.pi <= Math.ceil(this.total / this.ps)) {
      this.loadPageData().subscribe(() => this._toTop(options?.toTop));
    }
    this.changeEmit(type);
  }
  closeOtherExpand(item) {
    if (this.expandAccordion === false)
      return;
    this._data.filter((i) => i !== item).forEach((i) => i.expand = false);
  }
  _rowClick(e, item, index, dbl) {
    const el = e.target;
    if (el.nodeName === "INPUT")
      return;
    const {
      expand,
      expandRowByClick
    } = this;
    if (!!expand && item.showExpand !== false && expandRowByClick) {
      item.expand = !item.expand;
      this.closeOtherExpand(item);
      this.changeEmit("expand", item);
      return;
    }
    const data = {
      e,
      item,
      index
    };
    if (dbl) {
      this.changeEmit("dblClick", data);
    } else {
      this._clickRowClassName(el, item, index);
      this.changeEmit("click", data);
    }
  }
  _clickRowClassName(el, item, index) {
    const cr = this.clickRowClassName;
    if (cr == null)
      return;
    const config = __spreadValues({
      exclusive: false
    }, typeof cr === "string" ? {
      fn: () => cr
    } : cr);
    const className = config.fn(item, index);
    const trEl = el.closest("tr");
    if (config.exclusive) {
      trEl.parentElement.querySelectorAll("tr").forEach((a) => a.classList.remove(className));
    }
    if (trEl.classList.contains(className)) {
      trEl.classList.remove(className);
    } else {
      trEl.classList.add(className);
    }
  }
  _expandChange(item, expand) {
    item.expand = expand;
    this.closeOtherExpand(item);
    this.changeEmit("expand", item);
  }
  _stopPropagation(ev) {
    ev.stopPropagation();
  }
  _refColAndData() {
    this._columns.forEach((c) => {
      this._data.forEach((i, idx) => {
        const values = i._values;
        if (c.type === "no") {
          const text = `${this.dataSource.getNoIndex(i, c, idx)}`;
          values[c.__point] = {
            text,
            _text: text,
            org: idx,
            safeType: "text"
          };
        }
        values[c.__point].props = this.dataSource.getCell(c, i, idx);
      });
    });
    return this.refreshData();
  }
  /**
   * Add a rows in the table, like this:
   *
   * ```
   * this.st.addRow(stDataItem)
   * ```
   *
   * **TIPS:** Don't change the `total` value, it is recommended to use the `reload` method if needed
   */
  addRow(data, options) {
    if (!Array.isArray(data))
      data = [data];
    this._data.splice(options?.index ?? 0, 0, ...data);
    return this.optimizeData()._refColAndData();
  }
  /**
   * Remove a row in the table, like this:
   *
   * ```
   * this.st.removeRow(0)
   * this.st.removeRow(stDataItem)
   * ```
   *
   * **TIPS:** Don't change the `total` value, it is recommended to use the `reload` method if needed
   */
  removeRow(data) {
    if (typeof data === "number") {
      this._data.splice(data, 1);
    } else {
      if (!Array.isArray(data)) {
        data = [data];
      }
      const curData = this._data;
      for (var i = curData.length; i--; ) {
        if (data.indexOf(curData[i]) !== -1) {
          curData.splice(i, 1);
        }
      }
    }
    return this._refCheck()._refColAndData();
  }
  /**
   * Sets the row value for the `index` in the table, like this:
   *
   * - `optinos.refreshSchema` Whether to refresh of st schemas
   * - `optinos.emitReload` Whether to trigger a reload http request when data is url
   *
   * ```
   * this.st.setRow(0, { price: 100 })
   * this.st.setRow(0, { price: 100, name: 'asdf' })
   * this.st.setRow(item, { price: 100 })
   * ```
   */
  setRow(index, item, options) {
    options = __spreadValues({
      refreshSchema: false,
      emitReload: false
    }, options);
    if (typeof index !== "number") {
      index = this._data.indexOf(index);
    }
    this._data[index] = deepMergeKey(this._data[index], false, item);
    this.optimizeData();
    if (options.refreshSchema) {
      this.resetColumns({
        emitReload: options.emitReload
      });
      return this;
    }
    return this.refreshData();
  }
  // #endregion
  // #region sort
  sort(col, value) {
    if (this.multiSort) {
      col._sort.default = value;
      col._sort.tick = this.dataSource.nextSortTick;
    } else {
      this._headers.forEach((row) => {
        row.forEach((item) => item.column._sort.default = item.column === col ? value : null);
      });
    }
    this.cdr.detectChanges();
    this.loadPageData().subscribe(() => {
      const res = {
        value,
        map: this.dataSource.getReqSortMap(this.singleSort, this.multiSort, this._headers),
        column: col
      };
      this.changeEmit("sort", res);
    });
  }
  clearSort() {
    this._headers.forEach((row) => {
      row.forEach((item) => item.column._sort.default = null);
    });
    return this;
  }
  // #endregion
  // #region filter
  _handleFilter(col, confirm) {
    if (!confirm) {
      this.columnSource.cleanFilter(col);
    }
    this.pi = 1;
    this.columnSource.updateDefault(col.filter);
    this.loadPageData().subscribe(() => this.changeEmit("filter", col));
  }
  handleFilterNotify(value) {
    this.changeEmit("filterChange", value);
  }
  clearFilter() {
    this._columns.filter((w) => w.filter && w.filter.default === true).forEach((col) => this.columnSource.cleanFilter(col));
    return this;
  }
  // #endregion
  // #region checkbox
  /** 清除所有 `checkbox` */
  clearCheck() {
    return this.checkAll(false);
  }
  _refCheck() {
    const validData = this._data.filter((w) => !w.disabled);
    const checkedList = validData.filter((w) => w.checked === true);
    this._allChecked = checkedList.length > 0 && checkedList.length === validData.length;
    const allUnChecked = validData.every((value) => !value.checked);
    this._indeterminate = !this._allChecked && !allUnChecked;
    this._allCheckedDisabled = this._data.length === this._data.filter((w) => w.disabled).length;
    return this.cd();
  }
  checkAll(checked) {
    checked = typeof checked === "undefined" ? this._allChecked : checked;
    this._data.filter((w) => !w.disabled).forEach((i) => i.checked = checked);
    return this._refCheck()._checkNotify().refreshData();
  }
  _rowSelection(row) {
    row.select(this._data);
    return this._refCheck()._checkNotify();
  }
  _checkNotify() {
    const res = this._data.filter((w) => !w.disabled && w.checked === true);
    this.changeEmit("checkbox", res);
    return this;
  }
  // #endregion
  // #region radio
  /** 清除所有 `radio` */
  clearRadio() {
    this._data.filter((w) => w.checked).forEach((item) => item.checked = false);
    this.changeEmit("radio", null);
    return this.refreshData();
  }
  // #endregion
  _handleTd(ev) {
    switch (ev.type) {
      case "checkbox":
        this._refCheck()._checkNotify();
        break;
      case "radio":
        this.changeEmit("radio", ev.item);
        this.refreshData();
        break;
    }
  }
  // #region export
  /**
   * 导出当前页，确保已经注册 `XlsxModule`
   *
   * @param newData 重新指定数据；若为 `true` 表示使用 `filteredData` 数据
   * @param opt 额外参数
   */
  export(newData, opt) {
    const data = Array.isArray(newData) ? this.dataSource.optimizeData({
      columns: this._columns,
      result: newData
    }) : this._data;
    (newData === true ? this.filteredData : of(data)).subscribe((res) => this.exportSrv.export(__spreadProps(__spreadValues({
      columens: this._columns
    }, opt), {
      data: res
    })));
  }
  // #endregion
  // #region resizable
  colResize({
    width
  }, column) {
    column.width = `${width}px`;
    this.changeEmit("resize", column);
  }
  // #endregion
  // #region contextmenu
  onContextmenu(event) {
    if (!this.contextmenu) {
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    const colEl = event.target.closest("[data-col-index]");
    if (!colEl) {
      return;
    }
    const colIndex = Number(colEl.dataset.colIndex);
    const rowIndex = Number(colEl.closest("tr").dataset.index);
    const isTitle = isNaN(rowIndex);
    const obs$ = this.contextmenu({
      event,
      type: isTitle ? "head" : "body",
      rowIndex: isTitle ? null : rowIndex,
      colIndex,
      data: isTitle ? null : this.list[rowIndex],
      column: this._columns[colIndex]
    });
    (isObservable(obs$) ? obs$ : of(obs$)).pipe(takeUntilDestroyed(this.destroy$), filter((res) => res.length > 0)).subscribe((res) => {
      this.contextmenuList = res.map((i) => {
        if (!Array.isArray(i.children)) {
          i.children = [];
        }
        return i;
      });
      this.cdr.detectChanges();
      this.cms.create(event, this.contextmenuTpl);
    });
  }
  // #endregion
  get cdkVirtualScrollViewport() {
    return this.orgTable?.cdkVirtualScrollViewport;
  }
  _resetColumns(options) {
    options = __spreadValues({
      emitReload: true,
      preClearData: false
    }, options);
    if (typeof options.columns !== "undefined") {
      this.columns = options.columns;
    }
    if (typeof options.pi !== "undefined") {
      this.pi = options.pi;
    }
    if (typeof options.ps !== "undefined") {
      this.ps = options.ps;
    }
    if (options.emitReload) {
      options.preClearData = true;
    }
    if (options.preClearData) {
      this._data = [];
    }
    this.refreshColumns();
    if (options.emitReload) {
      return this.loadPageData();
    } else {
      this.cd();
      return of(this);
    }
  }
  resetColumns(options) {
    return lastValueFrom(this._resetColumns(options));
  }
  refreshColumns() {
    const res = this.columnSource.process(this.columns, {
      widthMode: this.widthMode,
      resizable: this._resizable,
      safeType: this.cog.safeType
    });
    this._columns = res.columns;
    this._headers = res.headers;
    if (this.customWidthConfig === false && res.headerWidths != null) {
      this._widthConfig = res.headerWidths;
    }
    return this;
  }
  optimizeData() {
    this._data = this.dataSource.optimizeData({
      columns: this._columns,
      result: this._data,
      rowClassName: this.rowClassName
    });
    return this;
  }
  /**
   * Return pure data, `st` internally maintains a set of data for caching, this part of data may affect the backend
   *
   * 返回纯净数据，`st` 内部会维护一组用于缓存的数据，这部分数据可能会影响后端
   */
  pureItem(itemOrIndex) {
    if (typeof itemOrIndex === "number") {
      itemOrIndex = this._data[itemOrIndex];
    }
    if (!itemOrIndex) {
      return null;
    }
    const copyItem = deepCopy(itemOrIndex);
    ["_values", "_rowClassName"].forEach((key) => delete copyItem[key]);
    return copyItem;
  }
  ngAfterViewInit() {
    this.refreshColumns();
    if (!this.req.lazyLoad)
      this.loadPageData().subscribe();
    this.inied = true;
  }
  ngOnChanges(changes) {
    if (changes.loading) {
      this._loading = changes.loading.currentValue;
    }
    if (!this.inied)
      return;
    if (changes.columns) {
      this.refreshColumns().optimizeData();
    }
    if (changes.data) {
      this.loadPageData().subscribe();
    }
  }
};
_STComponent.\u0275fac = function STComponent_Factory(t) {
  return new (t || _STComponent)(\u0275\u0275directiveInject(AlainConfigService));
};
_STComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _STComponent,
  selectors: [["st"]],
  viewQuery: function STComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c18, 5);
      \u0275\u0275viewQuery(_c27, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.orgTable = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.contextmenuTpl = _t.first);
    }
  },
  hostVars: 14,
  hostBindings: function STComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("st", true)("st__p-left", ctx.page.placement === "left")("st__p-center", ctx.page.placement === "center")("st__width-strict", ctx.widthMode.type === "strict")("st__row-class", ctx.rowClassName)("ant-table-rep", ctx.responsive)("ant-table-rep__hide-header-footer", ctx.responsiveHideHeaderFooter);
    }
  },
  inputs: {
    req: "req",
    res: "res",
    page: "page",
    data: "data",
    columns: "columns",
    contextmenu: "contextmenu",
    ps: [InputFlags.HasDecoratorInputTransform, "ps", "ps", (v) => numberAttribute(v, 10)],
    pi: [InputFlags.HasDecoratorInputTransform, "pi", "pi", (v) => numberAttribute(v, 1)],
    total: [InputFlags.HasDecoratorInputTransform, "total", "total", (v) => numberAttribute(v, 0)],
    loading: "loading",
    loadingDelay: [InputFlags.HasDecoratorInputTransform, "loadingDelay", "loadingDelay", numberAttribute],
    loadingIndicator: "loadingIndicator",
    bordered: [InputFlags.HasDecoratorInputTransform, "bordered", "bordered", booleanAttribute],
    size: "size",
    scroll: "scroll",
    singleSort: "singleSort",
    multiSort: "multiSort",
    rowClassName: "rowClassName",
    clickRowClassName: "clickRowClassName",
    widthMode: "widthMode",
    widthConfig: "widthConfig",
    resizable: "resizable",
    header: "header",
    showHeader: [InputFlags.HasDecoratorInputTransform, "showHeader", "showHeader", booleanAttribute],
    footer: "footer",
    bodyHeader: "bodyHeader",
    body: "body",
    expandRowByClick: [InputFlags.HasDecoratorInputTransform, "expandRowByClick", "expandRowByClick", booleanAttribute],
    expandAccordion: [InputFlags.HasDecoratorInputTransform, "expandAccordion", "expandAccordion", booleanAttribute],
    expand: "expand",
    noResult: "noResult",
    responsive: [InputFlags.HasDecoratorInputTransform, "responsive", "responsive", booleanAttribute],
    responsiveHideHeaderFooter: [InputFlags.HasDecoratorInputTransform, "responsiveHideHeaderFooter", "responsiveHideHeaderFooter", booleanAttribute],
    virtualScroll: [InputFlags.HasDecoratorInputTransform, "virtualScroll", "virtualScroll", booleanAttribute],
    virtualItemSize: [InputFlags.HasDecoratorInputTransform, "virtualItemSize", "virtualItemSize", numberAttribute],
    virtualMaxBufferPx: [InputFlags.HasDecoratorInputTransform, "virtualMaxBufferPx", "virtualMaxBufferPx", numberAttribute],
    virtualMinBufferPx: [InputFlags.HasDecoratorInputTransform, "virtualMinBufferPx", "virtualMinBufferPx", numberAttribute],
    customRequest: "customRequest",
    virtualForTrackBy: "virtualForTrackBy",
    trackBy: "trackBy"
  },
  outputs: {
    error: "error",
    change: "change"
  },
  exportAs: ["st"],
  features: [\u0275\u0275ProvidersFeature([STDataSource, STRowSource, STColumnSource, STExport, DatePipe, YNPipe, DecimalPipe]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature],
  decls: 21,
  vars: 34,
  consts: [["titleTpl", ""], ["chkAllTpl", ""], ["table", ""], ["bodyTpl", ""], ["totalTpl", ""], ["contextmenuTpl", "nzDropdownMenu"], ["selectionMenu", "nzDropdownMenu"], [3, "nzPageIndexChange", "nzPageSizeChange", "contextmenu", "nzData", "nzPageIndex", "nzPageSize", "nzTotal", "nzShowPagination", "nzFrontPagination", "nzBordered", "nzSize", "nzLoading", "nzLoadingDelay", "nzLoadingIndicator", "nzTitle", "nzFooter", "nzScroll", "nzVirtualItemSize", "nzVirtualMaxBufferPx", "nzVirtualMinBufferPx", "nzVirtualForTrackBy", "nzNoResult", "nzPageSizeOptions", "nzShowQuickJumper", "nzShowSizeChanger", "nzPaginationPosition", "nzPaginationType", "nzItemRender", "nzSimple", "nzShowTotal", "nzWidthConfig"], [1, "st__body"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["nz-virtual-scroll", ""], ["nz-menu", "", 1, "st__contextmenu"], [3, "innerHTML"], [1, "st__head-optional", 3, "innerHTML"], ["nz-tooltip", "", "nz-icon", "", "nzType", "question-circle", 1, "st__head-tip", 3, "nzTooltipTitle"], ["nz-checkbox", "", 1, "st__checkall", 3, "ngModelChange", "nzDisabled", "ngModel", "nzIndeterminate"], ["nzWidth", "50px", 3, "rowSpan"], ["nz-resizable", "", 3, "colSpan", "rowSpan", "nzWidth", "nzLeft", "nzRight", "ngClass", "nzShowSort", "nzSortOrder", "nzCustomFilter", "st__has-filter", "nzDisabled", "nzMaxWidth", "nzMinWidth", "nzBounds", "nzPreview"], ["nz-resizable", "", 3, "colSpan", "rowSpan", "nzWidth", "nzLeft", "nzRight", "ngClass", "nzShowSort", "nzSortOrder", "nzCustomFilter", "st__has-filter", "nzDisabled", "nzMaxWidth", "nzMinWidth", "nzBounds", "nzPreview", "nzSortOrderChange", "nzResizeEnd", 4, "let"], ["nz-resizable", "", 3, "nzSortOrderChange", "nzResizeEnd", "colSpan", "rowSpan", "nzWidth", "nzLeft", "nzRight", "ngClass", "nzShowSort", "nzSortOrder", "nzCustomFilter", "nzDisabled", "nzMaxWidth", "nzMinWidth", "nzBounds", "nzPreview"], ["nzDirection", "right"], ["nz-th-extra", "", 3, "col", "f", "locale"], ["nzDirection", "right", 3, "click"], [1, "ant-table-selection"], [1, "ant-table-selection-extra"], ["nz-menu", "", 1, "ant-table-selection-menu"], ["nz-menu-item", "", 3, "innerHTML"], ["nz-dropdown", "", "nzPlacement", "bottomLeft", 1, "ant-table-selection-down", "st__checkall-selection", 3, "nzDropdownMenu"], ["nz-icon", "", "nzType", "down"], ["nz-menu-item", "", 3, "click", "innerHTML"], ["nz-th-extra", "", 3, "n", "handle", "col", "f", "locale"], [3, "click", "dblclick", "ngClass"], ["nzWidth", "50px", 3, "nzShowExpand", "nzExpand"], [3, "nzExpand"], ["nzWidth", "50px", 3, "nzExpandChange", "click", "nzShowExpand", "nzExpand"], [3, "nzLeft", "nzRight", "ngClass"], [1, "ant-table-rep__title"], [3, "n", "data", "i", "index", "c", "cIdx"], ["nz-submenu", "", 3, "nzTitle"]],
  template: function STComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275template(0, STComponent_ng_template_0_Template, 3, 3, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, STComponent_ng_template_2_Template, 1, 5, "ng-template", null, 1, \u0275\u0275templateRefExtractor);
      \u0275\u0275elementStart(4, "nz-table", 7, 2);
      \u0275\u0275twoWayListener("nzPageIndexChange", function STComponent_Template_nz_table_nzPageIndexChange_4_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.pi, $event) || (ctx.pi = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("nzPageIndexChange", function STComponent_Template_nz_table_nzPageIndexChange_4_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx._change("pi"));
      });
      \u0275\u0275twoWayListener("nzPageSizeChange", function STComponent_Template_nz_table_nzPageSizeChange_4_listener($event) {
        \u0275\u0275restoreView(_r1);
        \u0275\u0275twoWayBindingSet(ctx.ps, $event) || (ctx.ps = $event);
        return \u0275\u0275resetView($event);
      });
      \u0275\u0275listener("nzPageSizeChange", function STComponent_Template_nz_table_nzPageSizeChange_4_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx._change("ps"));
      })("contextmenu", function STComponent_Template_nz_table_contextmenu_4_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onContextmenu($event));
      });
      \u0275\u0275template(6, STComponent_Conditional_6_Template, 3, 0, "thead");
      \u0275\u0275elementStart(7, "tbody", 8);
      \u0275\u0275template(8, STComponent_Conditional_8_Template, 1, 4, null, 9)(9, STComponent_ng_template_9_Template, 6, 9, "ng-template", null, 3, \u0275\u0275templateRefExtractor)(11, STComponent_Conditional_11_Template, 1, 0, null, 10)(12, STComponent_Conditional_12_Template, 2, 0)(13, STComponent_Conditional_13_Template, 1, 4, null, 9);
      \u0275\u0275elementEnd();
      \u0275\u0275template(14, STComponent_ng_template_14_Template, 1, 1, "ng-template", null, 4, \u0275\u0275templateRefExtractor);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(16, "nz-dropdown-menu", null, 5)(18, "ul", 11);
      \u0275\u0275repeaterCreate(19, STComponent_For_20_Template, 2, 1, null, null, \u0275\u0275repeaterTrackByIndex);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      const totalTpl_r44 = \u0275\u0275reference(15);
      \u0275\u0275advance(4);
      \u0275\u0275classProp("st__no-column", ctx.noColumns);
      \u0275\u0275property("nzData", ctx._data);
      \u0275\u0275twoWayProperty("nzPageIndex", ctx.pi)("nzPageSize", ctx.ps);
      \u0275\u0275property("nzTotal", ctx.total)("nzShowPagination", ctx._isPagination)("nzFrontPagination", false)("nzBordered", ctx.bordered)("nzSize", ctx.size)("nzLoading", ctx.noColumns || ctx._loading)("nzLoadingDelay", ctx.loadingDelay)("nzLoadingIndicator", ctx.loadingIndicator)("nzTitle", ctx.header)("nzFooter", ctx.footer)("nzScroll", ctx.scroll)("nzVirtualItemSize", ctx.virtualItemSize)("nzVirtualMaxBufferPx", ctx.virtualMaxBufferPx)("nzVirtualMinBufferPx", ctx.virtualMinBufferPx)("nzVirtualForTrackBy", ctx.virtualForTrackBy)("nzNoResult", ctx.noResult)("nzPageSizeOptions", ctx.page.pageSizes)("nzShowQuickJumper", ctx.page.showQuickJumper)("nzShowSizeChanger", ctx.page.showSize)("nzPaginationPosition", ctx.page.position)("nzPaginationType", ctx.page.type)("nzItemRender", ctx.page.itemRender)("nzSimple", ctx.page.simple)("nzShowTotal", totalTpl_r44)("nzWidthConfig", ctx._widthConfig);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(6, ctx.showHeader ? 6 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(8, !ctx._loading ? 8 : -1);
      \u0275\u0275advance(3);
      \u0275\u0275conditional(11, ctx.virtualScroll ? 11 : 12);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(13, !ctx._loading ? 13 : -1);
      \u0275\u0275advance(6);
      \u0275\u0275repeater(ctx.contextmenuList);
    }
  },
  dependencies: () => [NgClass, NgTemplateOutlet, NgControlStatus, NgModel, LetDirective, NzTableComponent, NzThAddOnComponent, NzTableCellDirective, NzThMeasureDirective, NzTdAddOnComponent, NzTheadComponent, NzTbodyComponent, NzTrDirective, NzTableVirtualScrollDirective, NzCellFixedDirective, NzTrExpandDirective, NzTableFixedRowComponent, NzIconDirective, NzCheckboxComponent, NzMenuDirective, NzMenuItemComponent, NzSubMenuComponent, NzDropDownDirective, NzDropdownMenuComponent, NzTooltipDirective, NzResizableDirective, NzResizeHandleComponent, STFilterComponent, STTdComponent],
  encapsulation: 2,
  changeDetection: 0
});
var STComponent = _STComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STComponent, [{
    type: Component,
    args: [{
      selector: "st",
      exportAs: "st",
      providers: [STDataSource, STRowSource, STColumnSource, STExport, DatePipe, YNPipe, DecimalPipe],
      host: {
        "[class.st]": `true`,
        "[class.st__p-left]": `page.placement === 'left'`,
        "[class.st__p-center]": `page.placement === 'center'`,
        "[class.st__width-strict]": `widthMode.type === 'strict'`,
        "[class.st__row-class]": `rowClassName`,
        "[class.ant-table-rep]": `responsive`,
        "[class.ant-table-rep__hide-header-footer]": `responsiveHideHeaderFooter`
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `<ng-template #titleTpl let-i>
  <span [innerHTML]="i._text"></span>
  @if (i.optional) {
    <small class="st__head-optional" [innerHTML]="i.optional"></small>
  }
  @if (i.optionalHelp) {
    <i class="st__head-tip" nz-tooltip [nzTooltipTitle]="i.optionalHelp" nz-icon nzType="question-circle"></i>
  }
</ng-template>
<ng-template #chkAllTpl let-custom>
  <label
    nz-checkbox
    class="st__checkall"
    [nzDisabled]="_allCheckedDisabled"
    [(ngModel)]="_allChecked"
    [nzIndeterminate]="_indeterminate"
    (ngModelChange)="checkAll()"
    [class.ant-table-selection-select-all-custom]="custom"
  ></label>
</ng-template>
<nz-table
  #table
  [nzData]="_data"
  [(nzPageIndex)]="pi"
  (nzPageIndexChange)="_change('pi')"
  [(nzPageSize)]="ps"
  (nzPageSizeChange)="_change('ps')"
  [nzTotal]="total"
  [nzShowPagination]="_isPagination"
  [nzFrontPagination]="false"
  [nzBordered]="bordered"
  [nzSize]="size"
  [nzLoading]="noColumns || _loading"
  [nzLoadingDelay]="loadingDelay"
  [nzLoadingIndicator]="loadingIndicator"
  [nzTitle]="header!"
  [nzFooter]="footer!"
  [nzScroll]="scroll"
  [nzVirtualItemSize]="virtualItemSize"
  [nzVirtualMaxBufferPx]="virtualMaxBufferPx"
  [nzVirtualMinBufferPx]="virtualMinBufferPx"
  [nzVirtualForTrackBy]="virtualForTrackBy"
  [nzNoResult]="noResult!"
  [nzPageSizeOptions]="page.pageSizes!"
  [nzShowQuickJumper]="page.showQuickJumper"
  [nzShowSizeChanger]="page.showSize"
  [nzPaginationPosition]="page.position!"
  [nzPaginationType]="page.type!"
  [nzItemRender]="page.itemRender!"
  [nzSimple]="page.simple"
  [nzShowTotal]="totalTpl"
  [nzWidthConfig]="_widthConfig"
  (contextmenu)="onContextmenu($event)"
  [class.st__no-column]="noColumns"
>
  @if (showHeader) {
    <thead>
      @for (row of _headers; track row) {
        <tr>
          @if ($first && expand) {
            <th nzWidth="50px" [rowSpan]="_headers.length"></th>
          }
          @for (h of row; track h; let index = $index; let last = $last) {
            <th
              *let="h.column as _c"
              [colSpan]="h.colSpan"
              [rowSpan]="h.rowSpan"
              [nzWidth]="$any(_c).width"
              [nzLeft]="_c._left!"
              [nzRight]="_c._right!"
              [ngClass]="_c._className"
              [attr.data-col]="_c.indexKey"
              [attr.data-col-index]="index"
              [nzShowSort]="_c._sort.enabled"
              [nzSortOrder]="$any(_c)._sort.default"
              (nzSortOrderChange)="sort(_c, $event)"
              [nzCustomFilter]="!!_c.filter"
              [class.st__has-filter]="_c.filter"
              nz-resizable
              [nzDisabled]="last || $any(_c).resizable.disabled"
              [nzMaxWidth]="$any(_c).resizable.maxWidth"
              [nzMinWidth]="$any(_c).resizable.minWidth"
              [nzBounds]="$any(_c).resizable.bounds"
              [nzPreview]="$any(_c).resizable.preview"
              (nzResizeEnd)="colResize($event, _c)"
            >
              @if ($any(!last && !$any(_c).resizable.disabled)) {
                <nz-resize-handle nzDirection="right" (click)="_stopPropagation($event)">
                  <i></i>
                </nz-resize-handle>
              }
              @if (_c.__renderTitle) {
                <ng-template
                  [ngTemplateOutlet]="_c.__renderTitle!"
                  [ngTemplateOutletContext]="{ $implicit: h.column, index: index }"
                />
              } @else {
                @switch (_c.type) {
                  @case ('checkbox') {
                    @if (_c.selections!.length === 0) {
                      <ng-template [ngTemplateOutlet]="chkAllTpl" [ngTemplateOutletContext]="{ $implicit: false }" />
                    } @else {
                      <div class="ant-table-selection">
                        <ng-template [ngTemplateOutlet]="chkAllTpl" [ngTemplateOutletContext]="{ $implicit: true }" />
                        @if (_c.selections!.length) {
                          <div class="ant-table-selection-extra">
                            <div
                              nz-dropdown
                              nzPlacement="bottomLeft"
                              [nzDropdownMenu]="selectionMenu"
                              class="ant-table-selection-down st__checkall-selection"
                            >
                              <i nz-icon nzType="down"></i>
                            </div>
                          </div>
                        }
                        <nz-dropdown-menu #selectionMenu="nzDropdownMenu">
                          <ul nz-menu class="ant-table-selection-menu">
                            @for (rw of _c.selections; track $index) {
                              <li nz-menu-item (click)="_rowSelection(rw)" [innerHTML]="rw.text"></li>
                            }
                          </ul>
                        </nz-dropdown-menu>
                      </div>
                    }
                  }
                  @default {
                    <ng-template [ngTemplateOutlet]="titleTpl" [ngTemplateOutletContext]="{ $implicit: _c.title }" />
                  }
                }
              }
              @if (_c.filter) {
                <st-filter
                  nz-th-extra
                  [col]="h.column"
                  [f]="_c.filter"
                  [locale]="locale"
                  (n)="handleFilterNotify($event)"
                  (handle)="_handleFilter(_c, $event)"
                />
              }
            </th>
          }
        </tr>
      }
    </thead>
  }
  <tbody class="st__body">
    @if (!_loading) {
      <ng-template [ngTemplateOutlet]="bodyHeader!" [ngTemplateOutletContext]="{ $implicit: _statistical }" />
    }
    <ng-template #bodyTpl let-i let-index="index">
      <tr
        [attr.data-index]="index"
        (click)="_rowClick($event, i, index, false)"
        (dblclick)="_rowClick($event, i, index, true)"
        [ngClass]="i._rowClassName"
      >
        @if (expand) {
          <td
            [nzShowExpand]="expand && i.showExpand !== false"
            [nzExpand]="i.expand"
            (nzExpandChange)="_expandChange(i, $event)"
            (click)="_stopPropagation($event)"
            nzWidth="50px"
          ></td>
        }
        @for (c of _columns; track cIdx; let cIdx = $index) {
          @if (i._values[cIdx].props?.colSpan > 0 && i._values[cIdx].props?.rowSpan > 0) {
            <td
              [nzLeft]="!!c._left"
              [nzRight]="!!c._right"
              [attr.data-col-index]="cIdx"
              [ngClass]="c._className"
              [attr.colspan]="i._values[cIdx].props?.colSpan === 1 ? null : i._values[cIdx].props?.colSpan"
              [attr.rowspan]="i._values[cIdx].props?.rowSpan === 1 ? null : i._values[cIdx].props?.rowSpan"
            >
              @if (responsive) {
                <span class="ant-table-rep__title">
                  <ng-template [ngTemplateOutlet]="titleTpl" [ngTemplateOutletContext]="{ $implicit: c.title }" />
                </span>
              }
              <st-td [data]="_data" [i]="i" [index]="index" [c]="c" [cIdx]="cIdx" (n)="_handleTd($event)" />
            </td>
          }
        }
      </tr>
      <tr [nzExpand]="i.expand">
        <ng-template [ngTemplateOutlet]="expand" [ngTemplateOutletContext]="{ $implicit: i, index: index }" />
      </tr>
    </ng-template>
    @if (virtualScroll) {
      <ng-template nz-virtual-scroll let-i let-index="index">
        <ng-template [ngTemplateOutlet]="bodyTpl" [ngTemplateOutletContext]="{ $implicit: i, index: index }" />
      </ng-template>
    } @else {
      @for (i of _data; track trackBy($index, i)) {
        <ng-template [ngTemplateOutlet]="bodyTpl" [ngTemplateOutletContext]="{ $implicit: i, index: $index }" />
      }
    }
    @if (!_loading) {
      <ng-template [ngTemplateOutlet]="body!" [ngTemplateOutletContext]="{ $implicit: _statistical }" />
    }
  </tbody>
  <ng-template #totalTpl let-range="range" let-total>{{ renderTotal(total, range) }}</ng-template>
</nz-table>
<nz-dropdown-menu #contextmenuTpl="nzDropdownMenu">
  <ul nz-menu class="st__contextmenu">
    @for (i of contextmenuList; track $index) {
      @if (i.children!.length === 0) {
        <li nz-menu-item (click)="i.fn!(i)" [innerHTML]="i.text"></li>
      } @else {
        <li nz-submenu [nzTitle]="i.text">
          <ul>
            @for (ci of i.children; track $index) {
              <li nz-menu-item (click)="ci.fn!(ci)" [innerHTML]="ci.text"></li>
            }
          </ul>
        </li>
      }
    }
  </ul>
</nz-dropdown-menu>
`
    }]
  }], () => [{
    type: AlainConfigService
  }], {
    orgTable: [{
      type: ViewChild,
      args: ["table"]
    }],
    contextmenuTpl: [{
      type: ViewChild,
      args: ["contextmenuTpl"]
    }],
    req: [{
      type: Input
    }],
    res: [{
      type: Input
    }],
    page: [{
      type: Input
    }],
    data: [{
      type: Input
    }],
    columns: [{
      type: Input
    }],
    contextmenu: [{
      type: Input
    }],
    ps: [{
      type: Input,
      args: [{
        transform: (v) => numberAttribute(v, 10)
      }]
    }],
    pi: [{
      type: Input,
      args: [{
        transform: (v) => numberAttribute(v, 1)
      }]
    }],
    total: [{
      type: Input,
      args: [{
        transform: (v) => numberAttribute(v, 0)
      }]
    }],
    loading: [{
      type: Input
    }],
    loadingDelay: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    loadingIndicator: [{
      type: Input
    }],
    bordered: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    size: [{
      type: Input
    }],
    scroll: [{
      type: Input
    }],
    singleSort: [{
      type: Input
    }],
    multiSort: [{
      type: Input
    }],
    rowClassName: [{
      type: Input
    }],
    clickRowClassName: [{
      type: Input
    }],
    widthMode: [{
      type: Input
    }],
    widthConfig: [{
      type: Input
    }],
    resizable: [{
      type: Input
    }],
    header: [{
      type: Input
    }],
    showHeader: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    footer: [{
      type: Input
    }],
    bodyHeader: [{
      type: Input
    }],
    body: [{
      type: Input
    }],
    expandRowByClick: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    expandAccordion: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    expand: [{
      type: Input
    }],
    noResult: [{
      type: Input
    }],
    responsive: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    responsiveHideHeaderFooter: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    error: [{
      type: Output
    }],
    change: [{
      type: Output
    }],
    virtualScroll: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    virtualItemSize: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    virtualMaxBufferPx: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    virtualMinBufferPx: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    customRequest: [{
      type: Input
    }],
    virtualForTrackBy: [{
      type: Input
    }],
    trackBy: [{
      type: Input
    }]
  });
})();
var _STTdComponent = class _STTdComponent {
  constructor() {
    this.stComp = inject(STComponent, {
      host: true
    });
    this.router = inject(Router);
    this.modalHelper = inject(ModalHelper);
    this.drawerHelper = inject(DrawerHelper);
    this.n = new EventEmitter();
  }
  get routerState() {
    const {
      pi,
      ps,
      total
    } = this.stComp;
    return {
      pi,
      ps,
      total
    };
  }
  report(type) {
    this.n.emit({
      type,
      item: this.i,
      col: this.c
    });
  }
  _checkbox(value) {
    this.i.checked = value;
    this.report("checkbox");
  }
  _radio() {
    this.data.filter((w) => !w.disabled).forEach((i) => i.checked = false);
    this.i.checked = true;
    this.report("radio");
  }
  _link(e) {
    this._stopPropagation(e);
    const res = this.c.click(this.i, this.stComp);
    if (typeof res === "string") {
      this.router.navigateByUrl(res, {
        state: this.routerState
      });
    }
    return false;
  }
  _stopPropagation(ev) {
    ev.preventDefault();
    ev.stopPropagation();
  }
  _btn(btn, ev) {
    ev?.stopPropagation();
    const cog = this.stComp.cog;
    let record = this.i;
    if (btn.type === "modal" || btn.type === "static") {
      if (cog.modal.pureRecoard === true) {
        record = this.stComp.pureItem(record);
      }
      const modal = btn.modal;
      const obj = {
        [modal.paramsName]: record
      };
      this.modalHelper[btn.type === "modal" ? "create" : "createStatic"](modal.component, __spreadValues(__spreadValues({}, obj), modal.params && modal.params(record)), deepMergeKey({}, true, cog.modal, modal)).pipe(filter((w) => typeof w !== "undefined")).subscribe((res) => this.btnCallback(record, btn, res));
      return;
    } else if (btn.type === "drawer") {
      if (cog.drawer.pureRecoard === true) {
        record = this.stComp.pureItem(record);
      }
      const drawer = btn.drawer;
      const obj = {
        [drawer.paramsName]: record
      };
      this.drawerHelper.create(drawer.title, drawer.component, __spreadValues(__spreadValues({}, obj), drawer.params && drawer.params(record)), deepMergeKey({}, true, cog.drawer, drawer)).pipe(filter((w) => typeof w !== "undefined")).subscribe((res) => this.btnCallback(record, btn, res));
      return;
    } else if (btn.type === "link") {
      const clickRes = this.btnCallback(record, btn);
      if (typeof clickRes === "string") {
        this.router.navigateByUrl(clickRes, {
          state: this.routerState
        });
      }
      return;
    }
    this.btnCallback(record, btn);
  }
  btnCallback(record, btn, modal) {
    if (!btn.click)
      return;
    if (typeof btn.click === "string") {
      switch (btn.click) {
        case "load":
          this.stComp.load();
          break;
        case "reload":
          this.stComp.reload();
          break;
      }
    } else {
      return btn.click(record, modal, this.stComp);
    }
  }
};
_STTdComponent.\u0275fac = function STTdComponent_Factory(t) {
  return new (t || _STTdComponent)();
};
_STTdComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _STTdComponent,
  selectors: [["st-td"]],
  inputs: {
    c: "c",
    cIdx: "cIdx",
    data: "data",
    i: "i",
    index: "index"
  },
  outputs: {
    n: "n"
  },
  decls: 8,
  vars: 1,
  consts: [["btnTpl", ""], ["btnItemTpl", ""], ["btnTextTpl", ""], ["btnMenu", "nzDropdownMenu"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["nz-tooltip", "", 3, "nzTooltipTitle", "d-block", "width-100"], ["nz-tooltip", "", 3, "nzTooltipTitle"], ["nz-popconfirm", "", 1, "st__btn-text", 3, "nzPopconfirmTitle", "nzIcon", "nzCondition", "nzCancelText", "nzOkText", "nzOkType", "ngClass"], ["nz-popconfirm", "", 1, "st__btn-text", 3, "nzOnConfirm", "click", "nzPopconfirmTitle", "nzIcon", "nzCondition", "nzCancelText", "nzOkText", "nzOkType", "ngClass"], [1, "st__btn-text", 3, "click", "ngClass"], [3, "innerHTML", "ngClass"], ["nz-icon", "", 3, "nzIconfont"], ["nz-icon", "", 3, "nzType", "nzTheme", "nzSpin", "nzTwotoneColor"], ["nz-checkbox", "", 3, "ngModelChange", "nzDisabled", "ngModel"], ["nz-radio", "", 3, "ngModelChange", "nzDisabled", "ngModel"], [3, "click", "innerHTML"], [3, "nzColor", "nz-tooltip"], [3, "innerHTML"], [3, "nzStatus", "nzText", "nz-tooltip"], [3, "value", "options"], ["st-widget-host", "", 3, "record", "column"], [3, "innerText"], ["nzType", "vertical"], ["nz-dropdown", "", "nzOverlayClassName", "st__btn-sub", 3, "nzDropdownMenu"], ["nz-icon", "", "nzType", "down"], ["nz-menu", ""], ["nz-menu-divider", ""], ["nz-menu-item", ""]],
  template: function STTdComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, STTdComponent_ng_template_0_Template, 2, 1, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, STTdComponent_ng_template_2_Template, 2, 1, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(4, STTdComponent_ng_template_4_Template, 2, 5, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(6, STTdComponent_Conditional_6_Template, 1, 6, null, 4)(7, STTdComponent_Conditional_7_Template, 10, 1);
    }
    if (rf & 2) {
      \u0275\u0275advance(6);
      \u0275\u0275conditional(6, ctx.c.__render ? 6 : 7);
    }
  },
  dependencies: [NgClass, NgTemplateOutlet, NgControlStatus, NgModel, CellComponent, NzPopconfirmDirective, NzIconDirective, NzBadgeComponent, NzCheckboxComponent, NzDividerComponent, NzMenuDirective, NzMenuItemComponent, NzMenuDividerDirective, NzDropDownDirective, NzDropDownADirective, NzDropdownMenuComponent, NzRadioComponent, NzTagComponent, NzTooltipDirective, STWidgetHostDirective],
  encapsulation: 2,
  changeDetection: 0
});
var STTdComponent = _STTdComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STTdComponent, [{
    type: Component,
    args: [{
      selector: "st-td",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      template: `<ng-template #btnTpl let-i let-child="child">
  @if (i.tooltip) {
    <span nz-tooltip [nzTooltipTitle]="i.tooltip" [class.d-block]="child" [class.width-100]="child">
      <ng-template [ngTemplateOutlet]="btnItemTpl" [ngTemplateOutletContext]="{ $implicit: i }" />
    </span>
  } @else {
    <ng-template [ngTemplateOutlet]="btnItemTpl" [ngTemplateOutletContext]="{ $implicit: i }" />
  }
</ng-template>
<ng-template #btnItemTpl let-i>
  @if (i.pop) {
    <a
      nz-popconfirm
      [nzPopconfirmTitle]="i.pop.title"
      [nzIcon]="i.pop.icon"
      [nzCondition]="i.pop.condition(i)"
      [nzCancelText]="i.pop.cancelText"
      [nzOkText]="i.pop.okText"
      [nzOkType]="i.pop.okType"
      (nzOnConfirm)="_btn(i)"
      class="st__btn-text"
      [ngClass]="i._className"
      (click)="_stopPropagation($event)"
    >
      <ng-template [ngTemplateOutlet]="btnTextTpl" [ngTemplateOutletContext]="{ $implicit: i }" />
    </a>
  } @else {
    <a (click)="_btn(i, $event)" class="st__btn-text" [ngClass]="i._className">
      <ng-template [ngTemplateOutlet]="btnTextTpl" [ngTemplateOutletContext]="{ $implicit: i }" />
    </a>
  }
</ng-template>
<ng-template #btnTextTpl let-i>
  @if (i._icon) {
    @if (i._icon.iconfont) {
      <i nz-icon [nzIconfont]="i._icon.iconfont"></i>
    } @else {
      <i
        nz-icon
        [nzType]="i._icon.type"
        [nzTheme]="i._icon.theme"
        [nzSpin]="i._icon.spin"
        [nzTwotoneColor]="i._icon.twoToneColor"
      ></i>
    }
  }
  <span [innerHTML]="i._text" [ngClass]="{ 'pl-xs': i._icon }"></span>
</ng-template>
@if (c.__render) {
  <ng-template [ngTemplateOutlet]="c.__render!" [ngTemplateOutletContext]="{ $implicit: i, index: index, column: c }" />
} @else {
  @switch (c.type) {
    @case ('checkbox') {
      <label nz-checkbox [nzDisabled]="i.disabled" [ngModel]="i.checked" (ngModelChange)="_checkbox($event)"></label>
    }
    @case ('radio') {
      <label nz-radio [nzDisabled]="i.disabled" [ngModel]="i.checked" (ngModelChange)="_radio()"></label>
    }
    @case ('link') {
      <a (click)="_link($event)" [innerHTML]="i._values[cIdx]._text" [attr.title]="i._values[cIdx].text"></a>
    }
    @case ('tag') {
      <nz-tag [nzColor]="i._values[cIdx].color" [nz-tooltip]="i._values[cIdx].tooltip">
        <span [innerHTML]="i._values[cIdx]._text"></span>
      </nz-tag>
    }
    @case ('badge') {
      <nz-badge
        [nzStatus]="i._values[cIdx].color"
        [nzText]="i._values[cIdx].text"
        [nz-tooltip]="i._values[cIdx].tooltip"
      />
    }
    @case ('cell') {
      <cell [value]="i._values[cIdx].text" [options]="i._values[cIdx].cell ?? c.cell" />
    }
    @case ('widget') {
      <ng-template st-widget-host [record]="i" [column]="c" />
    }
    @default {
      @if (c.safeType === 'text') {
        <span [innerText]="i._values[cIdx]._text" [attr.title]="c._isTruncate ? i._values[cIdx].text : null"></span>
      } @else {
        <span [innerHTML]="i._values[cIdx]._text" [attr.title]="c._isTruncate ? i._values[cIdx].text : null"></span>
      }
    }
  }
  @for (btn of i._values[cIdx].buttons; track $index) {
    @if (btn.children!.length > 0) {
      <a nz-dropdown [nzDropdownMenu]="btnMenu" nzOverlayClassName="st__btn-sub">
        <span [innerHTML]="btn._text"></span>
        <i nz-icon nzType="down"></i>
      </a>
      <nz-dropdown-menu #btnMenu="nzDropdownMenu">
        <ul nz-menu>
          @for (subBtn of btn.children; track $index) {
            @if (subBtn.type === 'divider') {
              <li nz-menu-divider></li>
            } @else {
              <li nz-menu-item [class.st__btn-disabled]="subBtn._disabled">
                <ng-template
                  [ngTemplateOutlet]="btnTpl"
                  [ngTemplateOutletContext]="{ $implicit: subBtn, child: true }"
                />
              </li>
            }
          }
        </ul>
      </nz-dropdown-menu>
    } @else {
      <span [class.st__btn-disabled]="btn._disabled">
        <ng-template [ngTemplateOutlet]="btnTpl" [ngTemplateOutletContext]="{ $implicit: btn, child: false }" />
      </span>
    }
    @if (!$last) {
      <nz-divider nzType="vertical" />
    }
  }
}
`
    }]
  }], null, {
    c: [{
      type: Input
    }],
    cIdx: [{
      type: Input
    }],
    data: [{
      type: Input
    }],
    i: [{
      type: Input
    }],
    index: [{
      type: Input
    }],
    n: [{
      type: Output
    }]
  });
})();
var COMPONENTS2 = [STComponent, STRowDirective, STWidgetHostDirective];
var _STModule = class _STModule {
};
_STModule.\u0275fac = function STModule_Factory(t) {
  return new (t || _STModule)();
};
_STModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _STModule
});
_STModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [CommonModule, FormsModule, DelonACLModule, LetModule, CellModule, NzPopconfirmModule, NzTableModule, NzIconModule, NzBadgeModule, NzCheckboxModule, NzDividerModule, NzDropDownModule, NzMenuModule, NzRadioModule, NzTagModule, NzInputModule, NzToolTipModule, NzResizableModule, NzInputNumberModule, NzDatePickerModule]
});
var STModule = _STModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(STModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, DelonACLModule, LetModule, CellModule, NzPopconfirmModule, NzTableModule, NzIconModule, NzBadgeModule, NzCheckboxModule, NzDividerModule, NzDropDownModule, NzMenuModule, NzRadioModule, NzTagModule, NzInputModule, NzToolTipModule, NzResizableModule, NzInputNumberModule, NzDatePickerModule],
      declarations: [...COMPONENTS2, STFilterComponent, STTdComponent],
      exports: COMPONENTS2
    }]
  }], null, null);
})();
function provideSTWidgets(...widgets) {
  return makeEnvironmentProviders([{
    provide: ENVIRONMENT_INITIALIZER,
    multi: true,
    useValue: () => {
      const srv = inject(STWidgetRegistry);
      widgets.forEach((widget) => srv.register(widget.KEY, widget.type));
    }
  }]);
}

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-affix.mjs
var _c013 = ["fixedEl"];
var _c19 = ["*"];
var AffixRespondEvents;
(function(AffixRespondEvents2) {
  AffixRespondEvents2["resize"] = "resize";
  AffixRespondEvents2["scroll"] = "scroll";
  AffixRespondEvents2["touchstart"] = "touchstart";
  AffixRespondEvents2["touchmove"] = "touchmove";
  AffixRespondEvents2["touchend"] = "touchend";
  AffixRespondEvents2["pageshow"] = "pageshow";
  AffixRespondEvents2["load"] = "LOAD";
})(AffixRespondEvents || (AffixRespondEvents = {}));
function isTargetWindow(target) {
  return typeof window !== "undefined" && target === window;
}
function getTargetRect(target) {
  return !isTargetWindow(target) ? target.getBoundingClientRect() : {
    top: 0,
    left: 0,
    bottom: 0
  };
}
var NZ_CONFIG_MODULE_NAME9 = "affix";
var NZ_AFFIX_CLS_PREFIX = "ant-affix";
var NZ_AFFIX_DEFAULT_SCROLL_TIME = 20;
var _NzAffixComponent = class _NzAffixComponent {
  get target() {
    const el = this.nzTarget;
    return (typeof el === "string" ? this.document.querySelector(el) : el) || window;
  }
  constructor(el, doc, nzConfigService, scrollSrv, ngZone, platform, renderer, nzResizeObserver, cdr, directionality) {
    this.nzConfigService = nzConfigService;
    this.scrollSrv = scrollSrv;
    this.ngZone = ngZone;
    this.platform = platform;
    this.renderer = renderer;
    this.nzResizeObserver = nzResizeObserver;
    this.cdr = cdr;
    this.directionality = directionality;
    this._nzModuleName = NZ_CONFIG_MODULE_NAME9;
    this.nzChange = new EventEmitter();
    this.dir = "ltr";
    this.positionChangeSubscription = Subscription.EMPTY;
    this.offsetChanged$ = new ReplaySubject(1);
    this.destroy$ = new Subject();
    this.placeholderNode = el.nativeElement;
    this.document = doc;
  }
  ngOnInit() {
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.registerListeners();
      this.updatePosition({});
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
  }
  ngOnChanges(changes) {
    const {
      nzOffsetBottom,
      nzOffsetTop,
      nzTarget
    } = changes;
    if (nzOffsetBottom || nzOffsetTop) {
      this.offsetChanged$.next();
    }
    if (nzTarget) {
      this.registerListeners();
    }
  }
  ngAfterViewInit() {
    this.registerListeners();
  }
  ngOnDestroy() {
    this.removeListeners();
  }
  registerListeners() {
    if (!this.platform.isBrowser) {
      return;
    }
    this.removeListeners();
    const el = this.target === window ? this.document.body : this.target;
    this.positionChangeSubscription = this.ngZone.runOutsideAngular(() => merge(...Object.keys(AffixRespondEvents).map((evName) => fromEvent(this.target, evName)), this.offsetChanged$.pipe(map(() => ({}))), this.nzResizeObserver.observe(el)).pipe(throttleTime(NZ_AFFIX_DEFAULT_SCROLL_TIME, void 0, {
      trailing: true
    }), takeUntil(this.destroy$)).subscribe((e) => this.updatePosition(e)));
    this.timeout = setTimeout(() => this.updatePosition({}));
  }
  removeListeners() {
    clearTimeout(this.timeout);
    this.positionChangeSubscription.unsubscribe();
    this.destroy$.next(true);
    this.destroy$.complete();
  }
  getOffset(element, target) {
    const elemRect = element.getBoundingClientRect();
    const targetRect = getTargetRect(target);
    const scrollTop = this.scrollSrv.getScroll(target, true);
    const scrollLeft = this.scrollSrv.getScroll(target, false);
    const docElem = this.document.body;
    const clientTop = docElem.clientTop || 0;
    const clientLeft = docElem.clientLeft || 0;
    return {
      top: elemRect.top - targetRect.top + scrollTop - clientTop,
      left: elemRect.left - targetRect.left + scrollLeft - clientLeft,
      width: elemRect.width,
      height: elemRect.height
    };
  }
  setAffixStyle(e, affixStyle) {
    const originalAffixStyle = this.affixStyle;
    const isWindow = this.target === window;
    if (e.type === "scroll" && originalAffixStyle && affixStyle && isWindow) {
      return;
    }
    if (shallowEqual(originalAffixStyle, affixStyle)) {
      return;
    }
    const fixed = !!affixStyle;
    const wrapEl = this.fixedEl.nativeElement;
    this.renderer.setStyle(wrapEl, "cssText", getStyleAsText(affixStyle));
    this.affixStyle = affixStyle;
    if (fixed) {
      wrapEl.classList.add(NZ_AFFIX_CLS_PREFIX);
    } else {
      wrapEl.classList.remove(NZ_AFFIX_CLS_PREFIX);
    }
    this.updateRtlClass();
    if (affixStyle && !originalAffixStyle || !affixStyle && originalAffixStyle) {
      this.nzChange.emit(fixed);
    }
  }
  setPlaceholderStyle(placeholderStyle) {
    const originalPlaceholderStyle = this.placeholderStyle;
    if (shallowEqual(placeholderStyle, originalPlaceholderStyle)) {
      return;
    }
    this.renderer.setStyle(this.placeholderNode, "cssText", getStyleAsText(placeholderStyle));
    this.placeholderStyle = placeholderStyle;
  }
  syncPlaceholderStyle(e) {
    if (!this.affixStyle) {
      return;
    }
    this.renderer.setStyle(this.placeholderNode, "cssText", "");
    this.placeholderStyle = void 0;
    const styleObj = {
      width: this.placeholderNode.offsetWidth,
      height: this.fixedEl.nativeElement.offsetHeight
    };
    this.setAffixStyle(e, __spreadValues(__spreadValues({}, this.affixStyle), styleObj));
    this.setPlaceholderStyle(styleObj);
  }
  updatePosition(e) {
    if (!this.platform.isBrowser) {
      return;
    }
    const targetNode = this.target;
    let offsetTop = this.nzOffsetTop;
    const scrollTop = this.scrollSrv.getScroll(targetNode, true);
    const elemOffset = this.getOffset(this.placeholderNode, targetNode);
    const fixedNode = this.fixedEl.nativeElement;
    const elemSize = {
      width: fixedNode.offsetWidth,
      height: fixedNode.offsetHeight
    };
    const offsetMode = {
      top: false,
      bottom: false
    };
    if (typeof offsetTop !== "number" && typeof this.nzOffsetBottom !== "number") {
      offsetMode.top = true;
      offsetTop = 0;
    } else {
      offsetMode.top = typeof offsetTop === "number";
      offsetMode.bottom = typeof this.nzOffsetBottom === "number";
    }
    const targetRect = getTargetRect(targetNode);
    const targetInnerHeight = targetNode.innerHeight || targetNode.clientHeight;
    if (scrollTop >= elemOffset.top - offsetTop && offsetMode.top) {
      const width = elemOffset.width;
      const top = targetRect.top + offsetTop;
      this.setAffixStyle(e, {
        position: "fixed",
        top,
        left: targetRect.left + elemOffset.left,
        width
      });
      this.setPlaceholderStyle({
        width,
        height: elemSize.height
      });
    } else if (scrollTop <= elemOffset.top + elemSize.height + this.nzOffsetBottom - targetInnerHeight && offsetMode.bottom) {
      const targetBottomOffset = targetNode === window ? 0 : window.innerHeight - targetRect.bottom;
      const width = elemOffset.width;
      this.setAffixStyle(e, {
        position: "fixed",
        bottom: targetBottomOffset + this.nzOffsetBottom,
        left: targetRect.left + elemOffset.left,
        width
      });
      this.setPlaceholderStyle({
        width,
        height: elemOffset.height
      });
    } else {
      if (e.type === AffixRespondEvents.resize && this.affixStyle && this.affixStyle.position === "fixed" && this.placeholderNode.offsetWidth) {
        this.setAffixStyle(e, __spreadProps(__spreadValues({}, this.affixStyle), {
          width: this.placeholderNode.offsetWidth
        }));
      } else {
        this.setAffixStyle(e);
      }
      this.setPlaceholderStyle();
    }
    if (e.type === "resize") {
      this.syncPlaceholderStyle(e);
    }
  }
  updateRtlClass() {
    const wrapEl = this.fixedEl.nativeElement;
    if (this.dir === "rtl") {
      if (wrapEl.classList.contains(NZ_AFFIX_CLS_PREFIX)) {
        wrapEl.classList.add(`${NZ_AFFIX_CLS_PREFIX}-rtl`);
      } else {
        wrapEl.classList.remove(`${NZ_AFFIX_CLS_PREFIX}-rtl`);
      }
    } else {
      wrapEl.classList.remove(`${NZ_AFFIX_CLS_PREFIX}-rtl`);
    }
  }
};
_NzAffixComponent.\u0275fac = function NzAffixComponent_Factory(t) {
  return new (t || _NzAffixComponent)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(NzConfigService), \u0275\u0275directiveInject(NzScrollService), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(NzResizeObserver), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(Directionality, 8));
};
_NzAffixComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzAffixComponent,
  selectors: [["nz-affix"]],
  viewQuery: function NzAffixComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c013, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.fixedEl = _t.first);
    }
  },
  inputs: {
    nzTarget: "nzTarget",
    nzOffsetTop: "nzOffsetTop",
    nzOffsetBottom: "nzOffsetBottom"
  },
  outputs: {
    nzChange: "nzChange"
  },
  exportAs: ["nzAffix"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c19,
  decls: 3,
  vars: 0,
  consts: [["fixedEl", ""]],
  template: function NzAffixComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "div", null, 0);
      \u0275\u0275projection(2);
      \u0275\u0275elementEnd();
    }
  },
  dependencies: [BidiModule, PlatformModule],
  encapsulation: 2,
  changeDetection: 0
});
var NzAffixComponent = _NzAffixComponent;
__decorate([WithConfig(), InputNumber(void 0)], NzAffixComponent.prototype, "nzOffsetTop", void 0);
__decorate([WithConfig(), InputNumber(void 0)], NzAffixComponent.prototype, "nzOffsetBottom", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAffixComponent, [{
    type: Component,
    args: [{
      selector: "nz-affix",
      exportAs: "nzAffix",
      standalone: true,
      imports: [BidiModule, PlatformModule],
      template: `
    <div #fixedEl>
      <ng-content></ng-content>
    </div>
  `,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: NzConfigService
  }, {
    type: NzScrollService
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: Renderer2
  }, {
    type: NzResizeObserver
  }, {
    type: ChangeDetectorRef
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    fixedEl: [{
      type: ViewChild,
      args: ["fixedEl", {
        static: true
      }]
    }],
    nzTarget: [{
      type: Input
    }],
    nzOffsetTop: [{
      type: Input
    }],
    nzOffsetBottom: [{
      type: Input
    }],
    nzChange: [{
      type: Output
    }]
  });
})();
var _NzAffixModule = class _NzAffixModule {
};
_NzAffixModule.\u0275fac = function NzAffixModule_Factory(t) {
  return new (t || _NzAffixModule)();
};
_NzAffixModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzAffixModule
});
_NzAffixModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzAffixComponent]
});
var NzAffixModule = _NzAffixModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzAffixModule, [{
    type: NgModule,
    args: [{
      exports: [NzAffixComponent],
      imports: [NzAffixComponent]
    }]
  }], null, null);
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-breadcrumb.mjs
var _c014 = ["*"];
function NzBreadCrumbItemComponent_Conditional_0_ng_template_1_Template(rf, ctx) {
}
function NzBreadCrumbItemComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 1);
    \u0275\u0275template(1, NzBreadCrumbItemComponent_Conditional_0_ng_template_1_Template, 0, 0, "ng-template", 2);
    \u0275\u0275element(2, "span", 3);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const noMenuTpl_r2 = \u0275\u0275reference(4);
    \u0275\u0275property("nzDropdownMenu", ctx_r0.nzOverlay);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", noMenuTpl_r2);
  }
}
function NzBreadCrumbItemComponent_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function NzBreadCrumbItemComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzBreadCrumbItemComponent_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 2);
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const noMenuTpl_r2 = \u0275\u0275reference(4);
    \u0275\u0275property("ngTemplateOutlet", noMenuTpl_r2);
  }
}
function NzBreadCrumbItemComponent_Conditional_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r0.nzBreadCrumbComponent.nzSeparator, " ");
  }
}
function NzBreadCrumbItemComponent_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-breadcrumb-separator");
    \u0275\u0275template(1, NzBreadCrumbItemComponent_Conditional_2_ng_container_1_Template, 2, 1, "ng-container", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.nzBreadCrumbComponent.nzSeparator);
  }
}
function NzBreadCrumbItemComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 5);
    \u0275\u0275projection(1);
    \u0275\u0275elementEnd();
  }
}
var _forTrack03 = ($index, $item) => $item.url;
function NzBreadCrumbComponent_Conditional_1_For_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-breadcrumb-item")(1, "a", 0);
    \u0275\u0275listener("click", function NzBreadCrumbComponent_Conditional_1_For_1_Template_a_click_1_listener($event) {
      const breadcrumb_r2 = \u0275\u0275restoreView(_r1).$implicit;
      const ctx_r2 = \u0275\u0275nextContext(2);
      return \u0275\u0275resetView(ctx_r2.navigate(breadcrumb_r2.url, $event));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const breadcrumb_r2 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275attribute("href", breadcrumb_r2.url, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(breadcrumb_r2.label);
  }
}
function NzBreadCrumbComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275repeaterCreate(0, NzBreadCrumbComponent_Conditional_1_For_1_Template, 3, 2, "nz-breadcrumb-item", null, _forTrack03);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275repeater(ctx_r2.breadcrumbs);
  }
}
var _NzBreadCrumbSeparatorComponent = class _NzBreadCrumbSeparatorComponent {
};
_NzBreadCrumbSeparatorComponent.\u0275fac = function NzBreadCrumbSeparatorComponent_Factory(t) {
  return new (t || _NzBreadCrumbSeparatorComponent)();
};
_NzBreadCrumbSeparatorComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzBreadCrumbSeparatorComponent,
  selectors: [["nz-breadcrumb-separator"]],
  hostAttrs: [1, "ant-breadcrumb-separator"],
  exportAs: ["nzBreadcrumbSeparator"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c014,
  decls: 1,
  vars: 0,
  template: function NzBreadCrumbSeparatorComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
    }
  },
  encapsulation: 2
});
var NzBreadCrumbSeparatorComponent = _NzBreadCrumbSeparatorComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzBreadCrumbSeparatorComponent, [{
    type: Component,
    args: [{
      selector: "nz-breadcrumb-separator",
      exportAs: "nzBreadcrumbSeparator",
      standalone: true,
      template: `<ng-content></ng-content>`,
      host: {
        class: "ant-breadcrumb-separator"
      }
    }]
  }], null, null);
})();
var NzBreadcrumb = class {
};
var _NzBreadCrumbItemComponent = class _NzBreadCrumbItemComponent {
  constructor(nzBreadCrumbComponent) {
    this.nzBreadCrumbComponent = nzBreadCrumbComponent;
  }
};
_NzBreadCrumbItemComponent.\u0275fac = function NzBreadCrumbItemComponent_Factory(t) {
  return new (t || _NzBreadCrumbItemComponent)(\u0275\u0275directiveInject(NzBreadcrumb));
};
_NzBreadCrumbItemComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzBreadCrumbItemComponent,
  selectors: [["nz-breadcrumb-item"]],
  inputs: {
    nzOverlay: "nzOverlay"
  },
  exportAs: ["nzBreadcrumbItem"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c014,
  decls: 5,
  vars: 2,
  consts: [["noMenuTpl", ""], ["nz-dropdown", "", 1, "ant-breadcrumb-overlay-link", 3, "nzDropdownMenu"], [3, "ngTemplateOutlet"], ["nz-icon", "", "nzType", "down"], [4, "nzStringTemplateOutlet"], [1, "ant-breadcrumb-link"]],
  template: function NzBreadCrumbItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzBreadCrumbItemComponent_Conditional_0_Template, 3, 2, "span", 1)(1, NzBreadCrumbItemComponent_Conditional_1_Template, 1, 1)(2, NzBreadCrumbItemComponent_Conditional_2_Template, 2, 1, "nz-breadcrumb-separator")(3, NzBreadCrumbItemComponent_ng_template_3_Template, 2, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, !!ctx.nzOverlay ? 0 : 1);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(2, ctx.nzBreadCrumbComponent.nzSeparator ? 2 : -1);
    }
  },
  dependencies: [NgTemplateOutlet, NzBreadCrumbSeparatorComponent, NzDropDownModule, NzDropDownDirective, NzIconModule, NzIconDirective, NzOutletModule, NzStringTemplateOutletDirective],
  encapsulation: 2,
  changeDetection: 0
});
var NzBreadCrumbItemComponent = _NzBreadCrumbItemComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzBreadCrumbItemComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      selector: "nz-breadcrumb-item",
      exportAs: "nzBreadcrumbItem",
      preserveWhitespaces: false,
      standalone: true,
      imports: [NgTemplateOutlet, NzBreadCrumbSeparatorComponent, NzDropDownModule, NzIconModule, NzOutletModule],
      template: `
    @if (!!nzOverlay) {
      <span class="ant-breadcrumb-overlay-link" nz-dropdown [nzDropdownMenu]="nzOverlay">
        <ng-template [ngTemplateOutlet]="noMenuTpl"></ng-template>
        <span nz-icon nzType="down"></span>
      </span>
    } @else {
      <ng-template [ngTemplateOutlet]="noMenuTpl" />
    }

    @if (nzBreadCrumbComponent.nzSeparator) {
      <nz-breadcrumb-separator>
        <ng-container *nzStringTemplateOutlet="nzBreadCrumbComponent.nzSeparator">
          {{ nzBreadCrumbComponent.nzSeparator }}
        </ng-container>
      </nz-breadcrumb-separator>
    }

    <ng-template #noMenuTpl>
      <span class="ant-breadcrumb-link">
        <ng-content />
      </span>
    </ng-template>
  `
    }]
  }], () => [{
    type: NzBreadcrumb
  }], {
    nzOverlay: [{
      type: Input
    }]
  });
})();
var _NzBreadCrumbComponent = class _NzBreadCrumbComponent {
  constructor(injector, cdr, elementRef, renderer, directionality) {
    this.injector = injector;
    this.cdr = cdr;
    this.elementRef = elementRef;
    this.renderer = renderer;
    this.directionality = directionality;
    this.nzAutoGenerate = false;
    this.nzSeparator = "/";
    this.nzRouteLabel = "breadcrumb";
    this.nzRouteLabelFn = (label) => label;
    this.breadcrumbs = [];
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  ngOnInit() {
    if (this.nzAutoGenerate) {
      this.registerRouterChange();
    }
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.prepareComponentForRtl();
      this.cdr.detectChanges();
    });
    this.dir = this.directionality.value;
    this.prepareComponentForRtl();
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  navigate(url, e) {
    e.preventDefault();
    this.injector.get(Router).navigateByUrl(url);
  }
  registerRouterChange() {
    try {
      const router = this.injector.get(Router);
      const activatedRoute = this.injector.get(ActivatedRoute);
      router.events.pipe(
        filter((e) => e instanceof NavigationEnd),
        takeUntil(this.destroy$),
        startWith(true)
        // trigger initial render
      ).subscribe(() => {
        this.breadcrumbs = this.getBreadcrumbs(activatedRoute.root);
        this.cdr.markForCheck();
      });
    } catch (e) {
      throw new Error(`${PREFIX} You should import RouterModule if you want to use 'NzAutoGenerate'.`);
    }
  }
  getBreadcrumbs(route, url = "", breadcrumbs = []) {
    const children = route.children;
    if (children.length === 0) {
      return breadcrumbs;
    }
    for (const child of children) {
      if (child.outlet === PRIMARY_OUTLET) {
        const routeUrl = child.snapshot.url.map((segment) => segment.path).filter((path) => path).join("/");
        const nextUrl = routeUrl ? `${url}/${routeUrl}` : url;
        const breadcrumbLabel = this.nzRouteLabelFn(child.snapshot.data[this.nzRouteLabel]);
        if (routeUrl && breadcrumbLabel) {
          const breadcrumb = {
            label: breadcrumbLabel,
            params: child.snapshot.params,
            url: nextUrl
          };
          breadcrumbs.push(breadcrumb);
        }
        return this.getBreadcrumbs(child, nextUrl, breadcrumbs);
      }
    }
    return breadcrumbs;
  }
  prepareComponentForRtl() {
    if (this.dir === "rtl") {
      this.renderer.addClass(this.elementRef.nativeElement, "ant-breadcrumb-rtl");
    } else {
      this.renderer.removeClass(this.elementRef.nativeElement, "ant-breadcrumb-rtl");
    }
  }
};
_NzBreadCrumbComponent.\u0275fac = function NzBreadCrumbComponent_Factory(t) {
  return new (t || _NzBreadCrumbComponent)(\u0275\u0275directiveInject(Injector), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(Directionality, 8));
};
_NzBreadCrumbComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzBreadCrumbComponent,
  selectors: [["nz-breadcrumb"]],
  hostAttrs: [1, "ant-breadcrumb"],
  inputs: {
    nzAutoGenerate: "nzAutoGenerate",
    nzSeparator: "nzSeparator",
    nzRouteLabel: "nzRouteLabel",
    nzRouteLabelFn: "nzRouteLabelFn"
  },
  exportAs: ["nzBreadcrumb"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: NzBreadcrumb,
    useExisting: _NzBreadCrumbComponent
  }]), \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c014,
  decls: 2,
  vars: 1,
  consts: [[3, "click"]],
  template: function NzBreadCrumbComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
      \u0275\u0275template(1, NzBreadCrumbComponent_Conditional_1_Template, 2, 0);
    }
    if (rf & 2) {
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.nzAutoGenerate && ctx.breadcrumbs.length ? 1 : -1);
    }
  },
  dependencies: [NzBreadCrumbItemComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzBreadCrumbComponent = _NzBreadCrumbComponent;
__decorate([InputBoolean()], NzBreadCrumbComponent.prototype, "nzAutoGenerate", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzBreadCrumbComponent, [{
    type: Component,
    args: [{
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      selector: "nz-breadcrumb",
      exportAs: "nzBreadcrumb",
      preserveWhitespaces: false,
      providers: [{
        provide: NzBreadcrumb,
        useExisting: NzBreadCrumbComponent
      }],
      standalone: true,
      imports: [NzBreadCrumbItemComponent],
      template: `
    <ng-content />
    @if (nzAutoGenerate && breadcrumbs.length) {
      @for (breadcrumb of breadcrumbs; track breadcrumb.url) {
        <nz-breadcrumb-item>
          <a [attr.href]="breadcrumb.url" (click)="navigate(breadcrumb.url, $event)">{{ breadcrumb.label }}</a>
        </nz-breadcrumb-item>
      }
    }
  `,
      host: {
        class: "ant-breadcrumb"
      }
    }]
  }], () => [{
    type: Injector
  }, {
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    nzAutoGenerate: [{
      type: Input
    }],
    nzSeparator: [{
      type: Input
    }],
    nzRouteLabel: [{
      type: Input
    }],
    nzRouteLabelFn: [{
      type: Input
    }]
  });
})();
var _NzBreadCrumbModule = class _NzBreadCrumbModule {
};
_NzBreadCrumbModule.\u0275fac = function NzBreadCrumbModule_Factory(t) {
  return new (t || _NzBreadCrumbModule)();
};
_NzBreadCrumbModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzBreadCrumbModule
});
_NzBreadCrumbModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent]
});
var NzBreadCrumbModule = _NzBreadCrumbModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzBreadCrumbModule, [{
    type: NgModule,
    args: [{
      imports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent],
      exports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent, NzBreadCrumbSeparatorComponent]
    }]
  }], null, null);
})();

// node_modules/@delon/abc/fesm2022/page-header.mjs
var _c015 = ["conTpl"];
var _c110 = ["affix"];
var _c28 = ["*"];
var _c36 = () => ({
  rows: 3
});
var _c46 = () => ({
  size: "large",
  shape: "circle"
});
function PageHeaderComponent_Conditional_0_ng_template_2_Template(rf, ctx) {
}
function PageHeaderComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-affix", 3, 1);
    \u0275\u0275template(2, PageHeaderComponent_Conditional_0_ng_template_2_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const phTpl_r2 = \u0275\u0275reference(3);
    \u0275\u0275property("nzOffsetTop", ctx_r0.fixedOffsetTop);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngTemplateOutlet", phTpl_r2);
  }
}
function PageHeaderComponent_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function PageHeaderComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, PageHeaderComponent_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const phTpl_r2 = \u0275\u0275reference(3);
    \u0275\u0275property("ngTemplateOutlet", phTpl_r2);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_3_ng_template_0_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, PageHeaderComponent_ng_template_2_Conditional_3_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.breadcrumb);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_For_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "a", 15);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("routerLink", i_r4.link);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(i_r4.title);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_For_2_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
  }
  if (rf & 2) {
    const i_r4 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275textInterpolate1(" ", i_r4.title, " ");
  }
}
function PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_For_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-breadcrumb-item");
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_For_2_Conditional_1_Template, 2, 2, "a", 15)(2, PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_For_2_Conditional_2_Template, 1, 1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const i_r4 = ctx.$implicit;
    \u0275\u0275advance();
    \u0275\u0275conditional(1, i_r4.link ? 1 : 2);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-breadcrumb");
    \u0275\u0275repeaterCreate(1, PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_For_2_Template, 3, 1, "nz-breadcrumb-item", null, \u0275\u0275repeaterTrackByIndex);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275repeater(ctx_r0.paths);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, PageHeaderComponent_ng_template_2_Conditional_4_Conditional_0_Template, 3, 0, "nz-breadcrumb");
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275conditional(0, ctx_r0.paths && ctx_r0.paths.length > 0 ? 0 : -1);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_6_ng_template_1_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 8);
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_6_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.logo);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_9_Conditional_1_ng_template_0_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Conditional_9_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, PageHeaderComponent_ng_template_2_Conditional_9_Conditional_1_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275property("ngTemplateOutlet", ctx_r0._titleTpl);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_9_Conditional_2_Conditional_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(5);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.titleSub);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_9_Conditional_2_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "small");
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_9_Conditional_2_Conditional_1_ng_container_1_Template, 2, 1, "ng-container", 16);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(4);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.titleSub);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_9_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0);
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_9_Conditional_2_Conditional_1_Template, 2, 1, "small");
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(3);
    \u0275\u0275textInterpolate1(" ", ctx_r0._titleVal, " ");
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r0.titleSub ? 1 : -1);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "h1", 11);
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_9_Conditional_1_Template, 1, 1, null, 4)(2, PageHeaderComponent_ng_template_2_Conditional_9_Conditional_2_Template, 2, 2);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, ctx_r0._titleTpl ? 1 : 2);
  }
}
function PageHeaderComponent_ng_template_2_Conditional_10_ng_template_1_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Conditional_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 12);
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_10_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.action);
  }
}
function PageHeaderComponent_ng_template_2_ng_template_15_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Conditional_16_ng_template_1_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Conditional_16_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 14);
    \u0275\u0275template(1, PageHeaderComponent_ng_template_2_Conditional_16_ng_template_1_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.extra);
  }
}
function PageHeaderComponent_ng_template_2_ng_template_17_Template(rf, ctx) {
}
function PageHeaderComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 5)(1, "div")(2, "nz-skeleton", 6);
    \u0275\u0275template(3, PageHeaderComponent_ng_template_2_Conditional_3_Template, 1, 1, null, 4)(4, PageHeaderComponent_ng_template_2_Conditional_4_Template, 1, 1);
    \u0275\u0275elementStart(5, "div", 7);
    \u0275\u0275template(6, PageHeaderComponent_ng_template_2_Conditional_6_Template, 2, 1, "div", 8);
    \u0275\u0275elementStart(7, "div", 9)(8, "div", 10);
    \u0275\u0275template(9, PageHeaderComponent_ng_template_2_Conditional_9_Template, 3, 1, "h1", 11)(10, PageHeaderComponent_ng_template_2_Conditional_10_Template, 2, 1, "div", 12);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "div", 10)(12, "div", 13, 2);
    \u0275\u0275listener("cdkObserveContent", function PageHeaderComponent_ng_template_2_Template_div_cdkObserveContent_12_listener() {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.checkContent());
    });
    \u0275\u0275projection(14);
    \u0275\u0275template(15, PageHeaderComponent_ng_template_2_ng_template_15_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd();
    \u0275\u0275template(16, PageHeaderComponent_ng_template_2_Conditional_16_Template, 2, 1, "div", 14);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(17, PageHeaderComponent_ng_template_2_ng_template_17_Template, 0, 0, "ng-template", 4);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275classProp("page-header-rtl", ctx_r0.dir === "rtl");
    \u0275\u0275advance();
    \u0275\u0275classProp("page-header__wide", ctx_r0.wide);
    \u0275\u0275advance();
    \u0275\u0275property("nzLoading", ctx_r0.loading)("nzTitle", false)("nzActive", true)("nzParagraph", \u0275\u0275pureFunction0(16, _c36))("nzAvatar", \u0275\u0275pureFunction0(17, _c46));
    \u0275\u0275advance();
    \u0275\u0275conditional(3, ctx_r0.breadcrumb ? 3 : 4);
    \u0275\u0275advance(3);
    \u0275\u0275conditional(6, ctx_r0.logo ? 6 : -1);
    \u0275\u0275advance(3);
    \u0275\u0275conditional(9, ctx_r0._titleVal || ctx_r0._titleTpl ? 9 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(10, ctx_r0.action ? 10 : -1);
    \u0275\u0275advance(5);
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.content);
    \u0275\u0275advance();
    \u0275\u0275conditional(16, ctx_r0.extra ? 16 : -1);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.tab);
  }
}
var _PageHeaderComponent = class _PageHeaderComponent {
  get menus() {
    return this.menuSrv.getPathByUrl(this.router.url, this.recursiveBreadcrumb);
  }
  set title(value) {
    if (value instanceof TemplateRef) {
      this._title = null;
      this._titleTpl = value;
      this._titleVal = "";
    } else {
      this._title = value;
      this._titleVal = this._title;
    }
  }
  // #endregion
  constructor(settings, configSrv, platform) {
    this.renderer = inject(Renderer2);
    this.router = inject(Router);
    this.cdr = inject(ChangeDetectorRef);
    this.menuSrv = inject(MenuService);
    this.i18nSrv = inject(ALAIN_I18N_TOKEN, {
      optional: true
    });
    this.titleSrv = inject(TitleService, {
      optional: true
    });
    this.reuseSrv = inject(ReuseTabService, {
      optional: true
    });
    this.directionality = inject(Directionality, {
      optional: true
    });
    this.destroy$ = inject(DestroyRef);
    this.inited = false;
    this.isBrowser = true;
    this.dir = "ltr";
    this._titleVal = "";
    this.paths = [];
    this._title = null;
    this._titleTpl = null;
    this.loading = false;
    this.wide = false;
    this.breadcrumb = null;
    this.logo = null;
    this.action = null;
    this.content = null;
    this.extra = null;
    this.tab = null;
    this.isBrowser = platform.isBrowser;
    configSrv.attach(this, "pageHeader", {
      home: "\u9996\u9875",
      homeLink: "/",
      autoBreadcrumb: true,
      recursiveBreadcrumb: false,
      autoTitle: true,
      syncTitle: true,
      fixed: false,
      fixedOffsetTop: 64
    });
    settings.notify.pipe(takeUntilDestroyed(), filter((w) => this.affix && w.type === "layout" && w.name === "collapsed")).subscribe(() => this.affix.updatePosition({}));
    const obsList = [this.router.events.pipe(filter((ev) => ev instanceof NavigationEnd))];
    if (this.menuSrv != null)
      obsList.push(this.menuSrv.change);
    if (this.i18nSrv != null)
      obsList.push(this.i18nSrv.change);
    merge(...obsList).pipe(takeUntilDestroyed(), filter(() => this.inited)).subscribe(() => this.refresh());
  }
  refresh() {
    this.setTitle().genBreadcrumb();
    this.cdr.detectChanges();
  }
  genBreadcrumb() {
    if (this.breadcrumb || !this.autoBreadcrumb || this.menus.length <= 0) {
      this.paths = [];
      return;
    }
    const paths = [];
    this.menus.forEach((item) => {
      if (typeof item.hideInBreadcrumb !== "undefined" && item.hideInBreadcrumb)
        return;
      let title = item.text;
      if (item.i18n && this.i18nSrv)
        title = this.i18nSrv.fanyi(item.i18n);
      paths.push({
        title,
        link: item.link && [item.link]
      });
    });
    if (this.home) {
      paths.splice(0, 0, {
        title: this.homeI18n && this.i18nSrv && this.i18nSrv.fanyi(this.homeI18n) || this.home,
        link: [this.homeLink]
      });
    }
    this.paths = paths;
  }
  setTitle() {
    if (this._title == null && this._titleTpl == null && this.autoTitle && this.menus.length > 0) {
      const item = this.menus[this.menus.length - 1];
      let title = item.text;
      if (item.i18n && this.i18nSrv) {
        title = this.i18nSrv.fanyi(item.i18n);
      }
      this._titleVal = title;
    }
    if (this._titleVal && this.syncTitle) {
      if (this.titleSrv) {
        this.titleSrv.setTitle(this._titleVal);
      }
      if (!this.inited && this.reuseSrv) {
        this.reuseSrv.title = this._titleVal;
      }
    }
    return this;
  }
  checkContent() {
    if (isEmpty(this.conTpl.nativeElement)) {
      this.renderer.setAttribute(this.conTpl.nativeElement, "hidden", "");
    } else {
      this.renderer.removeAttribute(this.conTpl.nativeElement, "hidden");
    }
  }
  ngOnInit() {
    this.dir = this.directionality?.value;
    this.directionality?.change.pipe(takeUntilDestroyed(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.cdr.detectChanges();
    });
    this.refresh();
    this.inited = true;
  }
  ngAfterViewInit() {
    this.checkContent();
  }
  ngOnChanges() {
    if (this.inited) {
      this.refresh();
    }
  }
};
_PageHeaderComponent.\u0275fac = function PageHeaderComponent_Factory(t) {
  return new (t || _PageHeaderComponent)(\u0275\u0275directiveInject(SettingsService), \u0275\u0275directiveInject(AlainConfigService), \u0275\u0275directiveInject(Platform));
};
_PageHeaderComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _PageHeaderComponent,
  selectors: [["page-header"]],
  viewQuery: function PageHeaderComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c015, 5);
      \u0275\u0275viewQuery(_c110, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.conTpl = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.affix = _t.first);
    }
  },
  inputs: {
    title: "title",
    titleSub: "titleSub",
    loading: [InputFlags.HasDecoratorInputTransform, "loading", "loading", booleanAttribute],
    wide: [InputFlags.HasDecoratorInputTransform, "wide", "wide", booleanAttribute],
    home: "home",
    homeLink: "homeLink",
    homeI18n: "homeI18n",
    autoBreadcrumb: [InputFlags.HasDecoratorInputTransform, "autoBreadcrumb", "autoBreadcrumb", booleanAttribute],
    autoTitle: [InputFlags.HasDecoratorInputTransform, "autoTitle", "autoTitle", booleanAttribute],
    syncTitle: [InputFlags.HasDecoratorInputTransform, "syncTitle", "syncTitle", booleanAttribute],
    fixed: [InputFlags.HasDecoratorInputTransform, "fixed", "fixed", booleanAttribute],
    fixedOffsetTop: [InputFlags.HasDecoratorInputTransform, "fixedOffsetTop", "fixedOffsetTop", numberAttribute],
    breadcrumb: "breadcrumb",
    recursiveBreadcrumb: [InputFlags.HasDecoratorInputTransform, "recursiveBreadcrumb", "recursiveBreadcrumb", booleanAttribute],
    logo: "logo",
    action: "action",
    content: "content",
    extra: "extra",
    tab: "tab"
  },
  exportAs: ["pageHeader"],
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c28,
  decls: 4,
  vars: 1,
  consts: [["phTpl", ""], ["affix", ""], ["conTpl", ""], [3, "nzOffsetTop"], [3, "ngTemplateOutlet"], [1, "page-header"], [1, "d-block", 3, "nzLoading", "nzTitle", "nzActive", "nzParagraph", "nzAvatar"], [1, "page-header__detail"], [1, "page-header__logo"], [1, "page-header__main"], [1, "page-header__row"], [1, "page-header__title"], [1, "page-header__action"], [1, "page-header__desc", 3, "cdkObserveContent"], [1, "page-header__extra"], [3, "routerLink"], [4, "nzStringTemplateOutlet"]],
  template: function PageHeaderComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, PageHeaderComponent_Conditional_0_Template, 3, 2, "nz-affix", 3)(1, PageHeaderComponent_Conditional_1_Template, 1, 1)(2, PageHeaderComponent_ng_template_2_Template, 18, 18, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.isBrowser && ctx.fixed ? 0 : 1);
    }
  },
  dependencies: [NzAffixComponent, NgTemplateOutlet, NzSkeletonComponent, NzBreadCrumbComponent, NzBreadCrumbItemComponent, RouterLink, NzStringTemplateOutletDirective, CdkObserveContent],
  encapsulation: 2,
  changeDetection: 0
});
var PageHeaderComponent = _PageHeaderComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PageHeaderComponent, [{
    type: Component,
    args: [{
      selector: "page-header",
      exportAs: "pageHeader",
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [NzAffixComponent, NgTemplateOutlet, NzSkeletonComponent, NzBreadCrumbComponent, NzBreadCrumbItemComponent, RouterLink, NzStringTemplateOutletDirective, CdkObserveContent],
      template: `@if (isBrowser && fixed) {
  <nz-affix #affix [nzOffsetTop]="fixedOffsetTop">
    <ng-template [ngTemplateOutlet]="phTpl" />
  </nz-affix>
} @else {
  <ng-template [ngTemplateOutlet]="phTpl" />
}
<ng-template #phTpl>
  <div class="page-header" [class.page-header-rtl]="dir === 'rtl'">
    <div [class.page-header__wide]="wide">
      <nz-skeleton
        [nzLoading]="loading"
        [nzTitle]="false"
        [nzActive]="true"
        [nzParagraph]="{ rows: 3 }"
        [nzAvatar]="{ size: 'large', shape: 'circle' }"
        class="d-block"
      >
        @if (breadcrumb) {
          <ng-template [ngTemplateOutlet]="breadcrumb" />
        } @else {
          @if (paths && paths.length > 0) {
            <nz-breadcrumb>
              @for (i of paths; track $index) {
                <nz-breadcrumb-item>
                  @if (i.link) {
                    <a [routerLink]="i.link">{{ i.title }}</a>
                  } @else {
                    {{ i.title }}
                  }
                </nz-breadcrumb-item>
              }
            </nz-breadcrumb>
          }
        }
        <div class="page-header__detail">
          @if (logo) {
            <div class="page-header__logo">
              <ng-template [ngTemplateOutlet]="logo" />
            </div>
          }
          <div class="page-header__main">
            <div class="page-header__row">
              @if (_titleVal || _titleTpl) {
                <h1 class="page-header__title">
                  @if (_titleTpl) {
                    <ng-template [ngTemplateOutlet]="_titleTpl" />
                  } @else {
                    {{ _titleVal }}
                    @if (titleSub) {
                      <small>
                        <ng-container *nzStringTemplateOutlet="titleSub">{{ titleSub }}</ng-container>
                      </small>
                    }
                  }
                </h1>
              }
              @if (action) {
                <div class="page-header__action">
                  <ng-template [ngTemplateOutlet]="action" />
                </div>
              }
            </div>
            <div class="page-header__row">
              <div class="page-header__desc" (cdkObserveContent)="checkContent()" #conTpl>
                <ng-content />
                <ng-template [ngTemplateOutlet]="content!" />
              </div>
              @if (extra) {
                <div class="page-header__extra">
                  <ng-template [ngTemplateOutlet]="extra" />
                </div>
              }
            </div>
          </div>
        </div>
        <ng-template [ngTemplateOutlet]="tab!" />
      </nz-skeleton>
    </div>
  </div>
</ng-template>
`
    }]
  }], () => [{
    type: SettingsService
  }, {
    type: AlainConfigService
  }, {
    type: Platform
  }], {
    conTpl: [{
      type: ViewChild,
      args: ["conTpl", {
        static: false
      }]
    }],
    affix: [{
      type: ViewChild,
      args: ["affix", {
        static: false
      }]
    }],
    title: [{
      type: Input
    }],
    titleSub: [{
      type: Input
    }],
    loading: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    wide: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    home: [{
      type: Input
    }],
    homeLink: [{
      type: Input
    }],
    homeI18n: [{
      type: Input
    }],
    autoBreadcrumb: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    autoTitle: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    syncTitle: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    fixed: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    fixedOffsetTop: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    breadcrumb: [{
      type: Input
    }],
    recursiveBreadcrumb: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    logo: [{
      type: Input
    }],
    action: [{
      type: Input
    }],
    content: [{
      type: Input
    }],
    extra: [{
      type: Input
    }],
    tab: [{
      type: Input
    }]
  });
})();
var COMPONENTS3 = [PageHeaderComponent];
var _PageHeaderModule = class _PageHeaderModule {
};
_PageHeaderModule.\u0275fac = function PageHeaderModule_Factory(t) {
  return new (t || _PageHeaderModule)();
};
_PageHeaderModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _PageHeaderModule
});
_PageHeaderModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [CommonModule, RouterModule, ObserversModule, NzAffixModule, NzSkeletonModule, NzBreadCrumbModule, NzOutletModule, COMPONENTS3]
});
var PageHeaderModule = _PageHeaderModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PageHeaderModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, RouterModule, ObserversModule, NzAffixModule, NzSkeletonModule, NzBreadCrumbModule, NzOutletModule, ...COMPONENTS3],
      exports: COMPONENTS3
    }]
  }], null, null);
})();

// node_modules/@delon/abc/fesm2022/se.mjs
var _c016 = ["*"];
function SEContainerComponent_Conditional_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.title);
  }
}
function SEContainerComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275template(1, SEContainerComponent_Conditional_0_ng_container_1_Template, 2, 1, "ng-container", 1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.title);
  }
}
var _c111 = ["contentElement"];
var _c29 = (a0, a1) => ({
  "ant-form-item-required": a0,
  "se__no-colon": a1
});
function SEComponent_Conditional_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label);
  }
}
function SEComponent_Conditional_1_Conditional_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.optional);
  }
}
function SEComponent_Conditional_1_Conditional_3_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("nzTooltipTitle", ctx_r1.optionalHelp)("nzTooltipColor", ctx_r1.optionalHelpColor);
  }
}
function SEComponent_Conditional_1_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 10);
    \u0275\u0275template(1, SEComponent_Conditional_1_Conditional_3_ng_container_1_Template, 2, 1, "ng-container", 8)(2, SEComponent_Conditional_1_Conditional_3_Conditional_2_Template, 1, 2, "i", 11);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classProp("se__label-optional-no-text", !ctx_r1.optional);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.optional);
    \u0275\u0275advance();
    \u0275\u0275conditional(2, ctx_r1.optionalHelp ? 2 : -1);
  }
}
function SEComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "label", 2)(1, "span", 7);
    \u0275\u0275template(2, SEComponent_Conditional_1_ng_container_2_Template, 2, 1, "ng-container", 8);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, SEComponent_Conditional_1_Conditional_3_Template, 3, 4, "span", 9);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction2(4, _c29, ctx_r1.required, ctx_r1._noColon));
    \u0275\u0275attribute("for", ctx_r1._id);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.label);
    \u0275\u0275advance();
    \u0275\u0275conditional(3, ctx_r1.optional || ctx_r1.optionalHelp ? 3 : -1);
  }
}
function SEComponent_Conditional_7_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1._error);
  }
}
function SEComponent_Conditional_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 5)(1, "div", 12);
    \u0275\u0275template(2, SEComponent_Conditional_7_ng_container_2_Template, 2, 1, "ng-container", 8);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("@helpMotion", void 0);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1._error);
  }
}
function SEComponent_Conditional_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.extra);
  }
}
function SEComponent_Conditional_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 6);
    \u0275\u0275template(1, SEComponent_Conditional_8_ng_container_1_Template, 2, 1, "ng-container", 8);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.extra);
  }
}
var _SETitleComponent = class _SETitleComponent {
  constructor() {
    this.parentComp = inject(SEContainerComponent, {
      host: true,
      optional: true
    });
    this.el = inject(ElementRef).nativeElement;
    this.ren = inject(Renderer2);
    if (this.parentComp == null) {
      throw new Error(`[se-title] must include 'se-container' component`);
    }
  }
  setClass() {
    const {
      el
    } = this;
    const gutter = this.parentComp.gutter;
    this.ren.setStyle(el, "padding-left", `${gutter / 2}px`);
    this.ren.setStyle(el, "padding-right", `${gutter / 2}px`);
  }
  ngOnInit() {
    this.setClass();
  }
};
_SETitleComponent.\u0275fac = function SETitleComponent_Factory(t) {
  return new (t || _SETitleComponent)();
};
_SETitleComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SETitleComponent,
  selectors: [["se-title"], ["", "se-title", ""]],
  hostVars: 2,
  hostBindings: function SETitleComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("se__title", true);
    }
  },
  exportAs: ["seTitle"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c016,
  decls: 1,
  vars: 0,
  template: function SETitleComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var SETitleComponent = _SETitleComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SETitleComponent, [{
    type: Component,
    args: [{
      selector: "se-title, [se-title]",
      exportAs: "seTitle",
      template: "<ng-content />",
      host: {
        "[class.se__title]": "true"
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true
    }]
  }], () => [], null);
})();
var _SEContainerComponent = class _SEContainerComponent {
  get gutter() {
    return this.nzLayout === "horizontal" ? this._gutter : 0;
  }
  set gutter(value) {
    this._gutter = value;
  }
  get nzLayout() {
    return this._nzLayout;
  }
  set nzLayout(value) {
    this._nzLayout = value;
    if (value === "inline") {
      this.size = "compact";
    }
  }
  set errors(val) {
    this.setErrors(val);
  }
  get margin() {
    return -(this.gutter / 2);
  }
  get errorNotify() {
    return this.errorNotify$.pipe(filter((v) => v != null));
  }
  constructor(configSrv) {
    this.errorNotify$ = new BehaviorSubject(null);
    this.noColon = false;
    this.line = false;
    configSrv.attach(this, "se", {
      size: "default",
      nzLayout: "horizontal",
      gutter: 32,
      col: 2,
      labelWidth: 150,
      firstVisual: false,
      ingoreDirty: false
    });
  }
  setErrors(errors) {
    for (const error of errors) {
      this.errorNotify$.next(error);
    }
  }
};
_SEContainerComponent.\u0275fac = function SEContainerComponent_Factory(t) {
  return new (t || _SEContainerComponent)(\u0275\u0275directiveInject(AlainConfigService));
};
_SEContainerComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SEContainerComponent,
  selectors: [["se-container"], ["", "se-container", ""]],
  hostVars: 16,
  hostBindings: function SEContainerComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("margin-left", ctx.margin, "px")("margin-right", ctx.margin, "px");
      \u0275\u0275classProp("ant-row", true)("se__container", true)("se__horizontal", ctx.nzLayout === "horizontal")("se__vertical", ctx.nzLayout === "vertical")("se__inline", ctx.nzLayout === "inline")("se__compact", ctx.size === "compact");
    }
  },
  inputs: {
    colInCon: [InputFlags.HasDecoratorInputTransform, "se-container", "colInCon", (v) => v == null ? null : numberAttribute(v)],
    col: [InputFlags.HasDecoratorInputTransform, "col", "col", (v) => v == null ? null : numberAttribute(v)],
    labelWidth: [InputFlags.HasDecoratorInputTransform, "labelWidth", "labelWidth", (v) => v == null ? null : numberAttribute(v)],
    noColon: [InputFlags.HasDecoratorInputTransform, "noColon", "noColon", booleanAttribute],
    title: "title",
    gutter: [InputFlags.HasDecoratorInputTransform, "gutter", "gutter", numberAttribute],
    nzLayout: "nzLayout",
    size: "size",
    firstVisual: [InputFlags.HasDecoratorInputTransform, "firstVisual", "firstVisual", booleanAttribute],
    ingoreDirty: [InputFlags.HasDecoratorInputTransform, "ingoreDirty", "ingoreDirty", booleanAttribute],
    line: [InputFlags.HasDecoratorInputTransform, "line", "line", booleanAttribute],
    errors: "errors"
  },
  exportAs: ["seContainer"],
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c016,
  decls: 2,
  vars: 1,
  consts: [["se-title", ""], [4, "nzStringTemplateOutlet"]],
  template: function SEContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, SEContainerComponent_Conditional_0_Template, 2, 1, "div", 0);
      \u0275\u0275projection(1);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.title ? 0 : -1);
    }
  },
  dependencies: [SETitleComponent, NzStringTemplateOutletDirective],
  encapsulation: 2,
  changeDetection: 0
});
var SEContainerComponent = _SEContainerComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SEContainerComponent, [{
    type: Component,
    args: [{
      selector: "se-container, [se-container]",
      exportAs: "seContainer",
      template: `
    @if (title) {
      <div se-title>
        <ng-container *nzStringTemplateOutlet="title">{{ title }}</ng-container>
      </div>
    }
    <ng-content />
  `,
      host: {
        "[class.ant-row]": `true`,
        "[class.se__container]": `true`,
        "[class.se__horizontal]": `nzLayout === 'horizontal'`,
        "[class.se__vertical]": `nzLayout === 'vertical'`,
        "[class.se__inline]": `nzLayout === 'inline'`,
        "[class.se__compact]": `size === 'compact'`,
        "[style.margin-left.px]": `margin`,
        "[style.margin-right.px]": `margin`
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [SETitleComponent, NzStringTemplateOutletDirective]
    }]
  }], () => [{
    type: AlainConfigService
  }], {
    colInCon: [{
      type: Input,
      args: [{
        alias: "se-container",
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    col: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    labelWidth: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    noColon: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    title: [{
      type: Input
    }],
    gutter: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    nzLayout: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    firstVisual: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    ingoreDirty: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    line: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    errors: [{
      type: Input
    }]
  });
})();
var prefixCls = `se`;
var nextUniqueId = 0;
var _SEComponent = class _SEComponent {
  set error(val) {
    this.errorData = typeof val === "string" || val instanceof TemplateRef ? {
      "": val
    } : val;
  }
  set id(value) {
    this._id = value;
    this._autoId = false;
  }
  // #endregion
  get paddingValue() {
    return this.parentComp.gutter / 2;
  }
  get showErr() {
    return this.invalid && !!this._error && !this.compact;
  }
  get compact() {
    return this.parentComp.size === "compact";
  }
  get ngControl() {
    return this.ngModel || this.formControlName;
  }
  constructor() {
    this.parentComp = inject(SEContainerComponent, {
      host: true,
      optional: true
    });
    this.el = inject(ElementRef).nativeElement;
    this.rep = inject(ResponsiveService);
    this.ren = inject(Renderer2);
    this.cdr = inject(ChangeDetectorRef);
    this.statusSrv = inject(NzFormStatusService);
    this.destroy$ = inject(DestroyRef);
    this.clsMap = [];
    this.inited = false;
    this.onceFlag = false;
    this.errorData = {};
    this.isBindModel = false;
    this.invalid = false;
    this._labelWidth = null;
    this._noColon = null;
    this.optional = null;
    this.optionalHelp = null;
    this.required = false;
    this.controlClass = "";
    this.hideLabel = false;
    this._id = `_se-${++nextUniqueId}`;
    this._autoId = true;
    if (this.parentComp == null) {
      throw new Error(`[se] must include 'se-container' component`);
    }
    this.parentComp.errorNotify.pipe(takeUntilDestroyed(), filter((w) => this.inited && this.ngControl != null && this.ngControl.name === w.name)).subscribe((item) => {
      this.error = item.error;
      this.updateStatus(this.ngControl.invalid);
    });
  }
  setClass() {
    const {
      el,
      ren,
      clsMap,
      col,
      cdr,
      line,
      labelWidth,
      rep,
      noColon
    } = this;
    const parent = this.parentComp;
    this._noColon = noColon != null ? noColon : parent.noColon;
    this._labelWidth = parent.nzLayout === "horizontal" ? labelWidth != null ? labelWidth : parent.labelWidth : null;
    clsMap.forEach((cls) => ren.removeClass(el, cls));
    clsMap.length = 0;
    const parentCol = parent.colInCon || parent.col;
    const repCls = parent.nzLayout === "horizontal" ? rep.genCls(col != null ? col : parentCol, parentCol) : [];
    clsMap.push(`ant-form-item`, ...repCls, `${prefixCls}__item`);
    if (line || parent.line) {
      clsMap.push(`${prefixCls}__line`);
    }
    clsMap.forEach((cls) => ren.addClass(el, cls));
    cdr.detectChanges();
    return this;
  }
  bindModel() {
    if (!this.ngControl || this.isBindModel)
      return;
    this.isBindModel = true;
    this.ngControl.statusChanges.pipe(takeUntilDestroyed(this.destroy$)).subscribe((res) => this.updateStatus(res === "INVALID"));
    if (this._autoId) {
      const controlAccessor = this.ngControl.valueAccessor;
      const control = (controlAccessor?.elementRef || controlAccessor?._elementRef)?.nativeElement;
      if (!!control) {
        if (control.id) {
          this._id = control.id;
        } else {
          control.id = this._id;
        }
      }
    }
    if (this.required !== true) {
      let required = this.ngControl?.control?.hasValidator(Validators.required);
      if (required !== true) {
        const rawValidators = this.ngControl?._rawValidators;
        required = rawValidators.find((w) => w instanceof RequiredValidator) != null;
      }
      this.required = required;
      this.cdr.detectChanges();
    }
  }
  updateStatus(invalid) {
    if (this.ngControl?.disabled || this.ngControl?.isDisabled) {
      return;
    }
    this.invalid = !this.onceFlag && invalid && this.parentComp.ingoreDirty === false && !this.ngControl?.dirty ? false : invalid;
    const errors = this.ngControl?.errors;
    if (errors != null && Object.keys(errors).length > 0) {
      const key = Object.keys(errors)[0] || "";
      const err = this.errorData[key];
      this._error = err != null ? err : this.errorData[""] || "";
    }
    this.statusSrv.formStatusChanges.next({
      status: this.invalid ? "error" : "",
      hasFeedback: false
    });
    this.cdr.detectChanges();
  }
  checkContent() {
    const el = this.contentElement.nativeElement;
    const cls = `${prefixCls}__item-empty`;
    if (isEmpty(el)) {
      this.ren.addClass(el, cls);
    } else {
      this.ren.removeClass(el, cls);
    }
  }
  ngAfterContentInit() {
    this.checkContent();
  }
  ngOnChanges() {
    this.onceFlag = this.parentComp.firstVisual;
    if (this.inited) {
      this.setClass().bindModel();
    }
  }
  ngAfterViewInit() {
    this.setClass().bindModel();
    this.inited = true;
    if (this.onceFlag) {
      Promise.resolve().then(() => {
        this.updateStatus(this.ngControl?.invalid);
        this.onceFlag = false;
      });
    }
  }
};
_SEComponent.\u0275fac = function SEComponent_Factory(t) {
  return new (t || _SEComponent)();
};
_SEComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SEComponent,
  selectors: [["se"]],
  contentQueries: function SEComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, NgModel, 7);
      \u0275\u0275contentQuery(dirIndex, FormControlName, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.ngModel = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.formControlName = _t.first);
    }
  },
  viewQuery: function SEComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c111, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.contentElement = _t.first);
    }
  },
  hostVars: 10,
  hostBindings: function SEComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("padding-left", ctx.paddingValue, "px")("padding-right", ctx.paddingValue, "px");
      \u0275\u0275classProp("se__hide-label", ctx.hideLabel)("ant-form-item-has-error", ctx.invalid)("ant-form-item-with-help", ctx.showErr);
    }
  },
  inputs: {
    optional: "optional",
    optionalHelp: "optionalHelp",
    optionalHelpColor: "optionalHelpColor",
    error: "error",
    extra: "extra",
    label: "label",
    col: [InputFlags.HasDecoratorInputTransform, "col", "col", (v) => v == null ? null : numberAttribute(v)],
    required: [InputFlags.HasDecoratorInputTransform, "required", "required", booleanAttribute],
    controlClass: "controlClass",
    line: [InputFlags.HasDecoratorInputTransform, "line", "line", (v) => v == null ? null : booleanAttribute(v)],
    labelWidth: [InputFlags.HasDecoratorInputTransform, "labelWidth", "labelWidth", (v) => v == null ? null : numberAttribute(v)],
    noColon: [InputFlags.HasDecoratorInputTransform, "noColon", "noColon", (v) => v == null ? null : booleanAttribute(v)],
    hideLabel: [InputFlags.HasDecoratorInputTransform, "hideLabel", "hideLabel", booleanAttribute],
    id: "id"
  },
  exportAs: ["se"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([NzFormStatusService]), \u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c016,
  decls: 9,
  vars: 10,
  consts: [["contentElement", ""], [1, "ant-form-item-label"], [1, "se__label", 3, "ngClass"], [1, "ant-form-item-control", "se__control"], [1, "ant-form-item-control-input-content", 3, "cdkObserveContent"], [1, "ant-form-item-explain", "ant-form-item-explain-connected"], [1, "ant-form-item-extra"], [1, "se__label-text"], [4, "nzStringTemplateOutlet"], [1, "se__label-optional", 3, "se__label-optional-no-text"], [1, "se__label-optional"], ["nz-tooltip", "", "nz-icon", "", "nzType", "question-circle", 3, "nzTooltipTitle", "nzTooltipColor"], ["role", "alert", 1, "ant-form-item-explain-error"]],
  template: function SEComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "div", 1);
      \u0275\u0275template(1, SEComponent_Conditional_1_Template, 4, 7, "label", 2);
      \u0275\u0275elementEnd();
      \u0275\u0275elementStart(2, "div", 3)(3, "div")(4, "div", 4, 0);
      \u0275\u0275listener("cdkObserveContent", function SEComponent_Template_div_cdkObserveContent_4_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.checkContent());
      });
      \u0275\u0275projection(6);
      \u0275\u0275elementEnd()();
      \u0275\u0275template(7, SEComponent_Conditional_7_Template, 3, 2, "div", 5)(8, SEComponent_Conditional_8_Template, 2, 1, "div", 6);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275styleProp("width", ctx._labelWidth, "px");
      \u0275\u0275classProp("se__nolabel", ctx.hideLabel || !ctx.label);
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.label ? 1 : -1);
      \u0275\u0275advance(2);
      \u0275\u0275classMapInterpolate1("ant-form-item-control-input ", ctx.controlClass, "");
      \u0275\u0275advance(4);
      \u0275\u0275conditional(7, ctx.showErr ? 7 : -1);
      \u0275\u0275advance();
      \u0275\u0275conditional(8, ctx.extra && !ctx.compact ? 8 : -1);
    }
  },
  dependencies: [NgClass, NzStringTemplateOutletDirective, NzTooltipDirective, NzIconDirective, CdkObserveContent],
  encapsulation: 2,
  data: {
    animation: [helpMotion]
  },
  changeDetection: 0
});
var SEComponent = _SEComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SEComponent, [{
    type: Component,
    args: [{
      selector: "se",
      exportAs: "se",
      host: {
        "[style.padding-left.px]": "paddingValue",
        "[style.padding-right.px]": "paddingValue",
        "[class.se__hide-label]": "hideLabel",
        "[class.ant-form-item-has-error]": "invalid",
        "[class.ant-form-item-with-help]": "showErr"
      },
      preserveWhitespaces: false,
      providers: [NzFormStatusService],
      animations: [helpMotion],
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [NgClass, NzStringTemplateOutletDirective, NzTooltipDirective, NzIconDirective, CdkObserveContent],
      template: `<div class="ant-form-item-label" [class.se__nolabel]="hideLabel || !label" [style.width.px]="_labelWidth">
  @if (label) {
    <label
      [attr.for]="_id"
      class="se__label"
      [ngClass]="{ 'ant-form-item-required': required, 'se__no-colon': _noColon }"
    >
      <span class="se__label-text">
        <ng-container *nzStringTemplateOutlet="label">{{ label }}</ng-container>
      </span>
      @if (optional || optionalHelp) {
        <span class="se__label-optional" [class.se__label-optional-no-text]="!optional">
          <ng-container *nzStringTemplateOutlet="optional">{{ optional }}</ng-container>
          @if (optionalHelp) {
            <i
              nz-tooltip
              [nzTooltipTitle]="optionalHelp"
              [nzTooltipColor]="optionalHelpColor"
              nz-icon
              nzType="question-circle"
            ></i>
          }
        </span>
      }
    </label>
  }
</div>
<div class="ant-form-item-control se__control">
  <div class="ant-form-item-control-input {{ controlClass }}">
    <div class="ant-form-item-control-input-content" (cdkObserveContent)="checkContent()" #contentElement>
      <ng-content />
    </div>
  </div>
  @if (showErr) {
    <div @helpMotion class="ant-form-item-explain ant-form-item-explain-connected">
      <div role="alert" class="ant-form-item-explain-error">
        <ng-container *nzStringTemplateOutlet="_error">{{ _error }}</ng-container>
      </div>
    </div>
  }
  @if (extra && !compact) {
    <div class="ant-form-item-extra">
      <ng-container *nzStringTemplateOutlet="extra">{{ extra }}</ng-container>
    </div>
  }
</div>
`
    }]
  }], () => [], {
    ngModel: [{
      type: ContentChild,
      args: [NgModel, {
        static: true
      }]
    }],
    formControlName: [{
      type: ContentChild,
      args: [FormControlName, {
        static: true
      }]
    }],
    contentElement: [{
      type: ViewChild,
      args: ["contentElement", {
        static: true
      }]
    }],
    optional: [{
      type: Input
    }],
    optionalHelp: [{
      type: Input
    }],
    optionalHelpColor: [{
      type: Input
    }],
    error: [{
      type: Input
    }],
    extra: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    col: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    required: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    controlClass: [{
      type: Input
    }],
    line: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : booleanAttribute(v)
      }]
    }],
    labelWidth: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    noColon: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : booleanAttribute(v)
      }]
    }],
    hideLabel: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    id: [{
      type: Input
    }]
  });
})();
var COMPONENTS4 = [SEContainerComponent, SEComponent, SETitleComponent];
var _SEModule = class _SEModule {
};
_SEModule.\u0275fac = function SEModule_Factory(t) {
  return new (t || _SEModule)();
};
_SEModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _SEModule
});
_SEModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [CommonModule, NzToolTipModule, NzIconModule, NzOutletModule]
});
var SEModule = _SEModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SEModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, NzToolTipModule, NzIconModule, NzOutletModule, ...COMPONENTS4],
      exports: COMPONENTS4
    }]
  }], null, null);
})();

// node_modules/@delon/abc/fesm2022/sv.mjs
var _c017 = ["*"];
function SVContainerComponent_Conditional_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r0.title);
  }
}
function SVContainerComponent_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "sv-title");
    \u0275\u0275template(1, SVContainerComponent_Conditional_1_ng_container_1_Template, 2, 1, "ng-container", 1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r0.title);
  }
}
function SVValueComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "em", 0);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("innerHTML", ctx_r0.prefix, \u0275\u0275sanitizeHtml);
  }
}
function SVValueComponent_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "em", 2);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("innerHTML", ctx_r0.unit, \u0275\u0275sanitizeHtml);
  }
}
var _c112 = ["conEl"];
function SVComponent_Conditional_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.label);
  }
}
function SVComponent_Conditional_0_Conditional_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.optional);
  }
}
function SVComponent_Conditional_0_Conditional_3_Conditional_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "i", 10);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(3);
    \u0275\u0275property("nzTooltipTitle", ctx_r1.optionalHelp)("nzTooltipColor", ctx_r1.optionalHelpColor);
  }
}
function SVComponent_Conditional_0_Conditional_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 9);
    \u0275\u0275template(1, SVComponent_Conditional_0_Conditional_3_ng_container_1_Template, 2, 1, "ng-container", 7)(2, SVComponent_Conditional_0_Conditional_3_Conditional_2_Template, 1, 2, "i", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275classProp("sv__label-optional-no-text", !ctx_r1.optional);
    \u0275\u0275advance();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.optional);
    \u0275\u0275advance();
    \u0275\u0275conditional(2, ctx_r1.optionalHelp ? 2 : -1);
  }
}
function SVComponent_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 5)(1, "span", 6);
    \u0275\u0275template(2, SVComponent_Conditional_0_ng_container_2_Template, 2, 1, "ng-container", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275template(3, SVComponent_Conditional_0_Conditional_3_Template, 3, 4, "span", 8);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275styleProp("width", ctx_r1.labelWidth, "px");
    \u0275\u0275classProp("sv__label-empty", !ctx_r1.label)("sv__label-width", ctx_r1.labelWidth !== null && ctx_r1.labelWidth !== void 0)("sv__no-colon", ctx_r1._noColon);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.label);
    \u0275\u0275advance();
    \u0275\u0275conditional(3, ctx_r1.optional || ctx_r1.optionalHelp ? 3 : -1);
  }
}
function SVComponent_Conditional_5_span_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 4);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate(ctx_r1.unit);
  }
}
function SVComponent_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, SVComponent_Conditional_5_span_0_Template, 2, 1, "span", 11);
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275property("nzStringTemplateOutlet", ctx_r1.unit);
  }
}
var _SVTitleComponent = class _SVTitleComponent {
  constructor() {
    this.el = inject(ElementRef).nativeElement;
    this.parentComp = inject(SVContainerComponent, {
      host: true,
      optional: true
    });
    this.ren = inject(Renderer2);
    if (this.parentComp == null) {
      throw new Error(`[sv-title] must include 'sv-container' component`);
    }
  }
  setClass() {
    const gutter = this.parentComp.gutter;
    const el = this.el;
    this.ren.setStyle(el, "padding-left", `${gutter / 2}px`);
    this.ren.setStyle(el, "padding-right", `${gutter / 2}px`);
  }
  ngOnInit() {
    this.setClass();
  }
};
_SVTitleComponent.\u0275fac = function SVTitleComponent_Factory(t) {
  return new (t || _SVTitleComponent)();
};
_SVTitleComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SVTitleComponent,
  selectors: [["sv-title"], ["", "sv-title", ""]],
  hostVars: 2,
  hostBindings: function SVTitleComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("sv__title", true);
    }
  },
  exportAs: ["svTitle"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c017,
  decls: 1,
  vars: 0,
  template: function SVTitleComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275projection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
var SVTitleComponent = _SVTitleComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SVTitleComponent, [{
    type: Component,
    args: [{
      selector: "sv-title, [sv-title]",
      exportAs: "svTitle",
      template: "<ng-content />",
      host: {
        "[class.sv__title]": "true"
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true
    }]
  }], () => [], null);
})();
var _SVContainerComponent = class _SVContainerComponent {
  get margin() {
    return this.bordered ? {} : {
      "margin-left.px": -(this.gutter / 2),
      "margin-right.px": -(this.gutter / 2)
    };
  }
  constructor(configSrv) {
    this.noColon = false;
    this.bordered = false;
    configSrv.attach(this, "sv", {
      size: "large",
      gutter: 32,
      layout: "horizontal",
      col: 3,
      default: true
    });
  }
};
_SVContainerComponent.\u0275fac = function SVContainerComponent_Factory(t) {
  return new (t || _SVContainerComponent)(\u0275\u0275directiveInject(AlainConfigService));
};
_SVContainerComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SVContainerComponent,
  selectors: [["sv-container"], ["", "sv-container", ""]],
  hostVars: 14,
  hostBindings: function SVContainerComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("sv__container", true)("sv__horizontal", ctx.layout === "horizontal")("sv__vertical", ctx.layout === "vertical")("sv__small", ctx.size === "small")("sv__large", ctx.size === "large")("sv__bordered", ctx.bordered)("clearfix", true);
    }
  },
  inputs: {
    colInCon: [InputFlags.HasDecoratorInputTransform, "sv-container", "colInCon", (v) => v == null ? null : numberAttribute(v)],
    title: "title",
    size: "size",
    gutter: [InputFlags.HasDecoratorInputTransform, "gutter", "gutter", numberAttribute],
    layout: "layout",
    labelWidth: [InputFlags.HasDecoratorInputTransform, "labelWidth", "labelWidth", numberAttribute],
    col: [InputFlags.HasDecoratorInputTransform, "col", "col", numberAttribute],
    default: [InputFlags.HasDecoratorInputTransform, "default", "default", booleanAttribute],
    noColon: [InputFlags.HasDecoratorInputTransform, "noColon", "noColon", booleanAttribute],
    bordered: [InputFlags.HasDecoratorInputTransform, "bordered", "bordered", booleanAttribute]
  },
  exportAs: ["svContainer"],
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c017,
  decls: 3,
  vars: 2,
  consts: [[1, "ant-row", 3, "ngStyle"], [4, "nzStringTemplateOutlet"]],
  template: function SVContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "div", 0);
      \u0275\u0275template(1, SVContainerComponent_Conditional_1_Template, 2, 1, "sv-title");
      \u0275\u0275projection(2);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275property("ngStyle", ctx.margin);
      \u0275\u0275advance();
      \u0275\u0275conditional(1, ctx.title ? 1 : -1);
    }
  },
  dependencies: [NgStyle, SVTitleComponent, NzStringTemplateOutletDirective],
  encapsulation: 2,
  changeDetection: 0
});
var SVContainerComponent = _SVContainerComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SVContainerComponent, [{
    type: Component,
    args: [{
      selector: "sv-container, [sv-container]",
      exportAs: "svContainer",
      template: `
    <div class="ant-row" [ngStyle]="margin">
      @if (title) {
        <sv-title>
          <ng-container *nzStringTemplateOutlet="title">{{ title }}</ng-container>
        </sv-title>
      }
      <ng-content />
    </div>
  `,
      host: {
        "[class.sv__container]": "true",
        "[class.sv__horizontal]": `layout === 'horizontal'`,
        "[class.sv__vertical]": `layout === 'vertical'`,
        "[class.sv__small]": `size === 'small'`,
        "[class.sv__large]": `size === 'large'`,
        "[class.sv__bordered]": `bordered`,
        "[class.clearfix]": `true`
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [NgStyle, SVTitleComponent, NzStringTemplateOutletDirective]
    }]
  }], () => [{
    type: AlainConfigService
  }], {
    colInCon: [{
      type: Input,
      args: [{
        alias: "sv-container",
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    title: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    gutter: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    layout: [{
      type: Input
    }],
    labelWidth: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    col: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    default: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    noColon: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    bordered: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var _SVValueComponent = class _SVValueComponent {
  constructor() {
    this.size = "default";
  }
};
_SVValueComponent.\u0275fac = function SVValueComponent_Factory(t) {
  return new (t || _SVValueComponent)();
};
_SVValueComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SVValueComponent,
  selectors: [["sv-value"], ["", "sv-value", ""]],
  hostVars: 6,
  hostBindings: function SVValueComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("sv__value", true)("sv__value-small", ctx.size === "small")("sv__value-large", ctx.size === "large");
    }
  },
  inputs: {
    prefix: "prefix",
    unit: "unit",
    tooltip: "tooltip",
    size: "size"
  },
  exportAs: ["svValue"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  ngContentSelectors: _c017,
  decls: 4,
  vars: 3,
  consts: [[1, "sv__value-prefix", 3, "innerHTML"], ["nz-tooltip", "", 1, "sv__value-text", 3, "nzTooltipTitle"], [1, "sv__value-unit", 3, "innerHTML"]],
  template: function SVValueComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, SVValueComponent_Conditional_0_Template, 1, 1, "em", 0);
      \u0275\u0275elementStart(1, "span", 1);
      \u0275\u0275projection(2);
      \u0275\u0275elementEnd();
      \u0275\u0275template(3, SVValueComponent_Conditional_3_Template, 1, 1, "em", 2);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.prefix ? 0 : -1);
      \u0275\u0275advance();
      \u0275\u0275property("nzTooltipTitle", ctx.tooltip);
      \u0275\u0275advance(2);
      \u0275\u0275conditional(3, ctx.unit ? 3 : -1);
    }
  },
  dependencies: [NzTooltipDirective],
  encapsulation: 2,
  changeDetection: 0
});
var SVValueComponent = _SVValueComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SVValueComponent, [{
    type: Component,
    args: [{
      selector: "sv-value, [sv-value]",
      exportAs: "svValue",
      template: `
    @if (prefix) {
      <em class="sv__value-prefix" [innerHTML]="prefix"></em>
    }
    <span nz-tooltip [nzTooltipTitle]="tooltip" class="sv__value-text"><ng-content /></span>
    @if (unit) {
      <em class="sv__value-unit" [innerHTML]="unit"></em>
    }
  `,
      host: {
        "[class.sv__value]": "true",
        "[class.sv__value-small]": `size === 'small'`,
        "[class.sv__value-large]": `size === 'large'`
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [NzTooltipDirective]
    }]
  }], null, {
    prefix: [{
      type: Input
    }],
    unit: [{
      type: Input
    }],
    tooltip: [{
      type: Input
    }],
    size: [{
      type: Input
    }]
  });
})();
var prefixCls2 = `sv`;
var _SVComponent = class _SVComponent {
  // #endregion
  get paddingValue() {
    if (this.parentComp.bordered)
      return null;
    return this.parentComp.gutter / 2;
  }
  get labelWidth() {
    const {
      labelWidth,
      layout
    } = this.parentComp;
    return layout === "horizontal" ? labelWidth : null;
  }
  constructor() {
    this.el = inject(ElementRef).nativeElement;
    this.parentComp = inject(SVContainerComponent, {
      host: true,
      optional: true
    });
    this.rep = inject(ResponsiveService);
    this.ren = inject(Renderer2);
    this.clsMap = [];
    this._noColon = false;
    this.hideLabel = false;
    if (this.parentComp == null) {
      throw new Error(`[sv] must include 'sv-container' component`);
    }
  }
  setClass() {
    const {
      ren,
      col,
      clsMap,
      type,
      rep,
      noColon
    } = this;
    const parent = this.parentComp;
    const el = this.el;
    this._noColon = parent.bordered ? true : noColon != null ? noColon : parent.noColon;
    clsMap.forEach((cls) => ren.removeClass(el, cls));
    clsMap.length = 0;
    const parentCol = parent.colInCon || parent.col;
    clsMap.push(...rep.genCls(col != null ? col : parentCol, parentCol));
    clsMap.push(`${prefixCls2}__item`);
    if (parent.labelWidth)
      clsMap.push(`${prefixCls2}__item-fixed`);
    if (type)
      clsMap.push(`${prefixCls2}__type-${type}`);
    clsMap.forEach((cls) => ren.addClass(el, cls));
  }
  ngAfterViewInit() {
    this.setClass();
    this.checkContent();
  }
  ngOnChanges() {
    this.setClass();
  }
  checkContent() {
    const {
      conEl
    } = this;
    const def = this.default;
    if (!(def != null ? def : this.parentComp?.default)) {
      return;
    }
    const el = conEl.nativeElement;
    const cls = `sv__default`;
    if (el.classList.contains(cls)) {
      el.classList.remove(cls);
    }
    if (isEmpty(el)) {
      el.classList.add(cls);
    }
  }
};
_SVComponent.\u0275fac = function SVComponent_Factory(t) {
  return new (t || _SVComponent)();
};
_SVComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _SVComponent,
  selectors: [["sv"], ["", "sv", ""]],
  viewQuery: function SVComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c112, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.conEl = _t.first);
    }
  },
  hostVars: 4,
  hostBindings: function SVComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("padding-left", ctx.paddingValue, "px")("padding-right", ctx.paddingValue, "px");
    }
  },
  inputs: {
    optional: "optional",
    optionalHelp: "optionalHelp",
    optionalHelpColor: "optionalHelpColor",
    label: "label",
    unit: "unit",
    col: [InputFlags.HasDecoratorInputTransform, "col", "col", (v) => v == null ? null : numberAttribute(v)],
    default: [InputFlags.HasDecoratorInputTransform, "default", "default", (v) => v == null ? null : booleanAttribute(v)],
    type: "type",
    noColon: [InputFlags.HasDecoratorInputTransform, "noColon", "noColon", (v) => v == null ? null : booleanAttribute(v)],
    hideLabel: [InputFlags.HasDecoratorInputTransform, "hideLabel", "hideLabel", booleanAttribute]
  },
  exportAs: ["sv"],
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c017,
  decls: 6,
  vars: 2,
  consts: [["conEl", ""], [1, "sv__label", 3, "sv__label-empty", "sv__label-width", "sv__no-colon", "width"], [1, "sv__detail"], [3, "cdkObserveContent"], [1, "sv__unit"], [1, "sv__label"], [1, "sv__label-text"], [4, "nzStringTemplateOutlet"], [1, "sv__label-optional", 3, "sv__label-optional-no-text"], [1, "sv__label-optional"], ["nz-tooltip", "", "nz-icon", "", "nzType", "question-circle", 3, "nzTooltipTitle", "nzTooltipColor"], ["class", "sv__unit", 4, "nzStringTemplateOutlet"]],
  template: function SVComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, SVComponent_Conditional_0_Template, 4, 10, "div", 1);
      \u0275\u0275elementStart(1, "div", 2)(2, "span", 3, 0);
      \u0275\u0275listener("cdkObserveContent", function SVComponent_Template_span_cdkObserveContent_2_listener() {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.checkContent());
      });
      \u0275\u0275projection(4);
      \u0275\u0275elementEnd();
      \u0275\u0275template(5, SVComponent_Conditional_5_Template, 1, 1, "span", 4);
      \u0275\u0275elementEnd();
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, !ctx.hideLabel ? 0 : -1);
      \u0275\u0275advance(5);
      \u0275\u0275conditional(5, !!ctx.unit ? 5 : -1);
    }
  },
  dependencies: [NzStringTemplateOutletDirective, NzTooltipDirective, NzIconDirective, CdkObserveContent],
  encapsulation: 2,
  changeDetection: 0
});
var SVComponent = _SVComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SVComponent, [{
    type: Component,
    args: [{
      selector: "sv, [sv]",
      exportAs: "sv",
      host: {
        "[style.padding-left.px]": "paddingValue",
        "[style.padding-right.px]": "paddingValue"
      },
      preserveWhitespaces: false,
      changeDetection: ChangeDetectionStrategy.OnPush,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      imports: [NzStringTemplateOutletDirective, NzTooltipDirective, NzIconDirective, CdkObserveContent],
      template: '@if (!hideLabel) {\n  <div\n    class="sv__label"\n    [class.sv__label-empty]="!label"\n    [class.sv__label-width]="labelWidth !== null && labelWidth !== undefined"\n    [class.sv__no-colon]="_noColon"\n    [style.width.px]="labelWidth"\n  >\n    <span class="sv__label-text">\n      <ng-container *nzStringTemplateOutlet="label">{{ label }}</ng-container>\n    </span>\n    @if (optional || optionalHelp) {\n      <span class="sv__label-optional" [class.sv__label-optional-no-text]="!optional">\n        <ng-container *nzStringTemplateOutlet="optional">{{ optional }}</ng-container>\n        @if (optionalHelp) {\n          <i\n            nz-tooltip\n            [nzTooltipTitle]="optionalHelp"\n            [nzTooltipColor]="optionalHelpColor"\n            nz-icon\n            nzType="question-circle"\n          ></i>\n        }\n      </span>\n    }\n  </div>\n}\n<div class="sv__detail">\n  <span (cdkObserveContent)="checkContent()" #conEl>\n    <ng-content />\n  </span>\n  @if (!!unit) {\n    <span class="sv__unit" *nzStringTemplateOutlet="unit">{{ unit }}</span>\n  }\n</div>\n'
    }]
  }], () => [], {
    conEl: [{
      type: ViewChild,
      args: ["conEl", {
        static: false
      }]
    }],
    optional: [{
      type: Input
    }],
    optionalHelp: [{
      type: Input
    }],
    optionalHelpColor: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    unit: [{
      type: Input
    }],
    col: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : numberAttribute(v)
      }]
    }],
    default: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : booleanAttribute(v)
      }]
    }],
    type: [{
      type: Input
    }],
    noColon: [{
      type: Input,
      args: [{
        transform: (v) => v == null ? null : booleanAttribute(v)
      }]
    }],
    hideLabel: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var COMPONENTS5 = [SVContainerComponent, SVComponent, SVTitleComponent, SVValueComponent];
var _SVModule = class _SVModule {
};
_SVModule.\u0275fac = function SVModule_Factory(t) {
  return new (t || _SVModule)();
};
_SVModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _SVModule
});
_SVModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [CommonModule, ObserversModule, NzToolTipModule, NzIconModule, NzOutletModule]
});
var SVModule = _SVModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SVModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ObserversModule, NzToolTipModule, NzIconModule, NzOutletModule, ...COMPONENTS5],
      exports: COMPONENTS5
    }]
  }], null, null);
})();

// src/app/shared/shared-delon.module.ts
var SHARED_DELON_MODULES = [PageHeaderModule, STModule, SEModule, SVModule, ResultModule];

// src/app/shared/shared-zorro.module.ts
var SHARED_ZORRO_MODULES = [
  NzFormModule,
  NzGridModule,
  NzButtonModule,
  NzInputModule,
  NzInputNumberModule,
  NzAlertModule,
  NzProgressModule,
  NzSelectModule,
  NzAvatarModule,
  NzCardModule,
  NzDropDownModule,
  NzPopconfirmModule,
  NzTableModule,
  NzPopoverModule,
  NzDrawerModule,
  NzModalModule,
  NzTabsModule,
  NzToolTipModule,
  NzIconModule,
  NzCheckboxModule,
  NzSpinModule
];

// src/app/shared/shared-imports.ts
var SHARED_IMPORTS = [
  FormsModule,
  ReactiveFormsModule,
  RouterLink,
  NgTemplateOutlet,
  NgClass,
  NgStyle,
  I18nPipe,
  DatePipe,
  ...SHARED_DELON_MODULES,
  ...SHARED_ZORRO_MODULES
];

// src/app/shared/shared.module.ts
var THIRDMODULES = [];
var _SharedModule = class _SharedModule {
};
_SharedModule.\u0275fac = function SharedModule_Factory(t) {
  return new (t || _SharedModule)();
};
_SharedModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _SharedModule });
_SharedModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
  CommonModule,
  FormsModule,
  RouterModule,
  ReactiveFormsModule,
  AlainThemeModule,
  DelonACLModule,
  SHARED_DELON_MODULES,
  SHARED_ZORRO_MODULES,
  THIRDMODULES,
  CommonModule,
  FormsModule,
  ReactiveFormsModule,
  RouterModule,
  AlainThemeModule,
  DelonACLModule,
  PageHeaderModule,
  STModule,
  SEModule,
  SVModule,
  ResultModule,
  NzFormModule,
  NzGridModule,
  NzButtonModule,
  NzInputModule,
  NzInputNumberModule,
  NzAlertModule,
  NzProgressModule,
  NzSelectModule,
  NzAvatarModule,
  NzCardModule,
  NzDropDownModule,
  NzPopconfirmModule,
  NzTableModule,
  NzPopoverModule,
  NzDrawerModule,
  NzModalModule,
  NzTabsModule,
  NzToolTipModule,
  NzIconModule,
  NzCheckboxModule,
  NzSpinModule
] });
var SharedModule = _SharedModule;

// src/app/shared/st-widget/index.ts
var ST_WIDGETS = [];

// src/app/shared/cell-widget/index.ts
var CELL_WIDGETS = [];

// src/app/shared/component/nztable.ts
var _c018 = ["st"];
var _c113 = () => ({ x: "2000px", y: "2000px" });
var _c210 = () => ({ position: "bottom" });
var _ComponentsStTypeComponent = class _ComponentsStTypeComponent {
  reload() {
    this.users = Array(100).fill({}).map((_, i) => ({
      id: i + 1,
      clientName: `Clint ${i}`,
      blNumber: i + 1100,
      hsCode: `London ${i}`,
      blWeight: `${(i + 1) * 10} kg`,
      manufacturerName: `Manufacturer ${i}`,
      notifyPartyName: `Notify Party ${i}`,
      cargoxUploadDate: `2024-06-03`,
      containersNumber: i + 1,
      invoiceDate: `2024-06-03`,
      invoiceNumber: i + 2e3,
      invoiceDueDate: `2024-06-10`,
      invoiceAmount: (i + 1) * 100,
      brokerName: `Broker ${i}`,
      kgPrice: (i + 1) * 5,
      freeDays: 10,
      pod: `POD ${i}`,
      podArriveDate: `2024-06-05`,
      form4Status: `Status ${i}`,
      storageInvFees: (i + 1) * 10,
      docAtOfficeDate: `2024-06-06`,
      material: `Material ${i}`,
      customsFinishingDate: `2024-06-07`,
      customsFeesReceivingDate: `2024-06-08`,
      acidNumber: `ACID ${i}`,
      customsCertificateNumber: `Certificate ${i}`,
      form4Bank: `Bank ${i}`,
      dueDaysOfDemurrage: 5,
      totalAmountReceived: (i + 1) * 200
    }));
  }
  constructor() {
    this.loading = true;
    this.users = [];
    this.columns = [
      {
        title: "ID",
        index: "id",
        width: 100
      },
      {
        title: "Client Name",
        index: "clientName",
        width: 150,
        fixed: "left"
      },
      {
        title: "B/L Number",
        index: "blNumber",
        type: "number",
        width: 100
      },
      {
        title: "HS Code",
        index: "hsCode",
        width: 100
      },
      {
        title: "B/L Weight",
        index: "blWeight",
        width: 100
      },
      {
        title: "Manufacturer Name",
        index: "manufacturerName",
        width: 200
      },
      {
        title: "Notify Party Name",
        index: "notifyPartyName",
        width: 200
      },
      {
        title: "Cargo Upload Date",
        index: "cargoxUploadDate",
        width: 200
      },
      {
        title: "Containers Number",
        index: "containersNumber",
        width: 100
      },
      {
        title: "Invoice Date",
        index: "invoiceDate",
        width: 200
      },
      {
        title: "Invoice Number",
        index: "invoiceNumber",
        width: 200
      },
      {
        title: "Invoice Due Date",
        index: "invoiceDueDate",
        width: 200
      },
      {
        title: "Invoice Amount",
        index: "invoiceAmount",
        width: 100
      },
      {
        title: "Broker Name",
        index: "brokerName",
        width: 200
      },
      {
        title: "KG Price",
        index: "kgPrice",
        width: 100
      },
      {
        title: "Free Days",
        index: "freeDays",
        width: 200
      },
      {
        title: "POD",
        index: "pod",
        width: 200
      },
      {
        title: "POD Arrive Date",
        index: "podArriveDate",
        width: 200
      },
      {
        title: "Form 4 Status",
        index: "form4Status",
        width: 200
      },
      {
        title: "Storage Inv Fees",
        index: "storageInvFees",
        width: 200
      },
      {
        title: "Doc At Office Date",
        index: "docAtOfficeDate",
        width: 200
      },
      {
        title: "Material",
        index: "material",
        width: 200
      },
      {
        title: "Customs Finishing Date",
        index: "customsFinishingDate",
        width: 200
      },
      {
        title: "Customs Fees Receiving Date",
        index: "customsFeesReceivingDate",
        width: 150
      },
      {
        title: "ACID Number",
        index: "acidNumber",
        width: 150
      },
      {
        title: "Customs Certificate Number",
        index: "customsCertificateNumber",
        width: 150
      },
      {
        title: "Form 4 Bank",
        index: "form4Bank",
        width: 150
      },
      {
        title: "Due Days of Demurrage",
        index: "dueDaysOfDemurrage",
        width: 150
      },
      {
        title: "Total Amount Received",
        index: "totalAmountReceived",
        width: 150
      }
    ];
    this.reload();
  }
};
_ComponentsStTypeComponent.\u0275fac = function ComponentsStTypeComponent_Factory(t) {
  return new (t || _ComponentsStTypeComponent)();
};
_ComponentsStTypeComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ComponentsStTypeComponent, selectors: [["components-st-type"]], viewQuery: function ComponentsStTypeComponent_Query(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275viewQuery(_c018, 5);
  }
  if (rf & 2) {
    let _t;
    \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.st = _t.first);
  }
}, standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 2, vars: 7, consts: [["st", ""], ["bordered", "", "size", "middle", 3, "data", "scroll", "columns", "page", "ps"]], template: function ComponentsStTypeComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "st", 1, 0);
  }
  if (rf & 2) {
    \u0275\u0275property("data", ctx.users)("scroll", \u0275\u0275pureFunction0(5, _c113))("columns", ctx.columns)("page", \u0275\u0275pureFunction0(6, _c210))("ps", 5);
  }
}, dependencies: [CommonModule, STModule, STComponent, NzButtonModule], encapsulation: 2 });
var ComponentsStTypeComponent = _ComponentsStTypeComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ComponentsStTypeComponent, { className: "ComponentsStTypeComponent", filePath: "src\\app\\shared\\component\\nztable.ts", lineNumber: 39 });
})();

// src/app/shared/component/table.ts
var _c019 = () => ({ x: "2000px", y: "240px" });
var _c114 = (a0, a1) => ({ "background-color": a0, color: a1 });
function NzDemoTableBasicComponent_tr_64_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "tr", 4)(1, "td", 2);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(3, "td");
    \u0275\u0275text(4);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "td", 5);
    \u0275\u0275text(6);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "td");
    \u0275\u0275text(8);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "td");
    \u0275\u0275text(10);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "td");
    \u0275\u0275text(12);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "td");
    \u0275\u0275text(14);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "td");
    \u0275\u0275text(16);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "td");
    \u0275\u0275text(18);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "td");
    \u0275\u0275text(20);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "td");
    \u0275\u0275text(22);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "td");
    \u0275\u0275text(24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "td");
    \u0275\u0275text(26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(27, "td");
    \u0275\u0275text(28);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "td");
    \u0275\u0275text(30);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(31, "td");
    \u0275\u0275text(32);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "td");
    \u0275\u0275text(34);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(35, "td");
    \u0275\u0275text(36);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(37, "td");
    \u0275\u0275text(38);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(39, "td");
    \u0275\u0275text(40);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(41, "td");
    \u0275\u0275text(42);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(43, "td");
    \u0275\u0275text(44);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(45, "td");
    \u0275\u0275text(46);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(47, "td");
    \u0275\u0275text(48);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(49, "td");
    \u0275\u0275text(50);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(51, "td");
    \u0275\u0275text(52);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(53, "td");
    \u0275\u0275text(54);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(55, "td");
    \u0275\u0275text(56);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(57, "td")(58, "a");
    \u0275\u0275text(59, "action");
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const data_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction2(29, _c114, i_r3 === 2 ? "red" : "white", i_r3 === 2 ? "" : "black"));
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.name);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.blNumber);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.hsCode);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.blWeight);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.manufacturerName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.notifyPartyName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.cargoxUploadDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.containersNumber);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.invoiceDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.invoiceNumber);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.invoiceDueDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.invoiceAmount);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.brokerName);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.kgPrice);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.freeDays);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.pod);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.podArriveDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.form4Status);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.storageInvFees);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.docAtOfficeDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.material);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.customsFinishingDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.customsFeesReceivingDate);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.acidNumber);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.customsCertificateNumber);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.form4Bank);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.dueDaysOfDemurrage);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(data_r2.totalAmountReceived);
  }
}
var _NzDemoTableBasicComponent = class _NzDemoTableBasicComponent {
  constructor() {
    this.listOfData = [];
    this.listOfCurrentPageData = [];
  }
  ngOnInit() {
    for (let i = 0; i < 5; i++) {
      this.listOfData.push({
        name: `Edward King ${i}`,
        blNumber: i + 1,
        hsCode: `London ${i}`,
        blWeight: `${(i + 1) * 10} kg`,
        manufacturerName: `Manufacturer ${i}`,
        notifyPartyName: `Notify Party ${i}`,
        cargoxUploadDate: `2024-06-03`,
        containersNumber: i + 1,
        invoiceDate: `2024-06-03`,
        invoiceNumber: i + 1e3,
        invoiceDueDate: `2024-06-10`,
        invoiceAmount: (i + 1) * 100,
        brokerName: `Broker ${i}`,
        kgPrice: (i + 1) * 5,
        freeDays: 10,
        pod: `POD ${i}`,
        podArriveDate: `2024-06-05`,
        form4Status: `Status ${i}`,
        storageInvFees: (i + 1) * 10,
        docAtOfficeDate: `2024-06-06`,
        material: `Material ${i}`,
        customsFinishingDate: `2024-06-07`,
        customsFeesReceivingDate: `2024-06-08`,
        acidNumber: `ACID ${i}`,
        customsCertificateNumber: `Certificate ${i}`,
        form4Bank: `Bank ${i}`,
        dueDaysOfDemurrage: 5,
        totalAmountReceived: (i + 1) * 200
      });
    }
    setTimeout(() => {
      this.loading = of(false);
    }, 5e3);
  }
  onCurrentPageDataChange(listOfCurrentPageData) {
    this.listOfCurrentPageData = listOfCurrentPageData;
  }
};
_NzDemoTableBasicComponent.\u0275fac = function NzDemoTableBasicComponent_Factory(t) {
  return new (t || _NzDemoTableBasicComponent)();
};
_NzDemoTableBasicComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _NzDemoTableBasicComponent, selectors: [["gbsl-table-basic"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 65, vars: 7, consts: [["fixedTable", ""], ["nzShowPagination", "", "nzShowSizeChanger", "", 3, "nzCurrentPageDataChange", "nzLoading", "nzData", "nzScroll"], ["nzLeft", ""], [3, "ngStyle", 4, "ngFor", "ngForOf"], [3, "ngStyle"], ["nzBreakWord", ""]], template: function NzDemoTableBasicComponent_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "nz-table", 1, 0);
    \u0275\u0275pipe(2, "async");
    \u0275\u0275listener("nzCurrentPageDataChange", function NzDemoTableBasicComponent_Template_nz_table_nzCurrentPageDataChange_0_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onCurrentPageDataChange($event));
    });
    \u0275\u0275elementStart(3, "thead")(4, "tr")(5, "th", 2);
    \u0275\u0275text(6, "Client Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "th");
    \u0275\u0275text(8, "B/L Number");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(9, "th");
    \u0275\u0275text(10, "HS Code");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "th");
    \u0275\u0275text(12, "B/L Weight");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "th");
    \u0275\u0275text(14, "Manufacturer Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(15, "th");
    \u0275\u0275text(16, "Notify Party Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(17, "th");
    \u0275\u0275text(18, "Cargox Upload Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "th");
    \u0275\u0275text(20, "Containers Number");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(21, "th");
    \u0275\u0275text(22, "Invoice Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "th");
    \u0275\u0275text(24, "Invoice Number");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "th");
    \u0275\u0275text(26, "Invoice Due Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(27, "th");
    \u0275\u0275text(28, "Invoice Amount");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(29, "th");
    \u0275\u0275text(30, "Broker Name");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(31, "th");
    \u0275\u0275text(32, "KG Price");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(33, "th");
    \u0275\u0275text(34, "Free Days");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(35, "th");
    \u0275\u0275text(36, "POD");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(37, "th");
    \u0275\u0275text(38, "POD Arrive Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(39, "th");
    \u0275\u0275text(40, "Form 4 Status");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(41, "th");
    \u0275\u0275text(42, "Storage Inv. Fees");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(43, "th");
    \u0275\u0275text(44, "Doc At Office Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(45, "th");
    \u0275\u0275text(46, "Material");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(47, "th");
    \u0275\u0275text(48, "Customs Finishing Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(49, "th");
    \u0275\u0275text(50, "Customs Fees Receiving Date");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(51, "th");
    \u0275\u0275text(52, "Acid Number");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(53, "th");
    \u0275\u0275text(54, "Customs Certificate Number");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(55, "th");
    \u0275\u0275text(56, "Form 4 Bank");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(57, "th");
    \u0275\u0275text(58, "Form 4 Bank");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(59, "th");
    \u0275\u0275text(60, "Due Days Of Demurrage");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(61, "th");
    \u0275\u0275text(62, "Total Amount Received");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(63, "tbody");
    \u0275\u0275template(64, NzDemoTableBasicComponent_tr_64_Template, 60, 32, "tr", 3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275property("nzLoading", \u0275\u0275pipeBind1(2, 4, ctx.loading))("nzData", ctx.listOfData)("nzScroll", \u0275\u0275pureFunction0(6, _c019));
    \u0275\u0275advance(64);
    \u0275\u0275property("ngForOf", ctx.listOfData);
  }
}, dependencies: [NzTableModule, NzTableComponent, NzTableCellDirective, NzThMeasureDirective, NzTheadComponent, NzTbodyComponent, NzTrDirective, NzCellFixedDirective, NzCellBreakWordDirective, NzDividerModule, CommonModule, NgForOf, NgStyle, AsyncPipe], styles: ["\n\nth[_ngcontent-%COMP%] {\n  background-color: #ededed !important;\n}\n/*# sourceMappingURL=table.css.map */"] });
var NzDemoTableBasicComponent = _NzDemoTableBasicComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(NzDemoTableBasicComponent, { className: "NzDemoTableBasicComponent", filePath: "src\\app\\shared\\component\\table.ts", lineNumber: 132 });
})();

// src/app/routes/dashboard/dashboard.component.ts
function DashboardComponent_ng_template_47_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "button", 13);
    \u0275\u0275element(1, "span", 14);
    \u0275\u0275text(2, " Search ");
    \u0275\u0275elementEnd();
  }
}
var _DashboardComponent = class _DashboardComponent {
  constructor() {
  }
};
_DashboardComponent.\u0275fac = function DashboardComponent_Factory(t) {
  return new (t || _DashboardComponent)();
};
_DashboardComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _DashboardComponent, selectors: [["app-dashboard"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 51, vars: 8, consts: [["extraTemplate", ""], [3, "nzExtra"], ["nz-form", ""], ["nz-row", "", 3, "nzGutter"], ["nz-col", "", 3, "nzSpan"], ["nzFor", ""], ["nz-input", "", "placeholder", "ACID No"], ["nz-input", "", "placeholder", "Bill of Lading No"], ["nz-input", "", "placeholder", "Invoice No"], ["nz-input", "", "placeholder", "Client Name"], ["nz-input", "", "placeholder", "Material"], ["nz-input", "", "placeholder", "Custom Certifcate Number"], ["nzTitle", "Card title"], ["nz-button", "", "nzType", "primary"], ["nz-icon", "", "nzType", "search"]], template: function DashboardComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "page-header");
    \u0275\u0275elementStart(1, "nz-card", 1)(2, "form", 2)(3, "div", 3)(4, "div", 4)(5, "nz-form-item")(6, "nz-form-control")(7, "nz-form-label", 5);
    \u0275\u0275text(8, "ACID No");
    \u0275\u0275elementEnd();
    \u0275\u0275element(9, "input", 6);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(10, "div", 4)(11, "nz-form-item")(12, "nz-form-control")(13, "nz-input-group")(14, "nz-form-label", 5);
    \u0275\u0275text(15, "Bill of Lading No");
    \u0275\u0275elementEnd();
    \u0275\u0275element(16, "input", 7);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(17, "div", 4)(18, "nz-form-item")(19, "nz-form-control")(20, "nz-input-group")(21, "nz-form-label", 5);
    \u0275\u0275text(22, "Invoice No");
    \u0275\u0275elementEnd();
    \u0275\u0275element(23, "input", 8);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(24, "div", 4)(25, "nz-form-item")(26, "nz-form-control")(27, "nz-input-group")(28, "nz-form-label", 5);
    \u0275\u0275text(29, "Client Name");
    \u0275\u0275elementEnd();
    \u0275\u0275element(30, "input", 9);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(31, "div", 4)(32, "nz-form-item")(33, "nz-form-control")(34, "nz-input-group")(35, "nz-form-label", 5);
    \u0275\u0275text(36, "Material");
    \u0275\u0275elementEnd();
    \u0275\u0275element(37, "input", 10);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(38, "div", 4)(39, "nz-form-item")(40, "nz-form-control")(41, "nz-input-group")(42, "nz-form-label", 5);
    \u0275\u0275text(43, "Custom Certifcate Number");
    \u0275\u0275elementEnd();
    \u0275\u0275element(44, "input", 11);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(45, "nz-form-item")(46, "nz-form-control");
    \u0275\u0275template(47, DashboardComponent_ng_template_47_Template, 3, 0, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(49, "nz-card", 12);
    \u0275\u0275element(50, "components-st-type");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const extraTemplate_r1 = \u0275\u0275reference(48);
    \u0275\u0275advance();
    \u0275\u0275property("nzExtra", extraTemplate_r1);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzGutter", 20);
    \u0275\u0275advance();
    \u0275\u0275property("nzSpan", 4);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 4);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 4);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 4);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 4);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 4);
  }
}, dependencies: [
  PageHeaderModule,
  PageHeaderComponent,
  NzCardModule,
  NzCardComponent,
  NzIconModule,
  NzIconDirective,
  NzGridModule,
  NzColDirective,
  NzRowDirective,
  FormsModule,
  \u0275NgNoValidate,
  NgControlStatusGroup,
  NgForm,
  NzFormModule,
  NzFormDirective,
  NzFormItemComponent,
  NzFormLabelComponent,
  NzFormControlComponent,
  NzInputModule,
  NzInputDirective,
  NzInputGroupComponent,
  CommonModule,
  NzButtonModule,
  NzButtonComponent,
  NzTransitionPatchDirective,
  NzWaveDirective,
  ComponentsStTypeComponent
], encapsulation: 2, changeDetection: 0 });
var DashboardComponent = _DashboardComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(DashboardComponent, { className: "DashboardComponent", filePath: "src\\app\\routes\\dashboard\\dashboard.component.ts", lineNumber: 33 });
})();

// src/app/routes/auth/register.ts
function RegiserComponent_ng_template_8_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Please input your username! ");
  }
}
function RegiserComponent_ng_template_8_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " The username is redundant! ");
  }
}
function RegiserComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, RegiserComponent_ng_template_8_Conditional_0_Template, 1, 0)(1, RegiserComponent_ng_template_8_Conditional_1_Template, 1, 0);
  }
  if (rf & 2) {
    const control_r2 = ctx.$implicit;
    \u0275\u0275conditional(0, (control_r2.errors == null ? null : control_r2.errors["required"]) ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, (control_r2.errors == null ? null : control_r2.errors["duplicated"]) ? 1 : -1);
  }
}
var _RegiserComponent = class _RegiserComponent {
  constructor(fb) {
    this.fb = fb;
    this.selectedValue = null;
    this.userNameAsyncValidator = (control) => new Observable((observer) => {
      setTimeout(() => {
        if (control.value === "ahmed") {
          observer.next({ error: true, duplicated: true });
        } else {
          observer.next(null);
        }
        observer.complete();
      }, 1e3);
    });
    this.validateForm = this.fb.group({
      userName: ["", [Validators.required], [this.userNameAsyncValidator]],
      password: ["", [Validators.required]],
      role: ["", [Validators.required]]
    });
  }
  submitForm() {
    console.log("submit", this.validateForm.value);
  }
  resetForm(e) {
    e.preventDefault();
    this.validateForm.reset();
  }
};
_RegiserComponent.\u0275fac = function RegiserComponent_Factory(t) {
  return new (t || _RegiserComponent)(\u0275\u0275directiveInject(FormBuilder));
};
_RegiserComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _RegiserComponent, selectors: [["nz-demo-form-validate-reactive"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 29, vars: 10, consts: [["userErrorTpl", ""], [3, "ngSubmit", "formGroup"], ["nzHasFeedback", "", "nzValidatingTip", "Validating...", 3, "nzSpan", "nzErrorTip"], ["nzRequired", "", 3, "nzSpan"], ["nz-input", "", "formControlName", "userName", "placeholder", "Please input Vaild UserName"], ["nzHasFeedback", "", "nzErrorTip", "Please input your password!", 3, "nzSpan"], ["nz-input", "", "type", "password", "formControlName", "password"], ["nzPlaceHolder", "Select a Role", "formControlName", "role"], ["nzLabel", "Admin", "nzValue", "Admin"], ["nzLabel", "User", "nzValue", "User"], ["nzLabel", "Manager", "nzValue", "Manager"], [3, "nzSpan"], ["nz-button", "", "nzType", "primary", 3, "disabled"], ["nz-button", "", 3, "click"]], template: function RegiserComponent_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275element(0, "page-header");
    \u0275\u0275elementStart(1, "nz-card")(2, "form", 1);
    \u0275\u0275listener("ngSubmit", function RegiserComponent_Template_form_ngSubmit_2_listener() {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.submitForm());
    });
    \u0275\u0275elementStart(3, "nz-form-item")(4, "nz-form-control", 2)(5, "nz-form-label", 3);
    \u0275\u0275text(6, "Username");
    \u0275\u0275elementEnd();
    \u0275\u0275element(7, "input", 4);
    \u0275\u0275template(8, RegiserComponent_ng_template_8_Template, 2, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(10, "nz-form-item")(11, "nz-form-control", 5)(12, "nz-form-label", 3);
    \u0275\u0275text(13, "Password");
    \u0275\u0275elementEnd();
    \u0275\u0275element(14, "input", 6);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(15, "nz-form-item")(16, "nz-form-control", 5)(17, "nz-form-label", 3);
    \u0275\u0275text(18, "Role");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(19, "nz-select", 7);
    \u0275\u0275element(20, "nz-option", 8)(21, "nz-option", 9)(22, "nz-option", 10);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(23, "nz-form-item")(24, "nz-form-control", 11)(25, "button", 12);
    \u0275\u0275text(26, "Submit");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(27, "button", 13);
    \u0275\u0275listener("click", function RegiserComponent_Template_button_click_27_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.resetForm($event));
    });
    \u0275\u0275text(28, "Reset");
    \u0275\u0275elementEnd()()()()();
  }
  if (rf & 2) {
    const userErrorTpl_r3 = \u0275\u0275reference(9);
    \u0275\u0275advance(2);
    \u0275\u0275property("formGroup", ctx.validateForm);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzSpan", 12)("nzErrorTip", userErrorTpl_r3);
    \u0275\u0275advance();
    \u0275\u0275property("nzSpan", 2);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance();
    \u0275\u0275property("nzSpan", 2);
    \u0275\u0275advance(4);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance();
    \u0275\u0275property("nzSpan", 2);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", !ctx.validateForm.valid);
  }
}, dependencies: [
  PageHeaderModule,
  PageHeaderComponent,
  CommonModule,
  NzFormModule,
  NzColDirective,
  NzRowDirective,
  NzFormItemComponent,
  NzFormLabelComponent,
  NzFormControlComponent,
  FormsModule,
  \u0275NgNoValidate,
  DefaultValueAccessor,
  NgControlStatus,
  NgControlStatusGroup,
  ReactiveFormsModule,
  FormGroupDirective,
  FormControlName,
  NzInputModule,
  NzInputDirective,
  NzButtonModule,
  NzButtonComponent,
  NzTransitionPatchDirective,
  NzWaveDirective,
  NzSelectModule,
  NzOptionComponent,
  NzSelectComponent,
  NzCardModule,
  NzCardComponent
] });
var RegiserComponent = _RegiserComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(RegiserComponent, { className: "RegiserComponent", filePath: "src\\app\\routes\\auth\\register.ts", lineNumber: 87 });
})();

// node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-upload.mjs
var _c020 = ["file"];
var _c115 = ["nz-upload-btn", ""];
var _c211 = ["*"];
var _c37 = (a0) => ({
  $implicit: a0
});
var _c47 = () => ({
  opacity: 0.5,
  "pointer-events": "none"
});
function NzUploadListComponent_div_0_ng_template_2_div_1_ng_template_1_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 20);
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_2_div_1_ng_template_1_Template, 0, 0, "ng-template", 21);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(2).$implicit;
    const iconNode_r2 = \u0275\u0275reference(5);
    \u0275\u0275classProp("ant-upload-list-item-file", !file_r1.isUploading);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", iconNode_r2)("ngTemplateOutletContext", \u0275\u0275pureFunction1(4, _c37, file_r1));
  }
}
function NzUploadListComponent_div_0_ng_template_2_a_2_img_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "img", 24);
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(3).$implicit;
    \u0275\u0275property("src", file_r1.thumbUrl || file_r1.url, \u0275\u0275sanitizeUrl);
    \u0275\u0275attribute("alt", file_r1.name);
  }
}
function NzUploadListComponent_div_0_ng_template_2_a_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 22);
    \u0275\u0275listener("click", function NzUploadListComponent_div_0_ng_template_2_a_2_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r3);
      const file_r1 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handlePreview(file_r1, $event));
    });
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_2_a_2_img_1_Template, 1, 2, "img", 23);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const noImageThumbTpl_r5 = \u0275\u0275reference(5);
    const file_r1 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275classProp("ant-upload-list-item-file", !file_r1.isImageUrl);
    \u0275\u0275property("href", file_r1.url || file_r1.thumbUrl, \u0275\u0275sanitizeUrl);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", file_r1.isImageUrl)("ngIfElse", noImageThumbTpl_r5);
  }
}
function NzUploadListComponent_div_0_ng_template_2_div_3_ng_template_1_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 25);
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_2_div_3_ng_template_1_Template, 0, 0, "ng-template", 21);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(2).$implicit;
    const iconNode_r2 = \u0275\u0275reference(5);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", iconNode_r2)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c37, file_r1));
  }
}
function NzUploadListComponent_div_0_ng_template_2_ng_template_4_ng_template_0_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_2_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadListComponent_div_0_ng_template_2_ng_template_4_ng_template_0_Template, 0, 0, "ng-template", 21);
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(2).$implicit;
    const iconNode_r2 = \u0275\u0275reference(5);
    \u0275\u0275property("ngTemplateOutlet", iconNode_r2)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c37, file_r1));
  }
}
function NzUploadListComponent_div_0_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0, 16);
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_2_div_1_Template, 2, 6, "div", 17)(2, NzUploadListComponent_div_0_ng_template_2_a_2_Template, 2, 5, "a", 18)(3, NzUploadListComponent_div_0_ng_template_2_div_3_Template, 2, 4, "div", 19);
    \u0275\u0275elementContainerEnd();
    \u0275\u0275template(4, NzUploadListComponent_div_0_ng_template_2_ng_template_4_Template, 1, 4, "ng-template", null, 6, \u0275\u0275templateRefExtractor);
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngSwitch", file_r1.iconType);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "uploading");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "thumbnail");
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275element(1, "span", 29);
    \u0275\u0275elementContainerEnd();
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_ng_container_1_Template, 2, 0, "ng-container", 26);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const file_r6 = \u0275\u0275nextContext(2).$implicit;
    const iconNodeFileIcon_r7 = \u0275\u0275reference(4);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", file_r6.isUploading)("ngIfElse", iconNodeFileIcon_r7);
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275text(1);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(5);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", ctx_r3.locale.uploading, " ");
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_ng_container_1_Template, 2, 1, "ng-container", 26);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const file_r6 = \u0275\u0275nextContext(2).$implicit;
    const iconNodeFileIcon_r7 = \u0275\u0275reference(4);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", file_r6.isUploading)("ngIfElse", iconNodeFileIcon_r7);
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_container_0_span_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 30);
  }
  if (rf & 2) {
    const file_r6 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("nzType", file_r6.isUploading ? "loading" : "paper-clip");
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0)(1, 16);
    \u0275\u0275template(2, NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_2_Template, 2, 2, "ng-container", 27)(3, NzUploadListComponent_div_0_ng_template_4_ng_container_0_ng_container_3_Template, 2, 2, "ng-container", 27)(4, NzUploadListComponent_div_0_ng_template_4_ng_container_0_span_4_Template, 1, 1, "span", 28);
    \u0275\u0275elementContainerEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitch", ctx_r3.listType);
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "picture");
    \u0275\u0275advance();
    \u0275\u0275property("ngSwitchCase", "picture-card");
  }
}
function NzUploadListComponent_div_0_ng_template_4_ng_template_1_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_4_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "span", 31);
  }
  if (rf & 2) {
    const file_r6 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("nzType", file_r6.isImageUrl ? "picture" : "file");
  }
}
function NzUploadListComponent_div_0_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadListComponent_div_0_ng_template_4_ng_container_0_Template, 5, 3, "ng-container", 26)(1, NzUploadListComponent_div_0_ng_template_4_ng_template_1_Template, 0, 0, "ng-template", 21, 7, \u0275\u0275templateRefExtractor)(3, NzUploadListComponent_div_0_ng_template_4_ng_template_3_Template, 1, 1, "ng-template", null, 8, \u0275\u0275templateRefExtractor);
  }
  if (rf & 2) {
    const file_r6 = ctx.$implicit;
    const customIconRender_r8 = \u0275\u0275reference(2);
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngIf", !ctx_r3.iconRender)("ngIfElse", customIconRender_r8);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r3.iconRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(4, _c37, file_r6));
  }
}
function NzUploadListComponent_div_0_ng_template_6_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 33);
    \u0275\u0275listener("click", function NzUploadListComponent_div_0_ng_template_6_button_0_Template_button_click_0_listener($event) {
      \u0275\u0275restoreView(_r9);
      const file_r1 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handleRemove(file_r1, $event));
    });
    \u0275\u0275element(1, "span", 34);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275attribute("title", ctx_r3.locale.removeFile);
  }
}
function NzUploadListComponent_div_0_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadListComponent_div_0_ng_template_6_button_0_Template, 2, 1, "button", 32);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngIf", ctx_r3.icons.showRemoveIcon);
  }
}
function NzUploadListComponent_div_0_ng_template_8_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "button", 33);
    \u0275\u0275listener("click", function NzUploadListComponent_div_0_ng_template_8_button_0_Template_button_click_0_listener() {
      \u0275\u0275restoreView(_r10);
      const file_r1 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handleDownload(file_r1));
    });
    \u0275\u0275element(1, "span", 35);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(3);
    \u0275\u0275attribute("title", ctx_r3.locale.downloadFile);
  }
}
function NzUploadListComponent_div_0_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadListComponent_div_0_ng_template_8_button_0_Template, 2, 1, "button", 32);
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275property("ngIf", file_r1.showDownload);
  }
}
function NzUploadListComponent_div_0_ng_template_10_span_0_ng_template_1_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_10_span_0_ng_template_2_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_10_span_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span");
    \u0275\u0275template(1, NzUploadListComponent_div_0_ng_template_10_span_0_ng_template_1_Template, 0, 0, "ng-template", 13)(2, NzUploadListComponent_div_0_ng_template_10_span_0_ng_template_2_Template, 0, 0, "ng-template", 13);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const removeIcon_r11 = \u0275\u0275reference(7);
    const downloadIcon_r12 = \u0275\u0275reference(9);
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("ant-upload-list-item-card-actions ", ctx_r3.listType === "picture" ? "picture" : "", "");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", downloadIcon_r12);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", removeIcon_r11);
  }
}
function NzUploadListComponent_div_0_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadListComponent_div_0_ng_template_10_span_0_Template, 3, 5, "span", 36);
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext(2);
    \u0275\u0275property("ngIf", ctx_r3.listType !== "picture-card");
  }
}
function NzUploadListComponent_div_0_ng_template_12_a_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 39);
    \u0275\u0275listener("click", function NzUploadListComponent_div_0_ng_template_12_a_0_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r13);
      const file_r1 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handlePreview(file_r1, $event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275property("href", file_r1.url, \u0275\u0275sanitizeUrl);
    \u0275\u0275attribute("title", file_r1.name)("download", file_r1.linkProps && file_r1.linkProps.download);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", file_r1.name, " ");
  }
}
function NzUploadListComponent_div_0_ng_template_12_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "span", 40);
    \u0275\u0275listener("click", function NzUploadListComponent_div_0_ng_template_12_span_1_Template_span_click_0_listener($event) {
      \u0275\u0275restoreView(_r14);
      const file_r1 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handlePreview(file_r1, $event));
    });
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(2).$implicit;
    \u0275\u0275attribute("title", file_r1.name);
    \u0275\u0275advance();
    \u0275\u0275textInterpolate1(" ", file_r1.name, " ");
  }
}
function NzUploadListComponent_div_0_ng_template_12_ng_template_2_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadListComponent_div_0_ng_template_12_a_0_Template, 2, 4, "a", 37)(1, NzUploadListComponent_div_0_ng_template_12_span_1_Template, 2, 2, "span", 38)(2, NzUploadListComponent_div_0_ng_template_12_ng_template_2_Template, 0, 0, "ng-template", 13);
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext().$implicit;
    const downloadOrDelete_r15 = \u0275\u0275reference(11);
    \u0275\u0275property("ngIf", file_r1.url);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", !file_r1.url);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", downloadOrDelete_r15);
  }
}
function NzUploadListComponent_div_0_ng_template_16_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_ng_template_17_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_span_18_a_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 44);
    \u0275\u0275listener("click", function NzUploadListComponent_div_0_span_18_a_1_Template_a_click_0_listener($event) {
      \u0275\u0275restoreView(_r16);
      const file_r1 = \u0275\u0275nextContext(2).$implicit;
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.handlePreview(file_r1, $event));
    });
    \u0275\u0275element(1, "span", 45);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext(2).$implicit;
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275property("href", file_r1.url || file_r1.thumbUrl, \u0275\u0275sanitizeUrl)("ngStyle", !(file_r1.url || file_r1.thumbUrl) ? \u0275\u0275pureFunction0(3, _c47) : null);
    \u0275\u0275attribute("title", ctx_r3.locale.previewFile);
  }
}
function NzUploadListComponent_div_0_span_18_ng_container_2_ng_template_1_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_span_18_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzUploadListComponent_div_0_span_18_ng_container_2_ng_template_1_Template, 0, 0, "ng-template", 13);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const downloadIcon_r12 = \u0275\u0275reference(9);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", downloadIcon_r12);
  }
}
function NzUploadListComponent_div_0_span_18_ng_template_3_Template(rf, ctx) {
}
function NzUploadListComponent_div_0_span_18_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 41);
    \u0275\u0275template(1, NzUploadListComponent_div_0_span_18_a_1_Template, 2, 4, "a", 42)(2, NzUploadListComponent_div_0_span_18_ng_container_2_Template, 2, 1, "ng-container", 43)(3, NzUploadListComponent_div_0_span_18_ng_template_3_Template, 0, 0, "ng-template", 13);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext().$implicit;
    const removeIcon_r11 = \u0275\u0275reference(7);
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.icons.showPreviewIcon);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", file_r1.status === "done");
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", removeIcon_r11);
  }
}
function NzUploadListComponent_div_0_div_19_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 46);
    \u0275\u0275element(1, "nz-progress", 47);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const file_r1 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance();
    \u0275\u0275property("nzPercent", file_r1.percent)("nzShowInfo", false)("nzStrokeWidth", 2);
  }
}
function NzUploadListComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div")(1, "div", 10);
    \u0275\u0275template(2, NzUploadListComponent_div_0_ng_template_2_Template, 6, 3, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(4, NzUploadListComponent_div_0_ng_template_4_Template, 5, 6, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(6, NzUploadListComponent_div_0_ng_template_6_Template, 1, 1, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(8, NzUploadListComponent_div_0_ng_template_8_Template, 1, 1, "ng-template", null, 3, \u0275\u0275templateRefExtractor)(10, NzUploadListComponent_div_0_ng_template_10_Template, 1, 1, "ng-template", null, 4, \u0275\u0275templateRefExtractor)(12, NzUploadListComponent_div_0_ng_template_12_Template, 3, 3, "ng-template", null, 5, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementStart(14, "div", 11)(15, "span", 12);
    \u0275\u0275template(16, NzUploadListComponent_div_0_ng_template_16_Template, 0, 0, "ng-template", 13)(17, NzUploadListComponent_div_0_ng_template_17_Template, 0, 0, "ng-template", 13);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(18, NzUploadListComponent_div_0_span_18_Template, 4, 3, "span", 14)(19, NzUploadListComponent_div_0_div_19_Template, 2, 3, "div", 15);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const file_r1 = ctx.$implicit;
    const icon_r17 = \u0275\u0275reference(3);
    const preview_r18 = \u0275\u0275reference(13);
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275classMapInterpolate1("ant-upload-list-", ctx_r3.listType, "-container");
    \u0275\u0275advance();
    \u0275\u0275classMapInterpolate2("ant-upload-list-item ant-upload-list-item-", file_r1.status, " ant-upload-list-item-list-type-", ctx_r3.listType, "");
    \u0275\u0275property("@itemState", void 0)("nzTooltipTitle", file_r1.status === "error" ? file_r1.message : null);
    \u0275\u0275attribute("data-key", file_r1.key);
    \u0275\u0275advance(15);
    \u0275\u0275property("ngTemplateOutlet", icon_r17);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", preview_r18);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r3.listType === "picture-card" && !file_r1.isUploading);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", file_r1.isUploading);
  }
}
var _c54 = ["uploadComp"];
var _c64 = ["listComp"];
var _c73 = () => [];
function NzUploadComponent_ng_template_0_nz_upload_list_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "nz-upload-list", 10, 5);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275styleProp("display", ctx_r0.nzShowUploadList ? "" : "none");
    \u0275\u0275property("locale", ctx_r0.locale)("listType", ctx_r0.nzListType)("items", ctx_r0.nzFileList || \u0275\u0275pureFunction0(13, _c73))("icons", ctx_r0.nzShowUploadList)("iconRender", ctx_r0.nzIconRender)("previewFile", ctx_r0.nzPreviewFile)("previewIsImage", ctx_r0.nzPreviewIsImage)("onPreview", ctx_r0.nzPreview)("onRemove", ctx_r0.onRemove)("onDownload", ctx_r0.nzDownload)("dir", ctx_r0.dir);
  }
}
function NzUploadComponent_ng_template_0_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainer(0);
  }
}
function NzUploadComponent_ng_template_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzUploadComponent_ng_template_0_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 11);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext(2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", ctx_r0.nzFileListRender)("ngTemplateOutletContext", \u0275\u0275pureFunction1(2, _c37, ctx_r0.nzFileList));
  }
}
function NzUploadComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadComponent_ng_template_0_nz_upload_list_0_Template, 2, 14, "nz-upload-list", 8)(1, NzUploadComponent_ng_template_0_ng_container_1_Template, 2, 4, "ng-container", 9);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("ngIf", ctx_r0.locale && !ctx_r0.nzFileListRender);
    \u0275\u0275advance();
    \u0275\u0275property("ngIf", ctx_r0.nzFileListRender);
  }
}
function NzUploadComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275projection(0);
  }
}
function NzUploadComponent_ng_template_4_ng_template_3_Template(rf, ctx) {
}
function NzUploadComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 12)(1, "div", 13, 6);
    \u0275\u0275template(3, NzUploadComponent_ng_template_4_ng_template_3_Template, 0, 0, "ng-template", 14);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const con_r2 = \u0275\u0275reference(3);
    \u0275\u0275styleProp("display", ctx_r0.nzShowButton ? "" : "none");
    \u0275\u0275property("ngClass", ctx_r0.classList);
    \u0275\u0275advance();
    \u0275\u0275property("options", ctx_r0._btnOptions);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngTemplateOutlet", con_r2);
  }
}
function NzUploadComponent_ng_container_6_ng_template_5_Template(rf, ctx) {
}
function NzUploadComponent_ng_container_6_ng_template_6_Template(rf, ctx) {
}
function NzUploadComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = \u0275\u0275getCurrentView();
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275elementStart(1, "div", 15);
    \u0275\u0275listener("drop", function NzUploadComponent_ng_container_6_Template_div_drop_1_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.fileDrop($event));
    })("dragover", function NzUploadComponent_ng_container_6_Template_div_dragover_1_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.fileDrop($event));
    })("dragleave", function NzUploadComponent_ng_container_6_Template_div_dragleave_1_listener($event) {
      \u0275\u0275restoreView(_r3);
      const ctx_r0 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r0.fileDrop($event));
    });
    \u0275\u0275elementStart(2, "div", 16, 6)(4, "div", 17);
    \u0275\u0275template(5, NzUploadComponent_ng_container_6_ng_template_5_Template, 0, 0, "ng-template", 14);
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(6, NzUploadComponent_ng_container_6_ng_template_6_Template, 0, 0, "ng-template", 14);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const list_r4 = \u0275\u0275reference(1);
    const con_r2 = \u0275\u0275reference(3);
    \u0275\u0275advance();
    \u0275\u0275property("ngClass", ctx_r0.classList);
    \u0275\u0275advance();
    \u0275\u0275property("options", ctx_r0._btnOptions);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngTemplateOutlet", con_r2);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", list_r4);
  }
}
function NzUploadComponent_ng_template_7_ng_container_0_ng_template_1_Template(rf, ctx) {
}
function NzUploadComponent_ng_template_7_ng_container_0_ng_template_2_Template(rf, ctx) {
}
function NzUploadComponent_ng_template_7_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementContainerStart(0);
    \u0275\u0275template(1, NzUploadComponent_ng_template_7_ng_container_0_ng_template_1_Template, 0, 0, "ng-template", 14)(2, NzUploadComponent_ng_template_7_ng_container_0_ng_template_2_Template, 0, 0, "ng-template", 14);
    \u0275\u0275elementContainerEnd();
  }
  if (rf & 2) {
    \u0275\u0275nextContext(2);
    const list_r4 = \u0275\u0275reference(1);
    const btn_r5 = \u0275\u0275reference(5);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", list_r4);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", btn_r5);
  }
}
function NzUploadComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadComponent_ng_template_7_ng_container_0_Template, 3, 2, "ng-container", 7);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    const pic_r6 = \u0275\u0275reference(10);
    \u0275\u0275property("ngIf", ctx_r0.nzListType === "picture-card")("ngIfElse", pic_r6);
  }
}
function NzUploadComponent_ng_template_9_ng_template_0_Template(rf, ctx) {
}
function NzUploadComponent_ng_template_9_ng_template_1_Template(rf, ctx) {
}
function NzUploadComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, NzUploadComponent_ng_template_9_ng_template_0_Template, 0, 0, "ng-template", 14)(1, NzUploadComponent_ng_template_9_ng_template_1_Template, 0, 0, "ng-template", 14);
  }
  if (rf & 2) {
    \u0275\u0275nextContext();
    const list_r4 = \u0275\u0275reference(1);
    const btn_r5 = \u0275\u0275reference(5);
    \u0275\u0275property("ngTemplateOutlet", btn_r5);
    \u0275\u0275advance();
    \u0275\u0275property("ngTemplateOutlet", list_r4);
  }
}
var _NzUploadBtnComponent = class _NzUploadBtnComponent {
  onClick() {
    if (this.options.disabled || !this.options.openFileDialogOnClick) {
      return;
    }
    this.file.nativeElement.click();
  }
  // skip safari bug
  onFileDrop(e) {
    if (this.options.disabled || e.type === "dragover") {
      e.preventDefault();
      return;
    }
    if (this.options.directory) {
      this.traverseFileTree(e.dataTransfer.items);
    } else {
      const files = Array.prototype.slice.call(e.dataTransfer.files).filter((file) => this.attrAccept(file, this.options.accept));
      if (files.length) {
        this.uploadFiles(files);
      }
    }
    e.preventDefault();
  }
  onChange(e) {
    if (this.options.disabled) {
      return;
    }
    const hie = e.target;
    this.uploadFiles(hie.files);
    hie.value = "";
  }
  traverseFileTree(files) {
    const _traverseFileTree = (item, path) => {
      if (item.isFile) {
        item.file((file) => {
          if (this.attrAccept(file, this.options.accept)) {
            this.uploadFiles([file]);
          }
        });
      } else if (item.isDirectory) {
        const dirReader = item.createReader();
        dirReader.readEntries((entries) => {
          for (const entrieItem of entries) {
            _traverseFileTree(entrieItem, `${path}${item.name}/`);
          }
        });
      }
    };
    for (const file of files) {
      _traverseFileTree(file.webkitGetAsEntry(), "");
    }
  }
  attrAccept(file, acceptedFiles) {
    if (file && acceptedFiles) {
      const acceptedFilesArray = Array.isArray(acceptedFiles) ? acceptedFiles : acceptedFiles.split(",");
      const fileName = `${file.name}`;
      const mimeType = `${file.type}`;
      const baseMimeType = mimeType.replace(/\/.*$/, "");
      return acceptedFilesArray.some((type) => {
        const validType = type.trim();
        if (validType.charAt(0) === ".") {
          return fileName.toLowerCase().indexOf(validType.toLowerCase(), fileName.toLowerCase().length - validType.toLowerCase().length) !== -1;
        } else if (/\/\*$/.test(validType)) {
          return baseMimeType === validType.replace(/\/.*$/, "");
        }
        return mimeType === validType;
      });
    }
    return true;
  }
  attachUid(file) {
    if (!file.uid) {
      file.uid = Math.random().toString(36).substring(2);
    }
    return file;
  }
  uploadFiles(fileList) {
    let filters$ = of(Array.prototype.slice.call(fileList));
    if (this.options.filters) {
      this.options.filters.forEach((f) => {
        filters$ = filters$.pipe(switchMap((list) => {
          const fnRes = f.fn(list);
          return fnRes instanceof Observable ? fnRes : of(fnRes);
        }));
      });
    }
    filters$.subscribe((list) => {
      list.forEach((file) => {
        this.attachUid(file);
        this.upload(file, list);
      });
    }, (e) => {
      warn2(`Unhandled upload filter error`, e);
    });
  }
  upload(file, fileList) {
    if (!this.options.beforeUpload) {
      return this.post(file);
    }
    const before = this.options.beforeUpload(file, fileList);
    if (before instanceof Observable) {
      before.subscribe((processedFile) => {
        const processedFileType = Object.prototype.toString.call(processedFile);
        if (processedFileType === "[object File]" || processedFileType === "[object Blob]") {
          this.attachUid(processedFile);
          this.post(processedFile);
        } else if (typeof processedFile === "boolean" && processedFile !== false) {
          this.post(file);
        }
      }, (e) => {
        warn2(`Unhandled upload beforeUpload error`, e);
      });
    } else if (before !== false) {
      return this.post(file);
    }
  }
  post(file) {
    if (this.destroy) {
      return;
    }
    let process$ = of(file);
    let transformedFile;
    const opt = this.options;
    const {
      uid
    } = file;
    const {
      action,
      data,
      headers,
      transformFile
    } = opt;
    const args = {
      action: typeof action === "string" ? action : "",
      name: opt.name,
      headers,
      file,
      postFile: file,
      data,
      withCredentials: opt.withCredentials,
      onProgress: opt.onProgress ? (e) => {
        opt.onProgress(e, file);
      } : void 0,
      onSuccess: (ret, xhr) => {
        this.clean(uid);
        opt.onSuccess(ret, file, xhr);
      },
      onError: (xhr) => {
        this.clean(uid);
        opt.onError(xhr, file);
      }
    };
    if (typeof action === "function") {
      const actionResult = action(file);
      if (actionResult instanceof Observable) {
        process$ = process$.pipe(switchMap(() => actionResult), map((res) => {
          args.action = res;
          return file;
        }));
      } else {
        args.action = actionResult;
      }
    }
    if (typeof transformFile === "function") {
      const transformResult = transformFile(file);
      process$ = process$.pipe(switchMap(() => transformResult instanceof Observable ? transformResult : of(transformResult)), tap((newFile) => transformedFile = newFile));
    }
    if (typeof data === "function") {
      const dataResult = data(file);
      if (dataResult instanceof Observable) {
        process$ = process$.pipe(switchMap(() => dataResult), map((res) => {
          args.data = res;
          return transformedFile ?? file;
        }));
      } else {
        args.data = dataResult;
      }
    }
    if (typeof headers === "function") {
      const headersResult = headers(file);
      if (headersResult instanceof Observable) {
        process$ = process$.pipe(switchMap(() => headersResult), map((res) => {
          args.headers = res;
          return transformedFile ?? file;
        }));
      } else {
        args.headers = headersResult;
      }
    }
    process$.subscribe((newFile) => {
      args.postFile = newFile;
      const req$ = (opt.customRequest || this.xhr).call(this, args);
      if (!(req$ instanceof Subscription)) {
        warn2(`Must return Subscription type in '[nzCustomRequest]' property`);
      }
      this.reqs[uid] = req$;
      opt.onStart(file);
    });
  }
  xhr(args) {
    const formData = new FormData();
    if (args.data) {
      Object.keys(args.data).map((key) => {
        formData.append(key, args.data[key]);
      });
    }
    formData.append(args.name, args.postFile);
    if (!args.headers) {
      args.headers = {};
    }
    if (args.headers["X-Requested-With"] !== null) {
      args.headers["X-Requested-With"] = `XMLHttpRequest`;
    } else {
      delete args.headers["X-Requested-With"];
    }
    const req = new HttpRequest("POST", args.action, formData, {
      reportProgress: true,
      withCredentials: args.withCredentials,
      headers: new HttpHeaders(args.headers)
    });
    return this.http.request(req).subscribe((event) => {
      if (event.type === HttpEventType.UploadProgress) {
        if (event.total > 0) {
          event.percent = event.loaded / event.total * 100;
        }
        args.onProgress(event, args.file);
      } else if (event instanceof HttpResponse) {
        args.onSuccess(event.body, args.file, event);
      }
    }, (err) => {
      this.abort(args.file);
      args.onError(err, args.file);
    });
  }
  clean(uid) {
    const req$ = this.reqs[uid];
    if (req$ instanceof Subscription) {
      req$.unsubscribe();
    }
    delete this.reqs[uid];
  }
  abort(file) {
    if (file) {
      this.clean(file && file.uid);
    } else {
      Object.keys(this.reqs).forEach((uid) => this.clean(uid));
    }
  }
  constructor(ngZone, http, elementRef) {
    this.ngZone = ngZone;
    this.http = http;
    this.elementRef = elementRef;
    this.reqs = {};
    this.destroy = false;
    this.destroy$ = new Subject();
    if (!http) {
      throw new Error(`Not found 'HttpClient', You can import 'HttpClientModule' in your root module.`);
    }
  }
  ngOnInit() {
    this.ngZone.runOutsideAngular(() => {
      fromEvent(this.elementRef.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe(() => this.onClick());
      fromEvent(this.elementRef.nativeElement, "keydown").pipe(takeUntil(this.destroy$)).subscribe((event) => {
        if (this.options.disabled) {
          return;
        }
        if (event.key === "Enter" || event.keyCode === ENTER) {
          this.onClick();
        }
      });
    });
  }
  ngOnDestroy() {
    this.destroy = true;
    this.destroy$.next();
    this.abort();
  }
};
_NzUploadBtnComponent.\u0275fac = function NzUploadBtnComponent_Factory(t) {
  return new (t || _NzUploadBtnComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(HttpClient, 8), \u0275\u0275directiveInject(ElementRef));
};
_NzUploadBtnComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzUploadBtnComponent,
  selectors: [["", "nz-upload-btn", ""]],
  viewQuery: function NzUploadBtnComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c020, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.file = _t.first);
    }
  },
  hostAttrs: [1, "ant-upload"],
  hostVars: 4,
  hostBindings: function NzUploadBtnComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("drop", function NzUploadBtnComponent_drop_HostBindingHandler($event) {
        return ctx.onFileDrop($event);
      })("dragover", function NzUploadBtnComponent_dragover_HostBindingHandler($event) {
        return ctx.onFileDrop($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275attribute("tabindex", "0")("role", "button");
      \u0275\u0275classProp("ant-upload-disabled", ctx.options.disabled);
    }
  },
  inputs: {
    options: "options"
  },
  exportAs: ["nzUploadBtn"],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  attrs: _c115,
  ngContentSelectors: _c211,
  decls: 3,
  vars: 6,
  consts: [["file", ""], ["type", "file", 3, "change", "multiple"]],
  template: function NzUploadBtnComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = \u0275\u0275getCurrentView();
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "input", 1, 0);
      \u0275\u0275listener("change", function NzUploadBtnComponent_Template_input_change_0_listener($event) {
        \u0275\u0275restoreView(_r1);
        return \u0275\u0275resetView(ctx.onChange($event));
      });
      \u0275\u0275elementEnd();
      \u0275\u0275projection(2);
    }
    if (rf & 2) {
      \u0275\u0275styleProp("display", "none");
      \u0275\u0275property("multiple", ctx.options.multiple);
      \u0275\u0275attribute("accept", ctx.options.accept)("directory", ctx.options.directory ? "directory" : null)("webkitdirectory", ctx.options.directory ? "webkitdirectory" : null);
    }
  },
  encapsulation: 2
});
var NzUploadBtnComponent = _NzUploadBtnComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzUploadBtnComponent, [{
    type: Component,
    args: [{
      selector: "[nz-upload-btn]",
      exportAs: "nzUploadBtn",
      host: {
        class: "ant-upload",
        "[attr.tabindex]": '"0"',
        "[attr.role]": '"button"',
        "[class.ant-upload-disabled]": "options.disabled",
        "(drop)": "onFileDrop($event)",
        "(dragover)": "onFileDrop($event)"
      },
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      standalone: true,
      template: `<!--
  We explicitly bind \`style.display\` to avoid using an inline style
  attribute property (which is not allowed when CSP \`unsafe-inline\`
  is not specified).
-->
<input
  type="file"
  #file
  (change)="onChange($event)"
  [attr.accept]="options.accept"
  [attr.directory]="options.directory ? 'directory' : null"
  [attr.webkitdirectory]="options.directory ? 'webkitdirectory' : null"
  [multiple]="options.multiple"
  [style.display]="'none'"
/>
<ng-content></ng-content>
`
    }]
  }], () => [{
    type: NgZone
  }, {
    type: HttpClient,
    decorators: [{
      type: Optional
    }]
  }, {
    type: ElementRef
  }], {
    file: [{
      type: ViewChild,
      args: ["file", {
        static: true
      }]
    }],
    options: [{
      type: Input
    }]
  });
})();
var isImageFileType = (type) => !!type && type.indexOf("image/") === 0;
var MEASURE_SIZE = 200;
var _NzUploadListComponent = class _NzUploadListComponent {
  get showPic() {
    return this.listType === "picture" || this.listType === "picture-card";
  }
  set items(list) {
    this.list = list;
  }
  genErr(file) {
    if (file.response && typeof file.response === "string") {
      return file.response;
    }
    return file.error && file.error.statusText || this.locale.uploadError;
  }
  extname(url) {
    const temp = url.split("/");
    const filename = temp[temp.length - 1];
    const filenameWithoutSuffix = filename.split(/#|\?/)[0];
    return (/\.[^./\\]*$/.exec(filenameWithoutSuffix) || [""])[0];
  }
  isImageUrl(file) {
    if (isImageFileType(file.type)) {
      return true;
    }
    const url = file.thumbUrl || file.url || "";
    if (!url) {
      return false;
    }
    const extension = this.extname(url);
    if (/^data:image\//.test(url) || /(webp|svg|png|gif|jpg|jpeg|jfif|bmp|dpg)$/i.test(extension)) {
      return true;
    } else if (/^data:/.test(url)) {
      return false;
    } else if (extension) {
      return false;
    }
    return true;
  }
  getIconType(file) {
    if (!this.showPic) {
      return "";
    }
    if (file.isUploading || !file.thumbUrl && !file.url) {
      return "uploading";
    } else {
      return "thumbnail";
    }
  }
  previewImage(file) {
    if (!isImageFileType(file.type) || !this.platform.isBrowser) {
      return of("");
    }
    const canvas = this.doc.createElement("canvas");
    canvas.width = MEASURE_SIZE;
    canvas.height = MEASURE_SIZE;
    canvas.style.cssText = `position: fixed; left: 0; top: 0; width: ${MEASURE_SIZE}px; height: ${MEASURE_SIZE}px; z-index: 9999; display: none;`;
    this.doc.body.appendChild(canvas);
    const ctx = canvas.getContext("2d");
    const img = new Image();
    const objectUrl = URL.createObjectURL(file);
    img.src = objectUrl;
    return fromEvent(img, "load").pipe(map(() => {
      const {
        width,
        height
      } = img;
      let drawWidth = MEASURE_SIZE;
      let drawHeight = MEASURE_SIZE;
      let offsetX = 0;
      let offsetY = 0;
      if (width < height) {
        drawHeight = height * (MEASURE_SIZE / width);
        offsetY = -(drawHeight - drawWidth) / 2;
      } else {
        drawWidth = width * (MEASURE_SIZE / height);
        offsetX = -(drawWidth - drawHeight) / 2;
      }
      try {
        ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      } catch {
      }
      const dataURL = canvas.toDataURL();
      this.doc.body.removeChild(canvas);
      URL.revokeObjectURL(objectUrl);
      return dataURL;
    }));
  }
  genThumb() {
    if (!this.platform.isBrowser) {
      return;
    }
    const win = window;
    if (!this.showPic || typeof document === "undefined" || typeof win === "undefined" || !win.FileReader || !win.File) {
      return;
    }
    this.list.filter((file) => file.originFileObj instanceof File && file.thumbUrl === void 0).forEach((file) => {
      file.thumbUrl = "";
      const dataUrl$ = (this.previewFile ? this.previewFile(file) : this.previewImage(file.originFileObj)).pipe(takeUntil(this.destroy$));
      this.ngZone.runOutsideAngular(() => {
        dataUrl$.subscribe((dataUrl) => {
          this.ngZone.run(() => {
            file.thumbUrl = dataUrl;
            this.detectChanges();
          });
        });
      });
    });
  }
  showDownload(file) {
    return !!(this.icons.showDownloadIcon && file.status === "done");
  }
  fixData() {
    this.list.forEach((file) => {
      file.isUploading = file.status === "uploading";
      file.message = this.genErr(file);
      file.linkProps = typeof file.linkProps === "string" ? JSON.parse(file.linkProps) : file.linkProps;
      file.isImageUrl = this.previewIsImage ? this.previewIsImage(file) : this.isImageUrl(file);
      file.iconType = this.getIconType(file);
      file.showDownload = this.showDownload(file);
    });
  }
  handlePreview(file, e) {
    if (!this.onPreview) {
      return;
    }
    e.preventDefault();
    return this.onPreview(file);
  }
  handleRemove(file, e) {
    e.preventDefault();
    if (this.onRemove) {
      this.onRemove(file);
    }
    return;
  }
  handleDownload(file) {
    if (typeof this.onDownload === "function") {
      this.onDownload(file);
    } else if (file.url) {
      window.open(file.url);
    }
  }
  // #endregion
  constructor(cdr, doc, ngZone, platform) {
    this.cdr = cdr;
    this.doc = doc;
    this.ngZone = ngZone;
    this.platform = platform;
    this.list = [];
    this.locale = {};
    this.iconRender = null;
    this.dir = "ltr";
    this.destroy$ = new Subject();
  }
  detectChanges() {
    this.fixData();
    this.cdr.detectChanges();
  }
  ngOnChanges() {
    this.fixData();
    this.genThumb();
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
};
_NzUploadListComponent.\u0275fac = function NzUploadListComponent_Factory(t) {
  return new (t || _NzUploadListComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform));
};
_NzUploadListComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzUploadListComponent,
  selectors: [["nz-upload-list"]],
  hostAttrs: [1, "ant-upload-list"],
  hostVars: 8,
  hostBindings: function NzUploadListComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-upload-list-rtl", ctx.dir === "rtl")("ant-upload-list-text", ctx.listType === "text")("ant-upload-list-picture", ctx.listType === "picture")("ant-upload-list-picture-card", ctx.listType === "picture-card");
    }
  },
  inputs: {
    locale: "locale",
    listType: "listType",
    items: "items",
    icons: "icons",
    onPreview: "onPreview",
    onRemove: "onRemove",
    onDownload: "onDownload",
    previewFile: "previewFile",
    previewIsImage: "previewIsImage",
    iconRender: "iconRender",
    dir: "dir"
  },
  exportAs: ["nzUploadList"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  decls: 1,
  vars: 1,
  consts: [["icon", ""], ["iconNode", ""], ["removeIcon", ""], ["downloadIcon", ""], ["downloadOrDelete", ""], ["preview", ""], ["noImageThumbTpl", ""], ["customIconRender", ""], ["iconNodeFileIcon", ""], [3, "class", 4, "ngFor", "ngForOf"], ["nz-tooltip", "", 3, "nzTooltipTitle"], [1, "ant-upload-list-item-info"], [1, "ant-upload-span"], [3, "ngTemplateOutlet"], ["class", "ant-upload-list-item-actions", 4, "ngIf"], ["class", "ant-upload-list-item-progress", 4, "ngIf"], [3, "ngSwitch"], ["class", "ant-upload-list-item-thumbnail", 3, "ant-upload-list-item-file", 4, "ngSwitchCase"], ["class", "ant-upload-list-item-thumbnail", "target", "_blank", "rel", "noopener noreferrer", 3, "ant-upload-list-item-file", "href", "click", 4, "ngSwitchCase"], ["class", "ant-upload-text-icon", 4, "ngSwitchDefault"], [1, "ant-upload-list-item-thumbnail"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["target", "_blank", "rel", "noopener noreferrer", 1, "ant-upload-list-item-thumbnail", 3, "click", "href"], ["class", "ant-upload-list-item-image", 3, "src", 4, "ngIf", "ngIfElse"], [1, "ant-upload-list-item-image", 3, "src"], [1, "ant-upload-text-icon"], [4, "ngIf", "ngIfElse"], [4, "ngSwitchCase"], ["nz-icon", "", 3, "nzType", 4, "ngSwitchDefault"], ["nz-icon", "", "nzType", "loading"], ["nz-icon", "", 3, "nzType"], ["nz-icon", "", "nzTheme", "twotone", 3, "nzType"], ["type", "button", "nz-button", "", "nzType", "text", "nzSize", "small", "class", "ant-upload-list-item-card-actions-btn", 3, "click", 4, "ngIf"], ["type", "button", "nz-button", "", "nzType", "text", "nzSize", "small", 1, "ant-upload-list-item-card-actions-btn", 3, "click"], ["nz-icon", "", "nzType", "delete"], ["nz-icon", "", "nzType", "download"], [3, "class", 4, "ngIf"], ["target", "_blank", "rel", "noopener noreferrer", "class", "ant-upload-list-item-name", 3, "href", "click", 4, "ngIf"], ["class", "ant-upload-list-item-name", 3, "click", 4, "ngIf"], ["target", "_blank", "rel", "noopener noreferrer", 1, "ant-upload-list-item-name", 3, "click", "href"], [1, "ant-upload-list-item-name", 3, "click"], [1, "ant-upload-list-item-actions"], ["target", "_blank", "rel", "noopener noreferrer", 3, "href", "ngStyle", "click", 4, "ngIf"], [4, "ngIf"], ["target", "_blank", "rel", "noopener noreferrer", 3, "click", "href", "ngStyle"], ["nz-icon", "", "nzType", "eye"], [1, "ant-upload-list-item-progress"], ["nzType", "line", 3, "nzPercent", "nzShowInfo", "nzStrokeWidth"]],
  template: function NzUploadListComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, NzUploadListComponent_div_0_Template, 20, 14, "div", 9);
    }
    if (rf & 2) {
      \u0275\u0275property("ngForOf", ctx.list);
    }
  },
  dependencies: [NgForOf, NzToolTipModule, NzTooltipDirective, NgSwitch, NgTemplateOutlet, NgIf, NgSwitchDefault, NgSwitchCase, NzIconModule, NzIconDirective, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NgStyle, NzProgressModule, NzProgressComponent],
  encapsulation: 2,
  data: {
    animation: [trigger("itemState", [transition(":enter", [style({
      height: "0",
      width: "0",
      opacity: 0
    }), animate(150, style({
      height: "*",
      width: "*",
      opacity: 1
    }))]), transition(":leave", [animate(150, style({
      height: "0",
      width: "0",
      opacity: 0
    }))])])]
  },
  changeDetection: 0
});
var NzUploadListComponent = _NzUploadListComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzUploadListComponent, [{
    type: Component,
    args: [{
      selector: "nz-upload-list",
      exportAs: "nzUploadList",
      animations: [trigger("itemState", [transition(":enter", [style({
        height: "0",
        width: "0",
        opacity: 0
      }), animate(150, style({
        height: "*",
        width: "*",
        opacity: 1
      }))]), transition(":leave", [animate(150, style({
        height: "0",
        width: "0",
        opacity: 0
      }))])])],
      host: {
        class: "ant-upload-list",
        "[class.ant-upload-list-rtl]": `dir === 'rtl'`,
        "[class.ant-upload-list-text]": `listType === 'text'`,
        "[class.ant-upload-list-picture]": `listType === 'picture'`,
        "[class.ant-upload-list-picture-card]": `listType === 'picture-card'`
      },
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      imports: [NgForOf, NzToolTipModule, NgSwitch, NgTemplateOutlet, NgIf, NgSwitchDefault, NgSwitchCase, NzIconModule, NzButtonModule, NgStyle, NzProgressModule],
      standalone: true,
      template: `<div *ngFor="let file of list" class="ant-upload-list-{{ listType }}-container">
  <div
    class="ant-upload-list-item ant-upload-list-item-{{ file.status }} ant-upload-list-item-list-type-{{ listType }}"
    [attr.data-key]="file.key"
    @itemState
    nz-tooltip
    [nzTooltipTitle]="file.status === 'error' ? file.message : null"
  >
    <ng-template #icon>
      <ng-container [ngSwitch]="file.iconType">
        <div
          *ngSwitchCase="'uploading'"
          class="ant-upload-list-item-thumbnail"
          [class.ant-upload-list-item-file]="!file.isUploading"
        >
          <ng-template [ngTemplateOutlet]="iconNode" [ngTemplateOutletContext]="{ $implicit: file }"></ng-template>
        </div>
        <a
          *ngSwitchCase="'thumbnail'"
          class="ant-upload-list-item-thumbnail"
          [class.ant-upload-list-item-file]="!file.isImageUrl"
          target="_blank"
          rel="noopener noreferrer"
          [href]="file.url || file.thumbUrl"
          (click)="handlePreview(file, $event)"
        >
          <img
            *ngIf="file.isImageUrl; else noImageThumbTpl"
            class="ant-upload-list-item-image"
            [src]="file.thumbUrl || file.url"
            [attr.alt]="file.name"
          />
        </a>
        <div *ngSwitchDefault class="ant-upload-text-icon">
          <ng-template [ngTemplateOutlet]="iconNode" [ngTemplateOutletContext]="{ $implicit: file }"></ng-template>
        </div>
      </ng-container>
      <ng-template #noImageThumbTpl>
        <ng-template [ngTemplateOutlet]="iconNode" [ngTemplateOutletContext]="{ $implicit: file }"></ng-template>
      </ng-template>
    </ng-template>
    <ng-template #iconNode let-file>
      <ng-container *ngIf="!iconRender; else customIconRender">
        <ng-container [ngSwitch]="listType">
          <ng-container *ngSwitchCase="'picture'">
            <ng-container *ngIf="file.isUploading; else iconNodeFileIcon">
              <span nz-icon nzType="loading"></span>
            </ng-container>
          </ng-container>
          <ng-container *ngSwitchCase="'picture-card'">
            <ng-container *ngIf="file.isUploading; else iconNodeFileIcon">
              {{ locale.uploading }}
            </ng-container>
          </ng-container>
          <span *ngSwitchDefault nz-icon [nzType]="file.isUploading ? 'loading' : 'paper-clip'"></span>
        </ng-container>
      </ng-container>
      <ng-template
        #customIconRender
        [ngTemplateOutlet]="iconRender"
        [ngTemplateOutletContext]="{ $implicit: file }"
      ></ng-template>
      <ng-template #iconNodeFileIcon>
        <span nz-icon [nzType]="file.isImageUrl ? 'picture' : 'file'" nzTheme="twotone"></span>
      </ng-template>
    </ng-template>
    <ng-template #removeIcon>
      <button
        *ngIf="icons.showRemoveIcon"
        type="button"
        nz-button
        nzType="text"
        nzSize="small"
        (click)="handleRemove(file, $event)"
        [attr.title]="locale.removeFile"
        class="ant-upload-list-item-card-actions-btn"
      >
        <span nz-icon nzType="delete"></span>
      </button>
    </ng-template>
    <ng-template #downloadIcon>
      <button
        *ngIf="file.showDownload"
        type="button"
        nz-button
        nzType="text"
        nzSize="small"
        (click)="handleDownload(file)"
        [attr.title]="locale.downloadFile"
        class="ant-upload-list-item-card-actions-btn"
      >
        <span nz-icon nzType="download"></span>
      </button>
    </ng-template>
    <ng-template #downloadOrDelete>
      <span
        *ngIf="listType !== 'picture-card'"
        class="ant-upload-list-item-card-actions {{ listType === 'picture' ? 'picture' : '' }}"
      >
        <ng-template [ngTemplateOutlet]="downloadIcon"></ng-template>
        <ng-template [ngTemplateOutlet]="removeIcon"></ng-template>
      </span>
    </ng-template>
    <ng-template #preview>
      <a
        *ngIf="file.url"
        target="_blank"
        rel="noopener noreferrer"
        class="ant-upload-list-item-name"
        [attr.title]="file.name"
        [href]="file.url"
        [attr.download]="file.linkProps && file.linkProps.download"
        (click)="handlePreview(file, $event)"
      >
        {{ file.name }}
      </a>
      <span
        *ngIf="!file.url"
        class="ant-upload-list-item-name"
        [attr.title]="file.name"
        (click)="handlePreview(file, $event)"
      >
        {{ file.name }}
      </span>
      <ng-template [ngTemplateOutlet]="downloadOrDelete"></ng-template>
    </ng-template>
    <div class="ant-upload-list-item-info">
      <span class="ant-upload-span">
        <ng-template [ngTemplateOutlet]="icon"></ng-template>
        <ng-template [ngTemplateOutlet]="preview"></ng-template>
      </span>
    </div>
    <span *ngIf="listType === 'picture-card' && !file.isUploading" class="ant-upload-list-item-actions">
      <a
        *ngIf="icons.showPreviewIcon"
        [href]="file.url || file.thumbUrl"
        target="_blank"
        rel="noopener noreferrer"
        [attr.title]="locale.previewFile"
        [ngStyle]="!(file.url || file.thumbUrl) ? { opacity: 0.5, 'pointer-events': 'none' } : null"
        (click)="handlePreview(file, $event)"
      >
        <span nz-icon nzType="eye"></span>
      </a>
      <ng-container *ngIf="file.status === 'done'">
        <ng-template [ngTemplateOutlet]="downloadIcon"></ng-template>
      </ng-container>
      <ng-template [ngTemplateOutlet]="removeIcon"></ng-template>
    </span>
    <div *ngIf="file.isUploading" class="ant-upload-list-item-progress">
      <nz-progress [nzPercent]="file.percent!" nzType="line" [nzShowInfo]="false" [nzStrokeWidth]="2"></nz-progress>
    </div>
  </div>
</div>
`
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: NgZone
  }, {
    type: Platform
  }], {
    locale: [{
      type: Input
    }],
    listType: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    icons: [{
      type: Input
    }],
    onPreview: [{
      type: Input
    }],
    onRemove: [{
      type: Input
    }],
    onDownload: [{
      type: Input
    }],
    previewFile: [{
      type: Input
    }],
    previewIsImage: [{
      type: Input
    }],
    iconRender: [{
      type: Input
    }],
    dir: [{
      type: Input
    }]
  });
})();
var _NzUploadComponent = class _NzUploadComponent {
  set nzShowUploadList(value) {
    this._showUploadList = typeof value === "boolean" ? toBoolean(value) : value;
  }
  get nzShowUploadList() {
    return this._showUploadList;
  }
  zipOptions() {
    if (typeof this.nzShowUploadList === "boolean" && this.nzShowUploadList) {
      this.nzShowUploadList = {
        showPreviewIcon: true,
        showRemoveIcon: true,
        showDownloadIcon: true
      };
    }
    const filters = this.nzFilter.slice();
    if (this.nzMultiple && this.nzLimit > 0 && filters.findIndex((w) => w.name === "limit") === -1) {
      filters.push({
        name: "limit",
        fn: (fileList) => fileList.slice(-this.nzLimit)
      });
    }
    if (this.nzSize > 0 && filters.findIndex((w) => w.name === "size") === -1) {
      filters.push({
        name: "size",
        fn: (fileList) => fileList.filter((w) => w.size / 1024 <= this.nzSize)
      });
    }
    if (this.nzFileType && this.nzFileType.length > 0 && filters.findIndex((w) => w.name === "type") === -1) {
      const types = this.nzFileType.split(",");
      filters.push({
        name: "type",
        fn: (fileList) => fileList.filter((w) => ~types.indexOf(w.type))
      });
    }
    this._btnOptions = {
      disabled: this.nzDisabled,
      accept: this.nzAccept,
      action: this.nzAction,
      directory: this.nzDirectory,
      openFileDialogOnClick: this.nzOpenFileDialogOnClick,
      beforeUpload: this.nzBeforeUpload,
      customRequest: this.nzCustomRequest,
      data: this.nzData,
      headers: this.nzHeaders,
      name: this.nzName,
      multiple: this.nzMultiple,
      withCredentials: this.nzWithCredentials,
      filters,
      transformFile: this.nzTransformFile,
      onStart: this.onStart,
      onProgress: this.onProgress,
      onSuccess: this.onSuccess,
      onError: this.onError
    };
    return this;
  }
  // #endregion
  constructor(ngZone, document2, cdr, i18n, directionality) {
    this.ngZone = ngZone;
    this.document = document2;
    this.cdr = cdr;
    this.i18n = i18n;
    this.directionality = directionality;
    this.destroy$ = new Subject();
    this.dir = "ltr";
    this.nzType = "select";
    this.nzLimit = 0;
    this.nzSize = 0;
    this.nzDirectory = false;
    this.nzOpenFileDialogOnClick = true;
    this.nzFilter = [];
    this.nzFileList = [];
    this.nzDisabled = false;
    this.nzListType = "text";
    this.nzMultiple = false;
    this.nzName = "file";
    this._showUploadList = true;
    this.nzShowButton = true;
    this.nzWithCredentials = false;
    this.nzIconRender = null;
    this.nzFileListRender = null;
    this.nzChange = new EventEmitter();
    this.nzFileListChange = new EventEmitter();
    this.onStart = (file) => {
      if (!this.nzFileList) {
        this.nzFileList = [];
      }
      const targetItem = this.fileToObject(file);
      targetItem.status = "uploading";
      this.nzFileList = this.nzFileList.concat(targetItem);
      this.nzFileListChange.emit(this.nzFileList);
      this.nzChange.emit({
        file: targetItem,
        fileList: this.nzFileList,
        type: "start"
      });
      this.detectChangesList();
    };
    this.onProgress = (e, file) => {
      const fileList = this.nzFileList;
      const targetItem = this.getFileItem(file, fileList);
      targetItem.percent = e.percent;
      this.nzChange.emit({
        event: e,
        file: __spreadValues({}, targetItem),
        fileList: this.nzFileList,
        type: "progress"
      });
      this.detectChangesList();
    };
    this.onSuccess = (res, file) => {
      const fileList = this.nzFileList;
      const targetItem = this.getFileItem(file, fileList);
      targetItem.status = "done";
      targetItem.response = res;
      this.nzChange.emit({
        file: __spreadValues({}, targetItem),
        fileList,
        type: "success"
      });
      this.detectChangesList();
    };
    this.onError = (err, file) => {
      const fileList = this.nzFileList;
      const targetItem = this.getFileItem(file, fileList);
      targetItem.error = err;
      targetItem.status = "error";
      this.nzChange.emit({
        file: __spreadValues({}, targetItem),
        fileList,
        type: "error"
      });
      this.detectChangesList();
    };
    this.onRemove = (file) => {
      this.uploadComp.abort(file);
      file.status = "removed";
      const fnRes = typeof this.nzRemove === "function" ? this.nzRemove(file) : this.nzRemove == null ? true : this.nzRemove;
      (fnRes instanceof Observable ? fnRes : of(fnRes)).pipe(filter((res) => res)).subscribe(() => {
        this.nzFileList = this.removeFileItem(file, this.nzFileList);
        this.nzChange.emit({
          file,
          fileList: this.nzFileList,
          type: "removed"
        });
        this.nzFileListChange.emit(this.nzFileList);
        this.cdr.detectChanges();
      });
    };
    this.prefixCls = "ant-upload";
    this.classList = [];
  }
  // #region upload
  fileToObject(file) {
    return {
      lastModified: file.lastModified,
      lastModifiedDate: file.lastModifiedDate,
      name: file.filename || file.name,
      size: file.size,
      type: file.type,
      uid: file.uid,
      response: file.response,
      error: file.error,
      percent: 0,
      originFileObj: file
    };
  }
  getFileItem(file, fileList) {
    return fileList.filter((item) => item.uid === file.uid)[0];
  }
  removeFileItem(file, fileList) {
    return fileList.filter((item) => item.uid !== file.uid);
  }
  // skip safari bug
  fileDrop(e) {
    if (e.type === this.dragState) {
      return;
    }
    this.dragState = e.type;
    this.setClassMap();
  }
  // #endregion
  // #region list
  detectChangesList() {
    this.cdr.detectChanges();
    this.listComp?.detectChanges();
  }
  setClassMap() {
    let subCls = [];
    if (this.nzType === "drag") {
      if (this.nzFileList.some((file) => file.status === "uploading")) {
        subCls.push(`${this.prefixCls}-drag-uploading`);
      }
      if (this.dragState === "dragover") {
        subCls.push(`${this.prefixCls}-drag-hover`);
      }
    } else {
      subCls = [`${this.prefixCls}-select-${this.nzListType}`];
    }
    this.classList = [this.prefixCls, `${this.prefixCls}-${this.nzType}`, ...subCls, this.nzDisabled && `${this.prefixCls}-disabled` || "", this.dir === "rtl" && `${this.prefixCls}-rtl` || ""].filter((item) => !!item);
    this.cdr.detectChanges();
  }
  // #endregion
  ngOnInit() {
    this.dir = this.directionality.value;
    this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {
      this.dir = direction;
      this.setClassMap();
      this.cdr.detectChanges();
    });
    this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.locale = this.i18n.getLocaleData("Upload");
      this.detectChangesList();
    });
  }
  ngAfterViewInit() {
    this.ngZone.runOutsideAngular(() => fromEvent(this.document.body, "drop").pipe(takeUntil(this.destroy$)).subscribe((event) => {
      event.preventDefault();
      event.stopPropagation();
    }));
  }
  ngOnChanges() {
    this.zipOptions().setClassMap();
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
};
_NzUploadComponent.\u0275fac = function NzUploadComponent_Factory(t) {
  return new (t || _NzUploadComponent)(\u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(DOCUMENT), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NzI18nService), \u0275\u0275directiveInject(Directionality, 8));
};
_NzUploadComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _NzUploadComponent,
  selectors: [["nz-upload"]],
  viewQuery: function NzUploadComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c54, 5);
      \u0275\u0275viewQuery(_c64, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.uploadComp = _t.first);
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.listComp = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function NzUploadComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("ant-upload-picture-card-wrapper", ctx.nzListType === "picture-card");
    }
  },
  inputs: {
    nzType: "nzType",
    nzLimit: "nzLimit",
    nzSize: "nzSize",
    nzFileType: "nzFileType",
    nzAccept: "nzAccept",
    nzAction: "nzAction",
    nzDirectory: "nzDirectory",
    nzOpenFileDialogOnClick: "nzOpenFileDialogOnClick",
    nzBeforeUpload: "nzBeforeUpload",
    nzCustomRequest: "nzCustomRequest",
    nzData: "nzData",
    nzFilter: "nzFilter",
    nzFileList: "nzFileList",
    nzDisabled: "nzDisabled",
    nzHeaders: "nzHeaders",
    nzListType: "nzListType",
    nzMultiple: "nzMultiple",
    nzName: "nzName",
    nzShowUploadList: "nzShowUploadList",
    nzShowButton: "nzShowButton",
    nzWithCredentials: "nzWithCredentials",
    nzRemove: "nzRemove",
    nzPreview: "nzPreview",
    nzPreviewFile: "nzPreviewFile",
    nzPreviewIsImage: "nzPreviewIsImage",
    nzTransformFile: "nzTransformFile",
    nzDownload: "nzDownload",
    nzIconRender: "nzIconRender",
    nzFileListRender: "nzFileListRender"
  },
  outputs: {
    nzChange: "nzChange",
    nzFileListChange: "nzFileListChange"
  },
  exportAs: ["nzUpload"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c211,
  decls: 11,
  vars: 2,
  consts: [["list", ""], ["con", ""], ["btn", ""], ["select", ""], ["pic", ""], ["listComp", ""], ["uploadComp", ""], [4, "ngIf", "ngIfElse"], [3, "display", "locale", "listType", "items", "icons", "iconRender", "previewFile", "previewIsImage", "onPreview", "onRemove", "onDownload", "dir", 4, "ngIf"], [4, "ngIf"], [3, "locale", "listType", "items", "icons", "iconRender", "previewFile", "previewIsImage", "onPreview", "onRemove", "onDownload", "dir"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngClass"], ["nz-upload-btn", "", 3, "options"], [3, "ngTemplateOutlet"], [3, "drop", "dragover", "dragleave", "ngClass"], ["nz-upload-btn", "", 1, "ant-upload-btn", 3, "options"], [1, "ant-upload-drag-container"]],
  template: function NzUploadComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275template(0, NzUploadComponent_ng_template_0_Template, 2, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor)(2, NzUploadComponent_ng_template_2_Template, 1, 0, "ng-template", null, 1, \u0275\u0275templateRefExtractor)(4, NzUploadComponent_ng_template_4_Template, 4, 5, "ng-template", null, 2, \u0275\u0275templateRefExtractor)(6, NzUploadComponent_ng_container_6_Template, 7, 4, "ng-container", 7)(7, NzUploadComponent_ng_template_7_Template, 1, 2, "ng-template", null, 3, \u0275\u0275templateRefExtractor)(9, NzUploadComponent_ng_template_9_Template, 2, 2, "ng-template", null, 4, \u0275\u0275templateRefExtractor);
    }
    if (rf & 2) {
      const select_r7 = \u0275\u0275reference(8);
      \u0275\u0275advance(6);
      \u0275\u0275property("ngIf", ctx.nzType === "drag")("ngIfElse", select_r7);
    }
  },
  dependencies: [NzUploadListComponent, NgIf, NgTemplateOutlet, NgClass, NzUploadBtnComponent],
  encapsulation: 2,
  changeDetection: 0
});
var NzUploadComponent = _NzUploadComponent;
__decorate([InputNumber()], NzUploadComponent.prototype, "nzLimit", void 0);
__decorate([InputNumber()], NzUploadComponent.prototype, "nzSize", void 0);
__decorate([InputBoolean()], NzUploadComponent.prototype, "nzDirectory", void 0);
__decorate([InputBoolean()], NzUploadComponent.prototype, "nzOpenFileDialogOnClick", void 0);
__decorate([InputBoolean()], NzUploadComponent.prototype, "nzDisabled", void 0);
__decorate([InputBoolean()], NzUploadComponent.prototype, "nzMultiple", void 0);
__decorate([InputBoolean()], NzUploadComponent.prototype, "nzShowButton", void 0);
__decorate([InputBoolean()], NzUploadComponent.prototype, "nzWithCredentials", void 0);
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzUploadComponent, [{
    type: Component,
    args: [{
      selector: "nz-upload",
      exportAs: "nzUpload",
      preserveWhitespaces: false,
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        "[class.ant-upload-picture-card-wrapper]": 'nzListType === "picture-card"'
      },
      imports: [NzUploadListComponent, NgIf, NgTemplateOutlet, NgClass, NzUploadBtnComponent],
      standalone: true,
      template: `<ng-template #list>
  <nz-upload-list
    *ngIf="locale && !nzFileListRender"
    #listComp
    [style.display]="nzShowUploadList ? '' : 'none'"
    [locale]="locale"
    [listType]="nzListType"
    [items]="nzFileList || []"
    [icons]="$any(nzShowUploadList)"
    [iconRender]="nzIconRender"
    [previewFile]="nzPreviewFile"
    [previewIsImage]="nzPreviewIsImage"
    [onPreview]="nzPreview"
    [onRemove]="onRemove"
    [onDownload]="nzDownload"
    [dir]="dir"
  ></nz-upload-list>
  <ng-container *ngIf="nzFileListRender">
    <ng-container *ngTemplateOutlet="nzFileListRender; context: { $implicit: nzFileList }"></ng-container>
  </ng-container>
</ng-template>
<ng-template #con><ng-content></ng-content></ng-template>
<ng-template #btn>
  <div [ngClass]="classList" [style.display]="nzShowButton ? '' : 'none'">
    <div nz-upload-btn #uploadComp [options]="_btnOptions!">
      <ng-template [ngTemplateOutlet]="con"></ng-template>
    </div>
  </div>
</ng-template>
<ng-container *ngIf="nzType === 'drag'; else select">
  <div [ngClass]="classList" (drop)="fileDrop($event)" (dragover)="fileDrop($event)" (dragleave)="fileDrop($event)">
    <div nz-upload-btn #uploadComp [options]="_btnOptions!" class="ant-upload-btn">
      <div class="ant-upload-drag-container">
        <ng-template [ngTemplateOutlet]="con"></ng-template>
      </div>
    </div>
  </div>
  <ng-template [ngTemplateOutlet]="list"></ng-template>
</ng-container>
<ng-template #select>
  <ng-container *ngIf="nzListType === 'picture-card'; else pic">
    <ng-template [ngTemplateOutlet]="list"></ng-template>
    <ng-template [ngTemplateOutlet]="btn"></ng-template>
  </ng-container>
</ng-template>
<ng-template #pic>
  <ng-template [ngTemplateOutlet]="btn"></ng-template>
  <ng-template [ngTemplateOutlet]="list"></ng-template>
</ng-template>
`
    }]
  }], () => [{
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: ChangeDetectorRef
  }, {
    type: NzI18nService
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    uploadComp: [{
      type: ViewChild,
      args: ["uploadComp", {
        static: false
      }]
    }],
    listComp: [{
      type: ViewChild,
      args: ["listComp", {
        static: false
      }]
    }],
    nzType: [{
      type: Input
    }],
    nzLimit: [{
      type: Input
    }],
    nzSize: [{
      type: Input
    }],
    nzFileType: [{
      type: Input
    }],
    nzAccept: [{
      type: Input
    }],
    nzAction: [{
      type: Input
    }],
    nzDirectory: [{
      type: Input
    }],
    nzOpenFileDialogOnClick: [{
      type: Input
    }],
    nzBeforeUpload: [{
      type: Input
    }],
    nzCustomRequest: [{
      type: Input
    }],
    nzData: [{
      type: Input
    }],
    nzFilter: [{
      type: Input
    }],
    nzFileList: [{
      type: Input
    }],
    nzDisabled: [{
      type: Input
    }],
    nzHeaders: [{
      type: Input
    }],
    nzListType: [{
      type: Input
    }],
    nzMultiple: [{
      type: Input
    }],
    nzName: [{
      type: Input
    }],
    nzShowUploadList: [{
      type: Input
    }],
    nzShowButton: [{
      type: Input
    }],
    nzWithCredentials: [{
      type: Input
    }],
    nzRemove: [{
      type: Input
    }],
    nzPreview: [{
      type: Input
    }],
    nzPreviewFile: [{
      type: Input
    }],
    nzPreviewIsImage: [{
      type: Input
    }],
    nzTransformFile: [{
      type: Input
    }],
    nzDownload: [{
      type: Input
    }],
    nzIconRender: [{
      type: Input
    }],
    nzFileListRender: [{
      type: Input
    }],
    nzChange: [{
      type: Output
    }],
    nzFileListChange: [{
      type: Output
    }]
  });
})();
var _NzUploadModule = class _NzUploadModule {
};
_NzUploadModule.\u0275fac = function NzUploadModule_Factory(t) {
  return new (t || _NzUploadModule)();
};
_NzUploadModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NzUploadModule
});
_NzUploadModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [NzUploadComponent, NzUploadListComponent]
});
var NzUploadModule = _NzUploadModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NzUploadModule, [{
    type: NgModule,
    args: [{
      imports: [NzUploadComponent, NzUploadBtnComponent, NzUploadListComponent],
      exports: [NzUploadComponent]
    }]
  }], null, null);
})();

// src/app/routes/insert-shippment/upload.ts
var _c021 = () => ({ authorization: "authorization-text" });
var _NzDemoUploadBasicComponent = class _NzDemoUploadBasicComponent {
  constructor(msg) {
    this.msg = msg;
  }
  handleChange(info) {
    if (info.file.status !== "uploading") {
      console.log(info.file, info.fileList);
    }
    if (info.file.status === "done") {
      this.msg.success(`${info.file.name} file uploaded successfully`);
    } else if (info.file.status === "error") {
      this.msg.error(`${info.file.name} file upload failed.`);
    }
  }
};
_NzDemoUploadBasicComponent.\u0275fac = function NzDemoUploadBasicComponent_Factory(t) {
  return new (t || _NzDemoUploadBasicComponent)(\u0275\u0275directiveInject(NzMessageService));
};
_NzDemoUploadBasicComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _NzDemoUploadBasicComponent, selectors: [["nz-demo-upload-basic"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 4, vars: 2, consts: [["nzAction", "https://www.mocky.io/v2/5cc8019d300000980a055e76", 3, "nzChange", "nzHeaders"], ["nz-button", ""], ["nz-icon", "", "nzType", "upload"]], template: function NzDemoUploadBasicComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "nz-upload", 0);
    \u0275\u0275listener("nzChange", function NzDemoUploadBasicComponent_Template_nz_upload_nzChange_0_listener($event) {
      return ctx.handleChange($event);
    });
    \u0275\u0275elementStart(1, "button", 1);
    \u0275\u0275element(2, "span", 2);
    \u0275\u0275text(3, " Click to Upload ");
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275property("nzHeaders", \u0275\u0275pureFunction0(1, _c021));
  }
}, dependencies: [NzUploadModule, NzUploadComponent, NzButtonModule, NzButtonComponent, NzTransitionPatchDirective, NzWaveDirective, NzIconModule, NzIconDirective], encapsulation: 2 });
var NzDemoUploadBasicComponent = _NzDemoUploadBasicComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(NzDemoUploadBasicComponent, { className: "NzDemoUploadBasicComponent", filePath: "src\\app\\routes\\insert-shippment\\upload.ts", lineNumber: 26 });
})();

// src/app/routes/insert-shippment/insert.ts
function InsertComponent_ng_template_10_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " Please input your clientName! ");
  }
}
function InsertComponent_ng_template_10_Conditional_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275text(0, " The clientName is redundant! ");
  }
}
function InsertComponent_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, InsertComponent_ng_template_10_Conditional_0_Template, 1, 0)(1, InsertComponent_ng_template_10_Conditional_1_Template, 1, 0);
  }
  if (rf & 2) {
    const control_r2 = ctx.$implicit;
    \u0275\u0275conditional(0, (control_r2.errors == null ? null : control_r2.errors["required"]) ? 0 : -1);
    \u0275\u0275advance();
    \u0275\u0275conditional(1, (control_r2.errors == null ? null : control_r2.errors["duplicated"]) ? 1 : -1);
  }
}
var _InsertComponent = class _InsertComponent {
  onChange($event) {
    throw new Error("Method not implemented.");
  }
  constructor(fb) {
    this.fb = fb;
    this.selectedValue = null;
    this.validateForm = this.fb.group({
      id: [null, Validators.required],
      clientName: [null, Validators.required],
      blNumber: [null, Validators.required],
      hsCode: [null, Validators.required],
      blWeight: [null, Validators.required],
      manufacturerName: [null, Validators.required],
      notifyPartyName: [null, Validators.required],
      cargoxUploadDate: [null, Validators.required],
      containersNumber: [null, Validators.required],
      invoiceDate: [null, Validators.required],
      invoiceNumber: [null, Validators.required],
      invoiceDueDate: [null, Validators.required],
      invoiceAmount: [null, Validators.required],
      brokerName: [null, Validators.required],
      kgPrice: [null, Validators.required],
      freeDays: [null, Validators.required],
      pod: [null, Validators.required],
      podArriveDate: [null, Validators.required],
      form4Status: [null, Validators.required],
      storageInvFees: [null, Validators.required],
      docAtOfficeDate: [null, Validators.required],
      material: [null, Validators.required],
      customsFinishingDate: [null, Validators.required],
      customsFeesReceivingDate: [null, Validators.required],
      acidNumber: [null, Validators.required],
      customsCertificateNumber: [null, Validators.required],
      form4Bank: [null, Validators.required],
      dueDaysOfDemurrage: [null, Validators.required],
      totalAmountReceived: [null, Validators.required]
    });
  }
  submitForm() {
    console.log("submit", this.validateForm.value);
  }
  resetForm(e) {
    e.preventDefault();
    this.validateForm.reset();
  }
};
_InsertComponent.\u0275fac = function InsertComponent_Factory(t) {
  return new (t || _InsertComponent)(\u0275\u0275directiveInject(FormBuilder));
};
_InsertComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _InsertComponent, selectors: [["nz-demo-form-validate-reactive"]], standalone: true, features: [\u0275\u0275StandaloneFeature], decls: 201, vars: 38, consts: [["userErrorTpl", ""], [3, "ngSubmit", "formGroup"], ["nz-row", "", 3, "nzGutter"], ["nz-col", "", 3, "nzSpan"], ["nzHasFeedback", "", "nzValidatingTip", "Validating...", 3, "nzErrorTip"], ["nzRequired", ""], ["nz-input", "", "formControlName", "clientName", "placeholder", "Please input Vaild clientName"], ["nzHasFeedback", ""], ["nz-input", "", "formControlName", "blNumber", "placeholder", "Please input Vaild blNumber"], [3, "ngModelChange"], [3, "nzSpan"], ["nz-button", "", "nzType", "primary", 3, "disabled"], ["nz-button", "", 3, "click"]], template: function InsertComponent_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = \u0275\u0275getCurrentView();
    \u0275\u0275element(0, "page-header");
    \u0275\u0275elementStart(1, "nz-card")(2, "form", 1);
    \u0275\u0275listener("ngSubmit", function InsertComponent_Template_form_ngSubmit_2_listener() {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.submitForm());
    });
    \u0275\u0275elementStart(3, "div", 2)(4, "div", 3)(5, "nz-form-item")(6, "nz-form-control", 4)(7, "nz-form-label", 5);
    \u0275\u0275text(8, "CLIENT NAME ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(9, "input", 6);
    \u0275\u0275template(10, InsertComponent_ng_template_10_Template, 2, 2, "ng-template", null, 0, \u0275\u0275templateRefExtractor);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(12, "div", 3)(13, "nz-form-item")(14, "nz-form-control", 7)(15, "nz-form-label");
    \u0275\u0275text(16, "B/L NUMBER ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(17, "input", 8);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(18, "div", 2)(19, "div", 3)(20, "nz-form-item")(21, "nz-form-control", 7)(22, "nz-form-label");
    \u0275\u0275text(23, "HS CODE ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(24, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(25, "div", 3)(26, "nz-form-item")(27, "nz-form-control", 7)(28, "nz-form-label");
    \u0275\u0275text(29, "B/L WEIGHT ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(30, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(31, "div", 3)(32, "nz-form-item")(33, "nz-form-control", 7)(34, "nz-form-label");
    \u0275\u0275text(35, "MANUFACTURER NAME ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(36, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(37, "div", 3)(38, "nz-form-item")(39, "nz-form-control", 7)(40, "nz-form-label");
    \u0275\u0275text(41, "NOTIFY PARTY NAME ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(42, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(43, "div", 3)(44, "nz-form-item")(45, "nz-form-control", 7)(46, "nz-form-label");
    \u0275\u0275text(47, "CARGOX UPLOAD DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(48, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_48_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(49, "div", 3)(50, "nz-form-item")(51, "nz-form-control", 7)(52, "nz-form-label");
    \u0275\u0275text(53, "CONTAINERS NUMBER ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(54, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(55, "div", 3)(56, "nz-form-item")(57, "nz-form-control", 7)(58, "nz-form-label");
    \u0275\u0275text(59, "INVOICE DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(60, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_60_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(61, "div", 3)(62, "nz-form-item")(63, "nz-form-control", 7)(64, "nz-form-label");
    \u0275\u0275text(65, "INVOICE NUMBER ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(66, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(67, "div", 3)(68, "nz-form-item")(69, "nz-form-control", 7)(70, "nz-form-label");
    \u0275\u0275text(71, "INVOICE DUE DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(72, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_72_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(73, "div", 3)(74, "nz-form-item")(75, "nz-form-control", 7)(76, "nz-form-label");
    \u0275\u0275text(77, "INVOICE AMOUNT ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(78, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(79, "div", 3)(80, "nz-form-item")(81, "nz-form-control", 7)(82, "nz-form-label");
    \u0275\u0275text(83, "BROKER NAME ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(84, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(85, "div", 3)(86, "nz-form-item")(87, "nz-form-control", 7)(88, "nz-form-label");
    \u0275\u0275text(89, "KG PRICE ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(90, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(91, "div", 3)(92, "nz-form-item")(93, "nz-form-control", 7)(94, "nz-form-label");
    \u0275\u0275text(95, "FREE DAYS ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(96, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(97, "div", 3)(98, "nz-form-item")(99, "nz-form-control", 7)(100, "nz-form-label");
    \u0275\u0275text(101, "POD ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(102, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(103, "div", 3)(104, "nz-form-item")(105, "nz-form-control", 7)(106, "nz-form-label");
    \u0275\u0275text(107, "POD ARRIVE DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(108, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_108_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(109, "div", 3)(110, "nz-form-item")(111, "nz-form-control", 7)(112, "nz-form-label");
    \u0275\u0275text(113, "FORM 4 STATUES ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(114, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(115, "div", 3)(116, "nz-form-item")(117, "nz-form-control", 7)(118, "nz-form-label");
    \u0275\u0275text(119, "DEMEURRAGE FEES TOTAL ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(120, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(121, "div", 3)(122, "nz-form-item")(123, "nz-form-control", 7)(124, "nz-form-label");
    \u0275\u0275text(125, "STORAGE INV. FEES ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(126, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(127, "div", 3)(128, "nz-form-item")(129, "nz-form-control", 7)(130, "nz-form-label");
    \u0275\u0275text(131, "DOC AT OOFICE DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(132, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_132_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(133, "div", 3)(134, "nz-form-item")(135, "nz-form-control", 7)(136, "nz-form-label");
    \u0275\u0275text(137, "MATERIAL ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(138, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(139, "div", 3)(140, "nz-form-item")(141, "nz-form-control", 7)(142, "nz-form-label");
    \u0275\u0275text(143, "CUSTOMS FINISHING DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(144, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_144_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(145, "div", 3)(146, "nz-form-item")(147, "nz-form-control", 7)(148, "nz-form-label");
    \u0275\u0275text(149, "CUSTOMS FEES RECEIVING DATE ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(150, "nz-date-picker", 9);
    \u0275\u0275listener("ngModelChange", function InsertComponent_Template_nz_date_picker_ngModelChange_150_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.onChange($event));
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(151, "div", 3)(152, "nz-form-item")(153, "nz-form-control", 7)(154, "nz-form-label");
    \u0275\u0275text(155, "ACID NUMBER ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(156, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(157, "div", 3)(158, "nz-form-item")(159, "nz-form-control", 7)(160, "nz-form-label");
    \u0275\u0275text(161, "CUSTOMS CERTIFICATE NUMBER ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(162, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(163, "div", 3)(164, "nz-form-item")(165, "nz-form-control", 7)(166, "nz-form-label");
    \u0275\u0275text(167, "FORM 4 BANK ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(168, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(169, "div", 3)(170, "nz-form-item")(171, "nz-form-control", 7)(172, "nz-form-label");
    \u0275\u0275text(173, "FORM 4 FEES ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(174, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(175, "div", 3)(176, "nz-form-item")(177, "nz-form-control", 7)(178, "nz-form-label");
    \u0275\u0275text(179, "DUE DAYS OF DEMURRAGE ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(180, "input", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(181, "div", 3)(182, "nz-form-item")(183, "nz-form-control", 7)(184, "nz-form-label");
    \u0275\u0275text(185, "TOTAL AMOUNT RECEIVED ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(186, "input", 8);
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(187, "div", 3)(188, "nz-form-item")(189, "nz-form-control", 7)(190, "nz-form-label");
    \u0275\u0275text(191, "SCANED DOCUMENTS ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(192, "div");
    \u0275\u0275element(193, "nz-demo-upload-basic");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(194, "div", 3)(195, "nz-form-item")(196, "nz-form-control", 10)(197, "button", 11);
    \u0275\u0275text(198, "Submit");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(199, "button", 12);
    \u0275\u0275listener("click", function InsertComponent_Template_button_click_199_listener($event) {
      \u0275\u0275restoreView(_r1);
      return \u0275\u0275resetView(ctx.resetForm($event));
    });
    \u0275\u0275text(200, "Reset");
    \u0275\u0275elementEnd()()()()()();
  }
  if (rf & 2) {
    const userErrorTpl_r3 = \u0275\u0275reference(11);
    \u0275\u0275advance(2);
    \u0275\u0275property("formGroup", ctx.validateForm);
    \u0275\u0275advance();
    \u0275\u0275property("nzGutter", 20);
    \u0275\u0275advance();
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzErrorTip", userErrorTpl_r3);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzGutter", 20);
    \u0275\u0275advance();
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(6);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(7);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance(2);
    \u0275\u0275property("nzSpan", 12);
    \u0275\u0275advance();
    \u0275\u0275property("disabled", !ctx.validateForm.valid);
  }
}, dependencies: [
  PageHeaderModule,
  PageHeaderComponent,
  CommonModule,
  NzFormModule,
  NzColDirective,
  NzRowDirective,
  NzFormItemComponent,
  NzFormLabelComponent,
  NzFormControlComponent,
  FormsModule,
  \u0275NgNoValidate,
  DefaultValueAccessor,
  NgControlStatus,
  NgControlStatusGroup,
  ReactiveFormsModule,
  FormGroupDirective,
  FormControlName,
  NzInputModule,
  NzInputDirective,
  NzButtonModule,
  NzButtonComponent,
  NzTransitionPatchDirective,
  NzWaveDirective,
  NzSelectModule,
  NzCardModule,
  NzCardComponent,
  NzGridModule,
  NzDatePickerModule,
  NzDatePickerComponent,
  NzDemoUploadBasicComponent,
  NzIconModule
], styles: ["\n\nnz-date-picker[_ngcontent-%COMP%] {\n  width: 100% !important;\n}\n/*# sourceMappingURL=insert.css.map */"] });
var InsertComponent = _InsertComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(InsertComponent, { className: "InsertComponent", filePath: "src\\app\\routes\\insert-shippment\\insert.ts", lineNumber: 334 });
})();

// src/app/routes/routes.ts
var routes = [
  {
    path: "",
    component: LayoutBasicComponent,
    canActivate: [startPageGuard, authSimpleCanActivate],
    canActivateChild: [authSimpleCanActivateChild],
    data: {},
    children: [
      { path: "", redirectTo: "dashboard", pathMatch: "full" },
      { path: "dashboard", component: DashboardComponent },
      { path: "register", component: RegiserComponent },
      { path: "insert-shippment", component: InsertComponent }
    ]
  },
  // passport
  { path: "", loadChildren: () => import("./chunk-BKRIWMB6.js").then((m) => m.routes) },
  { path: "exception", loadChildren: () => import("./chunk-L3F3SMEL.js").then((m) => m.routes) },
  { path: "**", redirectTo: "exception/404" }
];

// src/style-icons.ts
var ICONS = [AppstoreOutline];

// src/style-icons-auto.ts
var ICONS_AUTO = [
  AlipayCircleOutline,
  ArrowDownOutline,
  CopyrightOutline,
  FullscreenExitOutline,
  FullscreenOutline,
  GithubOutline,
  LockOutline,
  LogoutOutline,
  MailOutline,
  SettingOutline,
  TaobaoCircleOutline,
  ToolOutline,
  UserOutline,
  WeiboCircleOutline,
  PlusSquareOutline,
  GlobalOutline,
  PlusCircleOutline,
  FileAddOutline
];

// src/app/app.config.ts
var defaultLang = {
  abbr: "en",
  ng: en_default,
  zorro: en_US,
  date: en_US_default,
  delon: enUS
};
var alainConfig = {
  auth: { login_url: "/passport/login" }
};
var ngZorroConfig = {};
var routerFeatures = [
  withComponentInputBinding(),
  withViewTransitions(),
  withInMemoryScrolling({ scrollPositionRestoration: "top" })
];
if (environment.useHash)
  routerFeatures.push(withHashLocation());
var providers = [
  provideHttpClient(withInterceptors([...environment.interceptorFns ?? [], authSimpleInterceptor, defaultInterceptor])),
  provideAnimations(),
  provideRouter(routes, ...routerFeatures),
  provideAlain({ config: alainConfig, defaultLang, i18nClass: I18NService, icons: [...ICONS_AUTO, ...ICONS] }),
  provideNzConfig(ngZorroConfig),
  provideAuth(),
  provideCellWidgets(...CELL_WIDGETS),
  provideSTWidgets(...ST_WIDGETS),
  provideStartup(),
  ...environment.providers || []
];
if (environment.api?.refreshTokenEnabled && environment.api.refreshTokenType === "auth-refresh") {
  providers.push(provideBindAuthRefresh());
}
var appConfig = {
  providers
};

// src/main.ts
bootstrapApplication(AppComponent, appConfig).catch((err) => console.error(err));
//# sourceMappingURL=main.js.map
